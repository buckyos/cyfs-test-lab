// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protos/standard_objects.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct ContractBodyContent {
    // message fields
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ContractBodyContent {
    fn default() -> &'a ContractBodyContent {
        <ContractBodyContent as ::protobuf::Message>::default_instance()
    }
}

impl ContractBodyContent {
    pub fn new() -> ContractBodyContent {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ContractBodyContent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContractBodyContent {
        ContractBodyContent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &ContractBodyContent| { &m.data },
                |m: &mut ContractBodyContent| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ContractBodyContent>(
                "ContractBodyContent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ContractBodyContent {
        static instance: ::protobuf::rt::LazyV2<ContractBodyContent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ContractBodyContent::new)
    }
}

impl ::protobuf::Clear for ContractBodyContent {
    fn clear(&mut self) {
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContractBodyContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContractBodyContent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeviceBodyContent {
    // message fields
    pub endpoints: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub sn_list: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub passive_pn_list: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // message oneof groups
    pub _name: ::std::option::Option<DeviceBodyContent_oneof__name>,
    pub _bdt_version: ::std::option::Option<DeviceBodyContent_oneof__bdt_version>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeviceBodyContent {
    fn default() -> &'a DeviceBodyContent {
        <DeviceBodyContent as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum DeviceBodyContent_oneof__name {
    name(::std::string::String),
}

#[derive(Clone,PartialEq,Debug)]
pub enum DeviceBodyContent_oneof__bdt_version {
    bdt_version(u32),
}

impl DeviceBodyContent {
    pub fn new() -> DeviceBodyContent {
        ::std::default::Default::default()
    }

    // repeated bytes endpoints = 1;


    pub fn get_endpoints(&self) -> &[::std::vec::Vec<u8>] {
        &self.endpoints
    }
    pub fn clear_endpoints(&mut self) {
        self.endpoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoints(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.endpoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_endpoints(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.endpoints
    }

    // Take field
    pub fn take_endpoints(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.endpoints, ::protobuf::RepeatedField::new())
    }

    // repeated bytes sn_list = 2;


    pub fn get_sn_list(&self) -> &[::std::vec::Vec<u8>] {
        &self.sn_list
    }
    pub fn clear_sn_list(&mut self) {
        self.sn_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_sn_list(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.sn_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sn_list(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.sn_list
    }

    // Take field
    pub fn take_sn_list(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.sn_list, ::protobuf::RepeatedField::new())
    }

    // repeated bytes passive_pn_list = 3;


    pub fn get_passive_pn_list(&self) -> &[::std::vec::Vec<u8>] {
        &self.passive_pn_list
    }
    pub fn clear_passive_pn_list(&mut self) {
        self.passive_pn_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_passive_pn_list(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.passive_pn_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_passive_pn_list(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.passive_pn_list
    }

    // Take field
    pub fn take_passive_pn_list(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.passive_pn_list, ::protobuf::RepeatedField::new())
    }

    // string name = 4;


    pub fn get_name(&self) -> &str {
        match self._name {
            ::std::option::Option::Some(DeviceBodyContent_oneof__name::name(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_name(&mut self) {
        self._name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        match self._name {
            ::std::option::Option::Some(DeviceBodyContent_oneof__name::name(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self._name = ::std::option::Option::Some(DeviceBodyContent_oneof__name::name(v))
    }

    // Mutable pointer to the field.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(DeviceBodyContent_oneof__name::name(_)) = self._name {
        } else {
            self._name = ::std::option::Option::Some(DeviceBodyContent_oneof__name::name(::std::string::String::new()));
        }
        match self._name {
            ::std::option::Option::Some(DeviceBodyContent_oneof__name::name(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        if self.has_name() {
            match self._name.take() {
                ::std::option::Option::Some(DeviceBodyContent_oneof__name::name(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // uint32 bdt_version = 5;


    pub fn get_bdt_version(&self) -> u32 {
        match self._bdt_version {
            ::std::option::Option::Some(DeviceBodyContent_oneof__bdt_version::bdt_version(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_bdt_version(&mut self) {
        self._bdt_version = ::std::option::Option::None;
    }

    pub fn has_bdt_version(&self) -> bool {
        match self._bdt_version {
            ::std::option::Option::Some(DeviceBodyContent_oneof__bdt_version::bdt_version(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bdt_version(&mut self, v: u32) {
        self._bdt_version = ::std::option::Option::Some(DeviceBodyContent_oneof__bdt_version::bdt_version(v))
    }
}

impl ::protobuf::Message for DeviceBodyContent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.endpoints)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.sn_list)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.passive_pn_list)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._name = ::std::option::Option::Some(DeviceBodyContent_oneof__name::name(is.read_string()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._bdt_version = ::std::option::Option::Some(DeviceBodyContent_oneof__bdt_version::bdt_version(is.read_uint32()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.endpoints {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in &self.sn_list {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in &self.passive_pn_list {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        if let ::std::option::Option::Some(ref v) = self._name {
            match v {
                &DeviceBodyContent_oneof__name::name(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._bdt_version {
            match v {
                &DeviceBodyContent_oneof__bdt_version::bdt_version(v) => {
                    my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.endpoints {
            os.write_bytes(1, &v)?;
        };
        for v in &self.sn_list {
            os.write_bytes(2, &v)?;
        };
        for v in &self.passive_pn_list {
            os.write_bytes(3, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self._name {
            match v {
                &DeviceBodyContent_oneof__name::name(ref v) => {
                    os.write_string(4, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._bdt_version {
            match v {
                &DeviceBodyContent_oneof__bdt_version::bdt_version(v) => {
                    os.write_uint32(5, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeviceBodyContent {
        DeviceBodyContent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "endpoints",
                |m: &DeviceBodyContent| { &m.endpoints },
                |m: &mut DeviceBodyContent| { &mut m.endpoints },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "sn_list",
                |m: &DeviceBodyContent| { &m.sn_list },
                |m: &mut DeviceBodyContent| { &mut m.sn_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "passive_pn_list",
                |m: &DeviceBodyContent| { &m.passive_pn_list },
                |m: &mut DeviceBodyContent| { &mut m.passive_pn_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "name",
                DeviceBodyContent::has_name,
                DeviceBodyContent::get_name,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                "bdt_version",
                DeviceBodyContent::has_bdt_version,
                DeviceBodyContent::get_bdt_version,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeviceBodyContent>(
                "DeviceBodyContent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeviceBodyContent {
        static instance: ::protobuf::rt::LazyV2<DeviceBodyContent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeviceBodyContent::new)
    }
}

impl ::protobuf::Clear for DeviceBodyContent {
    fn clear(&mut self) {
        self.endpoints.clear();
        self.sn_list.clear();
        self.passive_pn_list.clear();
        self._name = ::std::option::Option::None;
        self._bdt_version = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeviceBodyContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeviceBodyContent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DirBodyContent {
    // message fields
    pub field_type: DirBodyContent_Type,
    pub obj_list: ::protobuf::RepeatedField<DirBodyContent_ObjItem>,
    // message oneof groups
    pub _chunk_id: ::std::option::Option<DirBodyContent_oneof__chunk_id>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DirBodyContent {
    fn default() -> &'a DirBodyContent {
        <DirBodyContent as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum DirBodyContent_oneof__chunk_id {
    chunk_id(::std::vec::Vec<u8>),
}

impl DirBodyContent {
    pub fn new() -> DirBodyContent {
        ::std::default::Default::default()
    }

    // .DirBodyContent.Type type = 1;


    pub fn get_field_type(&self) -> DirBodyContent_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = DirBodyContent_Type::Chunk;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: DirBodyContent_Type) {
        self.field_type = v;
    }

    // bytes chunk_id = 2;


    pub fn get_chunk_id(&self) -> &[u8] {
        match self._chunk_id {
            ::std::option::Option::Some(DirBodyContent_oneof__chunk_id::chunk_id(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_chunk_id(&mut self) {
        self._chunk_id = ::std::option::Option::None;
    }

    pub fn has_chunk_id(&self) -> bool {
        match self._chunk_id {
            ::std::option::Option::Some(DirBodyContent_oneof__chunk_id::chunk_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_chunk_id(&mut self, v: ::std::vec::Vec<u8>) {
        self._chunk_id = ::std::option::Option::Some(DirBodyContent_oneof__chunk_id::chunk_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_chunk_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(DirBodyContent_oneof__chunk_id::chunk_id(_)) = self._chunk_id {
        } else {
            self._chunk_id = ::std::option::Option::Some(DirBodyContent_oneof__chunk_id::chunk_id(::std::vec::Vec::new()));
        }
        match self._chunk_id {
            ::std::option::Option::Some(DirBodyContent_oneof__chunk_id::chunk_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_chunk_id(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_chunk_id() {
            match self._chunk_id.take() {
                ::std::option::Option::Some(DirBodyContent_oneof__chunk_id::chunk_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // repeated .DirBodyContent.ObjItem obj_list = 3;


    pub fn get_obj_list(&self) -> &[DirBodyContent_ObjItem] {
        &self.obj_list
    }
    pub fn clear_obj_list(&mut self) {
        self.obj_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_obj_list(&mut self, v: ::protobuf::RepeatedField<DirBodyContent_ObjItem>) {
        self.obj_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_obj_list(&mut self) -> &mut ::protobuf::RepeatedField<DirBodyContent_ObjItem> {
        &mut self.obj_list
    }

    // Take field
    pub fn take_obj_list(&mut self) -> ::protobuf::RepeatedField<DirBodyContent_ObjItem> {
        ::std::mem::replace(&mut self.obj_list, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DirBodyContent {
    fn is_initialized(&self) -> bool {
        for v in &self.obj_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._chunk_id = ::std::option::Option::Some(DirBodyContent_oneof__chunk_id::chunk_id(is.read_bytes()?));
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.obj_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != DirBodyContent_Type::Chunk {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        for value in &self.obj_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self._chunk_id {
            match v {
                &DirBodyContent_oneof__chunk_id::chunk_id(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != DirBodyContent_Type::Chunk {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        for v in &self.obj_list {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self._chunk_id {
            match v {
                &DirBodyContent_oneof__chunk_id::chunk_id(ref v) => {
                    os.write_bytes(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DirBodyContent {
        DirBodyContent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DirBodyContent_Type>>(
                "type",
                |m: &DirBodyContent| { &m.field_type },
                |m: &mut DirBodyContent| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "chunk_id",
                DirBodyContent::has_chunk_id,
                DirBodyContent::get_chunk_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DirBodyContent_ObjItem>>(
                "obj_list",
                |m: &DirBodyContent| { &m.obj_list },
                |m: &mut DirBodyContent| { &mut m.obj_list },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DirBodyContent>(
                "DirBodyContent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DirBodyContent {
        static instance: ::protobuf::rt::LazyV2<DirBodyContent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DirBodyContent::new)
    }
}

impl ::protobuf::Clear for DirBodyContent {
    fn clear(&mut self) {
        self.field_type = DirBodyContent_Type::Chunk;
        self._chunk_id = ::std::option::Option::None;
        self.obj_list.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DirBodyContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DirBodyContent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DirBodyContent_ObjItem {
    // message fields
    pub obj_id: ::std::vec::Vec<u8>,
    pub value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DirBodyContent_ObjItem {
    fn default() -> &'a DirBodyContent_ObjItem {
        <DirBodyContent_ObjItem as ::protobuf::Message>::default_instance()
    }
}

impl DirBodyContent_ObjItem {
    pub fn new() -> DirBodyContent_ObjItem {
        ::std::default::Default::default()
    }

    // bytes obj_id = 1;


    pub fn get_obj_id(&self) -> &[u8] {
        &self.obj_id
    }
    pub fn clear_obj_id(&mut self) {
        self.obj_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_obj_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.obj_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_obj_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.obj_id
    }

    // Take field
    pub fn take_obj_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.obj_id, ::std::vec::Vec::new())
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DirBodyContent_ObjItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.obj_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.obj_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.obj_id);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.obj_id.is_empty() {
            os.write_bytes(1, &self.obj_id)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DirBodyContent_ObjItem {
        DirBodyContent_ObjItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "obj_id",
                |m: &DirBodyContent_ObjItem| { &m.obj_id },
                |m: &mut DirBodyContent_ObjItem| { &mut m.obj_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &DirBodyContent_ObjItem| { &m.value },
                |m: &mut DirBodyContent_ObjItem| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DirBodyContent_ObjItem>(
                "DirBodyContent.ObjItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DirBodyContent_ObjItem {
        static instance: ::protobuf::rt::LazyV2<DirBodyContent_ObjItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DirBodyContent_ObjItem::new)
    }
}

impl ::protobuf::Clear for DirBodyContent_ObjItem {
    fn clear(&mut self) {
        self.obj_id.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DirBodyContent_ObjItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DirBodyContent_ObjItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DirBodyContent_Type {
    Chunk = 0,
    ObjList = 1,
}

impl ::protobuf::ProtobufEnum for DirBodyContent_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DirBodyContent_Type> {
        match value {
            0 => ::std::option::Option::Some(DirBodyContent_Type::Chunk),
            1 => ::std::option::Option::Some(DirBodyContent_Type::ObjList),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DirBodyContent_Type] = &[
            DirBodyContent_Type::Chunk,
            DirBodyContent_Type::ObjList,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<DirBodyContent_Type>("DirBodyContent.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for DirBodyContent_Type {
}

impl ::std::default::Default for DirBodyContent_Type {
    fn default() -> Self {
        DirBodyContent_Type::Chunk
    }
}

impl ::protobuf::reflect::ProtobufValue for DirBodyContent_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChunkList {
    // message fields
    pub field_type: ChunkList_Type,
    pub chunk_id_list: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub file_id: ::std::vec::Vec<u8>,
    // message oneof groups
    pub _hash_method: ::std::option::Option<ChunkList_oneof__hash_method>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChunkList {
    fn default() -> &'a ChunkList {
        <ChunkList as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ChunkList_oneof__hash_method {
    hash_method(ChunkList_HashMethod),
}

impl ChunkList {
    pub fn new() -> ChunkList {
        ::std::default::Default::default()
    }

    // .ChunkList.Type type = 1;


    pub fn get_field_type(&self) -> ChunkList_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ChunkList_Type::ChunkInList;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ChunkList_Type) {
        self.field_type = v;
    }

    // repeated bytes chunk_id_list = 2;


    pub fn get_chunk_id_list(&self) -> &[::std::vec::Vec<u8>] {
        &self.chunk_id_list
    }
    pub fn clear_chunk_id_list(&mut self) {
        self.chunk_id_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_chunk_id_list(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.chunk_id_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_chunk_id_list(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.chunk_id_list
    }

    // Take field
    pub fn take_chunk_id_list(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.chunk_id_list, ::protobuf::RepeatedField::new())
    }

    // bytes file_id = 3;


    pub fn get_file_id(&self) -> &[u8] {
        &self.file_id
    }
    pub fn clear_file_id(&mut self) {
        self.file_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_file_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.file_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.file_id
    }

    // Take field
    pub fn take_file_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.file_id, ::std::vec::Vec::new())
    }

    // .ChunkList.HashMethod hash_method = 4;


    pub fn get_hash_method(&self) -> ChunkList_HashMethod {
        match self._hash_method {
            ::std::option::Option::Some(ChunkList_oneof__hash_method::hash_method(v)) => v,
            _ => ChunkList_HashMethod::Serial,
        }
    }
    pub fn clear_hash_method(&mut self) {
        self._hash_method = ::std::option::Option::None;
    }

    pub fn has_hash_method(&self) -> bool {
        match self._hash_method {
            ::std::option::Option::Some(ChunkList_oneof__hash_method::hash_method(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_hash_method(&mut self, v: ChunkList_HashMethod) {
        self._hash_method = ::std::option::Option::Some(ChunkList_oneof__hash_method::hash_method(v))
    }
}

impl ::protobuf::Message for ChunkList {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.chunk_id_list)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.file_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._hash_method = ::std::option::Option::Some(ChunkList_oneof__hash_method::hash_method(is.read_enum()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != ChunkList_Type::ChunkInList {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        for value in &self.chunk_id_list {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        if !self.file_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.file_id);
        }
        if let ::std::option::Option::Some(ref v) = self._hash_method {
            match v {
                &ChunkList_oneof__hash_method::hash_method(v) => {
                    my_size += ::protobuf::rt::enum_size(4, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != ChunkList_Type::ChunkInList {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        for v in &self.chunk_id_list {
            os.write_bytes(2, &v)?;
        };
        if !self.file_id.is_empty() {
            os.write_bytes(3, &self.file_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self._hash_method {
            match v {
                &ChunkList_oneof__hash_method::hash_method(v) => {
                    os.write_enum(4, ::protobuf::ProtobufEnum::value(&v))?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChunkList {
        ChunkList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ChunkList_Type>>(
                "type",
                |m: &ChunkList| { &m.field_type },
                |m: &mut ChunkList| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "chunk_id_list",
                |m: &ChunkList| { &m.chunk_id_list },
                |m: &mut ChunkList| { &mut m.chunk_id_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "file_id",
                |m: &ChunkList| { &m.file_id },
                |m: &mut ChunkList| { &mut m.file_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, ChunkList_HashMethod>(
                "hash_method",
                ChunkList::has_hash_method,
                ChunkList::get_hash_method,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChunkList>(
                "ChunkList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChunkList {
        static instance: ::protobuf::rt::LazyV2<ChunkList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChunkList::new)
    }
}

impl ::protobuf::Clear for ChunkList {
    fn clear(&mut self) {
        self.field_type = ChunkList_Type::ChunkInList;
        self.chunk_id_list.clear();
        self.file_id.clear();
        self._hash_method = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChunkList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ChunkList_Type {
    ChunkInList = 0,
    ChunkInFile = 1,
    ChunkInBundle = 2,
}

impl ::protobuf::ProtobufEnum for ChunkList_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ChunkList_Type> {
        match value {
            0 => ::std::option::Option::Some(ChunkList_Type::ChunkInList),
            1 => ::std::option::Option::Some(ChunkList_Type::ChunkInFile),
            2 => ::std::option::Option::Some(ChunkList_Type::ChunkInBundle),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ChunkList_Type] = &[
            ChunkList_Type::ChunkInList,
            ChunkList_Type::ChunkInFile,
            ChunkList_Type::ChunkInBundle,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ChunkList_Type>("ChunkList.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ChunkList_Type {
}

impl ::std::default::Default for ChunkList_Type {
    fn default() -> Self {
        ChunkList_Type::ChunkInList
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkList_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ChunkList_HashMethod {
    Serial = 0,
}

impl ::protobuf::ProtobufEnum for ChunkList_HashMethod {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ChunkList_HashMethod> {
        match value {
            0 => ::std::option::Option::Some(ChunkList_HashMethod::Serial),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ChunkList_HashMethod] = &[
            ChunkList_HashMethod::Serial,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ChunkList_HashMethod>("ChunkList.HashMethod", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ChunkList_HashMethod {
}

impl ::std::default::Default for ChunkList_HashMethod {
    fn default() -> Self {
        ChunkList_HashMethod::Serial
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkList_HashMethod {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FileBodyContent {
    // message fields
    pub chunk_list: ::protobuf::SingularPtrField<ChunkList>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FileBodyContent {
    fn default() -> &'a FileBodyContent {
        <FileBodyContent as ::protobuf::Message>::default_instance()
    }
}

impl FileBodyContent {
    pub fn new() -> FileBodyContent {
        ::std::default::Default::default()
    }

    // .ChunkList chunk_list = 1;


    pub fn get_chunk_list(&self) -> &ChunkList {
        self.chunk_list.as_ref().unwrap_or_else(|| <ChunkList as ::protobuf::Message>::default_instance())
    }
    pub fn clear_chunk_list(&mut self) {
        self.chunk_list.clear();
    }

    pub fn has_chunk_list(&self) -> bool {
        self.chunk_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chunk_list(&mut self, v: ChunkList) {
        self.chunk_list = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chunk_list(&mut self) -> &mut ChunkList {
        if self.chunk_list.is_none() {
            self.chunk_list.set_default();
        }
        self.chunk_list.as_mut().unwrap()
    }

    // Take field
    pub fn take_chunk_list(&mut self) -> ChunkList {
        self.chunk_list.take().unwrap_or_else(|| ChunkList::new())
    }
}

impl ::protobuf::Message for FileBodyContent {
    fn is_initialized(&self) -> bool {
        for v in &self.chunk_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.chunk_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.chunk_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.chunk_list.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FileBodyContent {
        FileBodyContent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ChunkList>>(
                "chunk_list",
                |m: &FileBodyContent| { &m.chunk_list },
                |m: &mut FileBodyContent| { &mut m.chunk_list },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FileBodyContent>(
                "FileBodyContent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FileBodyContent {
        static instance: ::protobuf::rt::LazyV2<FileBodyContent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FileBodyContent::new)
    }
}

impl ::protobuf::Clear for FileBodyContent {
    fn clear(&mut self) {
        self.chunk_list.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FileBodyContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FileBodyContent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Director {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    pub right: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Director {
    fn default() -> &'a Director {
        <Director as ::protobuf::Message>::default_instance()
    }
}

impl Director {
    pub fn new() -> Director {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }

    // uint32 right = 2;


    pub fn get_right(&self) -> u32 {
        self.right
    }
    pub fn clear_right(&mut self) {
        self.right = 0;
    }

    // Param is passed by value, moved
    pub fn set_right(&mut self, v: u32) {
        self.right = v;
    }
}

impl ::protobuf::Message for Director {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.right = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        if self.right != 0 {
            my_size += ::protobuf::rt::value_size(2, self.right, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        if self.right != 0 {
            os.write_uint32(2, self.right)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Director {
        Director::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "id",
                |m: &Director| { &m.id },
                |m: &mut Director| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "right",
                |m: &Director| { &m.right },
                |m: &mut Director| { &mut m.right },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Director>(
                "Director",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Director {
        static instance: ::protobuf::rt::LazyV2<Director> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Director::new)
    }
}

impl ::protobuf::Clear for Director {
    fn clear(&mut self) {
        self.id.clear();
        self.right = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Director {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Director {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OrgMember {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    pub right: u32,
    pub shares: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OrgMember {
    fn default() -> &'a OrgMember {
        <OrgMember as ::protobuf::Message>::default_instance()
    }
}

impl OrgMember {
    pub fn new() -> OrgMember {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }

    // uint32 right = 2;


    pub fn get_right(&self) -> u32 {
        self.right
    }
    pub fn clear_right(&mut self) {
        self.right = 0;
    }

    // Param is passed by value, moved
    pub fn set_right(&mut self, v: u32) {
        self.right = v;
    }

    // uint64 shares = 3;


    pub fn get_shares(&self) -> u64 {
        self.shares
    }
    pub fn clear_shares(&mut self) {
        self.shares = 0;
    }

    // Param is passed by value, moved
    pub fn set_shares(&mut self, v: u64) {
        self.shares = v;
    }
}

impl ::protobuf::Message for OrgMember {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.right = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.shares = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        if self.right != 0 {
            my_size += ::protobuf::rt::value_size(2, self.right, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.shares != 0 {
            my_size += ::protobuf::rt::value_size(3, self.shares, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        if self.right != 0 {
            os.write_uint32(2, self.right)?;
        }
        if self.shares != 0 {
            os.write_uint64(3, self.shares)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OrgMember {
        OrgMember::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "id",
                |m: &OrgMember| { &m.id },
                |m: &mut OrgMember| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "right",
                |m: &OrgMember| { &m.right },
                |m: &mut OrgMember| { &mut m.right },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "shares",
                |m: &OrgMember| { &m.shares },
                |m: &mut OrgMember| { &mut m.shares },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OrgMember>(
                "OrgMember",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OrgMember {
        static instance: ::protobuf::rt::LazyV2<OrgMember> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OrgMember::new)
    }
}

impl ::protobuf::Clear for OrgMember {
    fn clear(&mut self) {
        self.id.clear();
        self.right = 0;
        self.shares = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OrgMember {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OrgMember {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OrgBodyContent {
    // message fields
    pub members: ::protobuf::RepeatedField<OrgMember>,
    pub directors: ::protobuf::RepeatedField<Director>,
    pub total_equity: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OrgBodyContent {
    fn default() -> &'a OrgBodyContent {
        <OrgBodyContent as ::protobuf::Message>::default_instance()
    }
}

impl OrgBodyContent {
    pub fn new() -> OrgBodyContent {
        ::std::default::Default::default()
    }

    // repeated .OrgMember members = 1;


    pub fn get_members(&self) -> &[OrgMember] {
        &self.members
    }
    pub fn clear_members(&mut self) {
        self.members.clear();
    }

    // Param is passed by value, moved
    pub fn set_members(&mut self, v: ::protobuf::RepeatedField<OrgMember>) {
        self.members = v;
    }

    // Mutable pointer to the field.
    pub fn mut_members(&mut self) -> &mut ::protobuf::RepeatedField<OrgMember> {
        &mut self.members
    }

    // Take field
    pub fn take_members(&mut self) -> ::protobuf::RepeatedField<OrgMember> {
        ::std::mem::replace(&mut self.members, ::protobuf::RepeatedField::new())
    }

    // repeated .Director directors = 2;


    pub fn get_directors(&self) -> &[Director] {
        &self.directors
    }
    pub fn clear_directors(&mut self) {
        self.directors.clear();
    }

    // Param is passed by value, moved
    pub fn set_directors(&mut self, v: ::protobuf::RepeatedField<Director>) {
        self.directors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_directors(&mut self) -> &mut ::protobuf::RepeatedField<Director> {
        &mut self.directors
    }

    // Take field
    pub fn take_directors(&mut self) -> ::protobuf::RepeatedField<Director> {
        ::std::mem::replace(&mut self.directors, ::protobuf::RepeatedField::new())
    }

    // uint64 total_equity = 3;


    pub fn get_total_equity(&self) -> u64 {
        self.total_equity
    }
    pub fn clear_total_equity(&mut self) {
        self.total_equity = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_equity(&mut self, v: u64) {
        self.total_equity = v;
    }
}

impl ::protobuf::Message for OrgBodyContent {
    fn is_initialized(&self) -> bool {
        for v in &self.members {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.directors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.members)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.directors)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_equity = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.directors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.total_equity != 0 {
            my_size += ::protobuf::rt::value_size(3, self.total_equity, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.members {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.directors {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.total_equity != 0 {
            os.write_uint64(3, self.total_equity)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OrgBodyContent {
        OrgBodyContent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OrgMember>>(
                "members",
                |m: &OrgBodyContent| { &m.members },
                |m: &mut OrgBodyContent| { &mut m.members },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Director>>(
                "directors",
                |m: &OrgBodyContent| { &m.directors },
                |m: &mut OrgBodyContent| { &mut m.directors },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "total_equity",
                |m: &OrgBodyContent| { &m.total_equity },
                |m: &mut OrgBodyContent| { &mut m.total_equity },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OrgBodyContent>(
                "OrgBodyContent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OrgBodyContent {
        static instance: ::protobuf::rt::LazyV2<OrgBodyContent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OrgBodyContent::new)
    }
}

impl ::protobuf::Clear for OrgBodyContent {
    fn clear(&mut self) {
        self.members.clear();
        self.directors.clear();
        self.total_equity = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OrgBodyContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OrgBodyContent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeopleBodyContent {
    // message fields
    pub ood_list: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // message oneof groups
    pub _name: ::std::option::Option<PeopleBodyContent_oneof__name>,
    pub _icon: ::std::option::Option<PeopleBodyContent_oneof__icon>,
    pub _ood_work_mode: ::std::option::Option<PeopleBodyContent_oneof__ood_work_mode>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeopleBodyContent {
    fn default() -> &'a PeopleBodyContent {
        <PeopleBodyContent as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum PeopleBodyContent_oneof__name {
    name(::std::string::String),
}

#[derive(Clone,PartialEq,Debug)]
pub enum PeopleBodyContent_oneof__icon {
    icon(::std::vec::Vec<u8>),
}

#[derive(Clone,PartialEq,Debug)]
pub enum PeopleBodyContent_oneof__ood_work_mode {
    ood_work_mode(::std::string::String),
}

impl PeopleBodyContent {
    pub fn new() -> PeopleBodyContent {
        ::std::default::Default::default()
    }

    // repeated bytes ood_list = 1;


    pub fn get_ood_list(&self) -> &[::std::vec::Vec<u8>] {
        &self.ood_list
    }
    pub fn clear_ood_list(&mut self) {
        self.ood_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_ood_list(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.ood_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ood_list(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.ood_list
    }

    // Take field
    pub fn take_ood_list(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.ood_list, ::protobuf::RepeatedField::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        match self._name {
            ::std::option::Option::Some(PeopleBodyContent_oneof__name::name(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_name(&mut self) {
        self._name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        match self._name {
            ::std::option::Option::Some(PeopleBodyContent_oneof__name::name(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self._name = ::std::option::Option::Some(PeopleBodyContent_oneof__name::name(v))
    }

    // Mutable pointer to the field.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(PeopleBodyContent_oneof__name::name(_)) = self._name {
        } else {
            self._name = ::std::option::Option::Some(PeopleBodyContent_oneof__name::name(::std::string::String::new()));
        }
        match self._name {
            ::std::option::Option::Some(PeopleBodyContent_oneof__name::name(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        if self.has_name() {
            match self._name.take() {
                ::std::option::Option::Some(PeopleBodyContent_oneof__name::name(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bytes icon = 3;


    pub fn get_icon(&self) -> &[u8] {
        match self._icon {
            ::std::option::Option::Some(PeopleBodyContent_oneof__icon::icon(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_icon(&mut self) {
        self._icon = ::std::option::Option::None;
    }

    pub fn has_icon(&self) -> bool {
        match self._icon {
            ::std::option::Option::Some(PeopleBodyContent_oneof__icon::icon(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_icon(&mut self, v: ::std::vec::Vec<u8>) {
        self._icon = ::std::option::Option::Some(PeopleBodyContent_oneof__icon::icon(v))
    }

    // Mutable pointer to the field.
    pub fn mut_icon(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(PeopleBodyContent_oneof__icon::icon(_)) = self._icon {
        } else {
            self._icon = ::std::option::Option::Some(PeopleBodyContent_oneof__icon::icon(::std::vec::Vec::new()));
        }
        match self._icon {
            ::std::option::Option::Some(PeopleBodyContent_oneof__icon::icon(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_icon(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_icon() {
            match self._icon.take() {
                ::std::option::Option::Some(PeopleBodyContent_oneof__icon::icon(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // string ood_work_mode = 4;


    pub fn get_ood_work_mode(&self) -> &str {
        match self._ood_work_mode {
            ::std::option::Option::Some(PeopleBodyContent_oneof__ood_work_mode::ood_work_mode(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_ood_work_mode(&mut self) {
        self._ood_work_mode = ::std::option::Option::None;
    }

    pub fn has_ood_work_mode(&self) -> bool {
        match self._ood_work_mode {
            ::std::option::Option::Some(PeopleBodyContent_oneof__ood_work_mode::ood_work_mode(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ood_work_mode(&mut self, v: ::std::string::String) {
        self._ood_work_mode = ::std::option::Option::Some(PeopleBodyContent_oneof__ood_work_mode::ood_work_mode(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ood_work_mode(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(PeopleBodyContent_oneof__ood_work_mode::ood_work_mode(_)) = self._ood_work_mode {
        } else {
            self._ood_work_mode = ::std::option::Option::Some(PeopleBodyContent_oneof__ood_work_mode::ood_work_mode(::std::string::String::new()));
        }
        match self._ood_work_mode {
            ::std::option::Option::Some(PeopleBodyContent_oneof__ood_work_mode::ood_work_mode(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ood_work_mode(&mut self) -> ::std::string::String {
        if self.has_ood_work_mode() {
            match self._ood_work_mode.take() {
                ::std::option::Option::Some(PeopleBodyContent_oneof__ood_work_mode::ood_work_mode(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for PeopleBodyContent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.ood_list)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._name = ::std::option::Option::Some(PeopleBodyContent_oneof__name::name(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._icon = ::std::option::Option::Some(PeopleBodyContent_oneof__icon::icon(is.read_bytes()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._ood_work_mode = ::std::option::Option::Some(PeopleBodyContent_oneof__ood_work_mode::ood_work_mode(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.ood_list {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        if let ::std::option::Option::Some(ref v) = self._name {
            match v {
                &PeopleBodyContent_oneof__name::name(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._icon {
            match v {
                &PeopleBodyContent_oneof__icon::icon(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(3, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._ood_work_mode {
            match v {
                &PeopleBodyContent_oneof__ood_work_mode::ood_work_mode(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.ood_list {
            os.write_bytes(1, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self._name {
            match v {
                &PeopleBodyContent_oneof__name::name(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._icon {
            match v {
                &PeopleBodyContent_oneof__icon::icon(ref v) => {
                    os.write_bytes(3, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._ood_work_mode {
            match v {
                &PeopleBodyContent_oneof__ood_work_mode::ood_work_mode(ref v) => {
                    os.write_string(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeopleBodyContent {
        PeopleBodyContent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "ood_list",
                |m: &PeopleBodyContent| { &m.ood_list },
                |m: &mut PeopleBodyContent| { &mut m.ood_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "name",
                PeopleBodyContent::has_name,
                PeopleBodyContent::get_name,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "icon",
                PeopleBodyContent::has_icon,
                PeopleBodyContent::get_icon,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "ood_work_mode",
                PeopleBodyContent::has_ood_work_mode,
                PeopleBodyContent::get_ood_work_mode,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PeopleBodyContent>(
                "PeopleBodyContent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PeopleBodyContent {
        static instance: ::protobuf::rt::LazyV2<PeopleBodyContent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PeopleBodyContent::new)
    }
}

impl ::protobuf::Clear for PeopleBodyContent {
    fn clear(&mut self) {
        self.ood_list.clear();
        self._name = ::std::option::Option::None;
        self._icon = ::std::option::Option::None;
        self._ood_work_mode = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeopleBodyContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeopleBodyContent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SimpleGroupBodyContent {
    // message fields
    pub members: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub ood_list: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // message oneof groups
    pub _ood_work_mode: ::std::option::Option<SimpleGroupBodyContent_oneof__ood_work_mode>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SimpleGroupBodyContent {
    fn default() -> &'a SimpleGroupBodyContent {
        <SimpleGroupBodyContent as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SimpleGroupBodyContent_oneof__ood_work_mode {
    ood_work_mode(::std::string::String),
}

impl SimpleGroupBodyContent {
    pub fn new() -> SimpleGroupBodyContent {
        ::std::default::Default::default()
    }

    // repeated bytes members = 1;


    pub fn get_members(&self) -> &[::std::vec::Vec<u8>] {
        &self.members
    }
    pub fn clear_members(&mut self) {
        self.members.clear();
    }

    // Param is passed by value, moved
    pub fn set_members(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.members = v;
    }

    // Mutable pointer to the field.
    pub fn mut_members(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.members
    }

    // Take field
    pub fn take_members(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.members, ::protobuf::RepeatedField::new())
    }

    // repeated bytes ood_list = 2;


    pub fn get_ood_list(&self) -> &[::std::vec::Vec<u8>] {
        &self.ood_list
    }
    pub fn clear_ood_list(&mut self) {
        self.ood_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_ood_list(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.ood_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ood_list(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.ood_list
    }

    // Take field
    pub fn take_ood_list(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.ood_list, ::protobuf::RepeatedField::new())
    }

    // string ood_work_mode = 3;


    pub fn get_ood_work_mode(&self) -> &str {
        match self._ood_work_mode {
            ::std::option::Option::Some(SimpleGroupBodyContent_oneof__ood_work_mode::ood_work_mode(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_ood_work_mode(&mut self) {
        self._ood_work_mode = ::std::option::Option::None;
    }

    pub fn has_ood_work_mode(&self) -> bool {
        match self._ood_work_mode {
            ::std::option::Option::Some(SimpleGroupBodyContent_oneof__ood_work_mode::ood_work_mode(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ood_work_mode(&mut self, v: ::std::string::String) {
        self._ood_work_mode = ::std::option::Option::Some(SimpleGroupBodyContent_oneof__ood_work_mode::ood_work_mode(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ood_work_mode(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(SimpleGroupBodyContent_oneof__ood_work_mode::ood_work_mode(_)) = self._ood_work_mode {
        } else {
            self._ood_work_mode = ::std::option::Option::Some(SimpleGroupBodyContent_oneof__ood_work_mode::ood_work_mode(::std::string::String::new()));
        }
        match self._ood_work_mode {
            ::std::option::Option::Some(SimpleGroupBodyContent_oneof__ood_work_mode::ood_work_mode(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ood_work_mode(&mut self) -> ::std::string::String {
        if self.has_ood_work_mode() {
            match self._ood_work_mode.take() {
                ::std::option::Option::Some(SimpleGroupBodyContent_oneof__ood_work_mode::ood_work_mode(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for SimpleGroupBodyContent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.members)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.ood_list)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._ood_work_mode = ::std::option::Option::Some(SimpleGroupBodyContent_oneof__ood_work_mode::ood_work_mode(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.members {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in &self.ood_list {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        if let ::std::option::Option::Some(ref v) = self._ood_work_mode {
            match v {
                &SimpleGroupBodyContent_oneof__ood_work_mode::ood_work_mode(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.members {
            os.write_bytes(1, &v)?;
        };
        for v in &self.ood_list {
            os.write_bytes(2, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self._ood_work_mode {
            match v {
                &SimpleGroupBodyContent_oneof__ood_work_mode::ood_work_mode(ref v) => {
                    os.write_string(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SimpleGroupBodyContent {
        SimpleGroupBodyContent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "members",
                |m: &SimpleGroupBodyContent| { &m.members },
                |m: &mut SimpleGroupBodyContent| { &mut m.members },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "ood_list",
                |m: &SimpleGroupBodyContent| { &m.ood_list },
                |m: &mut SimpleGroupBodyContent| { &mut m.ood_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "ood_work_mode",
                SimpleGroupBodyContent::has_ood_work_mode,
                SimpleGroupBodyContent::get_ood_work_mode,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SimpleGroupBodyContent>(
                "SimpleGroupBodyContent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SimpleGroupBodyContent {
        static instance: ::protobuf::rt::LazyV2<SimpleGroupBodyContent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SimpleGroupBodyContent::new)
    }
}

impl ::protobuf::Clear for SimpleGroupBodyContent {
    fn clear(&mut self) {
        self.members.clear();
        self.ood_list.clear();
        self._ood_work_mode = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SimpleGroupBodyContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SimpleGroupBodyContent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TxBodyContent {
    // message fields
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TxBodyContent {
    fn default() -> &'a TxBodyContent {
        <TxBodyContent as ::protobuf::Message>::default_instance()
    }
}

impl TxBodyContent {
    pub fn new() -> TxBodyContent {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for TxBodyContent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TxBodyContent {
        TxBodyContent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &TxBodyContent| { &m.data },
                |m: &mut TxBodyContent| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TxBodyContent>(
                "TxBodyContent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TxBodyContent {
        static instance: ::protobuf::rt::LazyV2<TxBodyContent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TxBodyContent::new)
    }
}

impl ::protobuf::Clear for TxBodyContent {
    fn clear(&mut self) {
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TxBodyContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxBodyContent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProofData {
    // message fields
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProofData {
    fn default() -> &'a ProofData {
        <ProofData as ::protobuf::Message>::default_instance()
    }
}

impl ProofData {
    pub fn new() -> ProofData {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ProofData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProofData {
        ProofData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &ProofData| { &m.data },
                |m: &mut ProofData| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProofData>(
                "ProofData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProofData {
        static instance: ::protobuf::rt::LazyV2<ProofData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProofData::new)
    }
}

impl ::protobuf::Clear for ProofData {
    fn clear(&mut self) {
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProofData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProofData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProofOfServiceBodyContent {
    // message fields
    pub data: ::protobuf::SingularPtrField<ProofData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProofOfServiceBodyContent {
    fn default() -> &'a ProofOfServiceBodyContent {
        <ProofOfServiceBodyContent as ::protobuf::Message>::default_instance()
    }
}

impl ProofOfServiceBodyContent {
    pub fn new() -> ProofOfServiceBodyContent {
        ::std::default::Default::default()
    }

    // .ProofData data = 1;


    pub fn get_data(&self) -> &ProofData {
        self.data.as_ref().unwrap_or_else(|| <ProofData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ProofData) {
        self.data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ProofData {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ProofData {
        self.data.take().unwrap_or_else(|| ProofData::new())
    }
}

impl ::protobuf::Message for ProofOfServiceBodyContent {
    fn is_initialized(&self) -> bool {
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.data.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProofOfServiceBodyContent {
        ProofOfServiceBodyContent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProofData>>(
                "data",
                |m: &ProofOfServiceBodyContent| { &m.data },
                |m: &mut ProofOfServiceBodyContent| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProofOfServiceBodyContent>(
                "ProofOfServiceBodyContent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProofOfServiceBodyContent {
        static instance: ::protobuf::rt::LazyV2<ProofOfServiceBodyContent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProofOfServiceBodyContent::new)
    }
}

impl ::protobuf::Clear for ProofOfServiceBodyContent {
    fn clear(&mut self) {
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProofOfServiceBodyContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProofOfServiceBodyContent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dprotos/standard_objects.proto\")\n\x13ContractBodyContent\x12\x12\
    \n\x04data\x18\x01\x20\x01(\x0cR\x04data\"\xca\x01\n\x11DeviceBodyConten\
    t\x12\x1c\n\tendpoints\x18\x01\x20\x03(\x0cR\tendpoints\x12\x17\n\x07sn_\
    list\x18\x02\x20\x03(\x0cR\x06snList\x12&\n\x0fpassive_pn_list\x18\x03\
    \x20\x03(\x0cR\rpassivePnList\x12\x17\n\x04name\x18\x04\x20\x01(\tH\0R\
    \x04name\x88\x01\x01\x12$\n\x0bbdt_version\x18\x05\x20\x01(\rH\x01R\nbdt\
    Version\x88\x01\x01B\x07\n\x05_nameB\x0e\n\x0c_bdt_version\"\xf3\x01\n\
    \x0eDirBodyContent\x12(\n\x04type\x18\x01\x20\x01(\x0e2\x14.DirBodyConte\
    nt.TypeR\x04type\x12\x1e\n\x08chunk_id\x18\x02\x20\x01(\x0cH\0R\x07chunk\
    Id\x88\x01\x01\x122\n\x08obj_list\x18\x03\x20\x03(\x0b2\x17.DirBodyConte\
    nt.ObjItemR\x07objList\x1a6\n\x07ObjItem\x12\x15\n\x06obj_id\x18\x01\x20\
    \x01(\x0cR\x05objId\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05value\"\
    \x1e\n\x04Type\x12\t\n\x05Chunk\x10\0\x12\x0b\n\x07ObjList\x10\x01B\x0b\
    \n\t_chunk_id\"\x91\x02\n\tChunkList\x12#\n\x04type\x18\x01\x20\x01(\x0e\
    2\x0f.ChunkList.TypeR\x04type\x12\"\n\rchunk_id_list\x18\x02\x20\x03(\
    \x0cR\x0bchunkIdList\x12\x17\n\x07file_id\x18\x03\x20\x01(\x0cR\x06fileI\
    d\x12;\n\x0bhash_method\x18\x04\x20\x01(\x0e2\x15.ChunkList.HashMethodH\
    \0R\nhashMethod\x88\x01\x01\";\n\x04Type\x12\x0f\n\x0bChunkInList\x10\0\
    \x12\x0f\n\x0bChunkInFile\x10\x01\x12\x11\n\rChunkInBundle\x10\x02\"\x18\
    \n\nHashMethod\x12\n\n\x06Serial\x10\0B\x0e\n\x0c_hash_method\"<\n\x0fFi\
    leBodyContent\x12)\n\nchunk_list\x18\x01\x20\x01(\x0b2\n.ChunkListR\tchu\
    nkList\"0\n\x08Director\x12\x0e\n\x02id\x18\x01\x20\x01(\x0cR\x02id\x12\
    \x14\n\x05right\x18\x02\x20\x01(\rR\x05right\"I\n\tOrgMember\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\x0cR\x02id\x12\x14\n\x05right\x18\x02\x20\x01(\r\
    R\x05right\x12\x16\n\x06shares\x18\x03\x20\x01(\x04R\x06shares\"\x82\x01\
    \n\x0eOrgBodyContent\x12$\n\x07members\x18\x01\x20\x03(\x0b2\n.OrgMember\
    R\x07members\x12'\n\tdirectors\x18\x02\x20\x03(\x0b2\t.DirectorR\tdirect\
    ors\x12!\n\x0ctotal_equity\x18\x03\x20\x01(\x04R\x0btotalEquity\"\xad\
    \x01\n\x11PeopleBodyContent\x12\x19\n\x08ood_list\x18\x01\x20\x03(\x0cR\
    \x07oodList\x12\x17\n\x04name\x18\x02\x20\x01(\tH\0R\x04name\x88\x01\x01\
    \x12\x17\n\x04icon\x18\x03\x20\x01(\x0cH\x01R\x04icon\x88\x01\x01\x12'\n\
    \rood_work_mode\x18\x04\x20\x01(\tH\x02R\x0boodWorkMode\x88\x01\x01B\x07\
    \n\x05_nameB\x07\n\x05_iconB\x10\n\x0e_ood_work_mode\"\x88\x01\n\x16Simp\
    leGroupBodyContent\x12\x18\n\x07members\x18\x01\x20\x03(\x0cR\x07members\
    \x12\x19\n\x08ood_list\x18\x02\x20\x03(\x0cR\x07oodList\x12'\n\rood_work\
    _mode\x18\x03\x20\x01(\tH\0R\x0boodWorkMode\x88\x01\x01B\x10\n\x0e_ood_w\
    ork_mode\"#\n\rTxBodyContent\x12\x12\n\x04data\x18\x01\x20\x01(\x0cR\x04\
    data\"\x1f\n\tProofData\x12\x12\n\x04data\x18\x01\x20\x01(\x0cR\x04data\
    \";\n\x19ProofOfServiceBodyContent\x12\x1e\n\x04data\x18\x01\x20\x01(\
    \x0b2\n.ProofDataR\x04datab\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
