{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2","program":"C:\\Users\\bucky\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","aead","--edition=2018","C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","-C","metadata=4305daaea3d4f365","-C","extra-filename=-4305daaea3d4f365","--out-dir","e:\\git_test\\cyfs-test-lab\\src\\cyfs-stack-test-rust\\unittest_NON_nameobject\\target\\rls\\debug\\deps","-L","dependency=e:\\git_test\\cyfs-test-lab\\src\\cyfs-stack-test-rust\\unittest_NON_nameobject\\target\\rls\\debug\\deps","--extern","generic_array=e:\\git_test\\cyfs-test-lab\\src\\cyfs-stack-test-rust\\unittest_NON_nameobject\\target\\rls\\debug\\deps\\libgeneric_array-15e005804be76612.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\bucky\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"e:\\git_test\\cyfs-test-lab\\src\\cyfs-stack-test-rust\\unittest_NON_nameobject\\target\\rls\\debug\\deps\\libaead-4305daaea3d4f365.rmeta"},"prelude":{"crate_id":{"name":"aead","disambiguator":[10047485305455841838,0]},"crate_root":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src","external_crates":[{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","num":5,"id":{"name":"generic_array","disambiguator":[12382488001316959323,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","num":6,"id":{"name":"typenum","disambiguator":[5371539035448183228,0]}}],"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":0,"byte_end":18794,"line_start":1,"line_end":544,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":5,"index":0},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":1268,"byte_end":1281,"line_start":32,"line_end":32,"column_start":9,"column_end":22},"alias_span":null,"name":"generic_array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":6,"index":2827},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":1299,"byte_end":1305,"line_start":32,"line_end":32,"column_start":40,"column_end":46},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":0,"byte_end":18794,"line_start":1,"line_end":544,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":40},{"krate":0,"index":52},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":73},{"krate":0,"index":83},{"krate":0,"index":96},{"krate":0,"index":109},{"krate":0,"index":120},{"krate":0,"index":125},{"krate":0,"index":129},{"krate":0,"index":134}],"decl_id":null,"docs":" [Authenticated Encryption with Associated Data] (AEAD) traits","sig":null,"attributes":[{"value":"/ [Authenticated Encryption with Associated Data] (AEAD) traits","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":0,"byte_end":65,"line_start":1,"line_end":1,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":66,"byte_end":69,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides an abstract interface for AEAD ciphers, which guarantee","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":70,"byte_end":149,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ both confidentiality and integrity, even from a powerful attacker who is","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":150,"byte_end":226,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"/ able to execute [chosen-ciphertext attacks]. The resulting security property,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":227,"byte_end":308,"line_start":5,"line_end":5,"column_start":1,"column_end":82}},{"value":"/ [ciphertext indistinguishability], is considered a basic requirement for","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":309,"byte_end":385,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ modern cryptographic implementations.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":386,"byte_end":427,"line_start":7,"line_end":7,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":428,"byte_end":431,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [RustCrypto/AEADs] for cipher implementations which use this trait.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":432,"byte_end":507,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":508,"byte_end":511,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [Authenticated Encryption with Associated Data]: https://en.wikipedia.org/wiki/Authenticated_encryption","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":512,"byte_end":619,"line_start":11,"line_end":11,"column_start":1,"column_end":108}},{"value":"/ [chosen-ciphertext attacks]: https://en.wikipedia.org/wiki/Chosen-ciphertext_attack","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":620,"byte_end":707,"line_start":12,"line_end":12,"column_start":1,"column_end":88}},{"value":"/ [ciphertext indistinguishability]: https://en.wikipedia.org/wiki/Ciphertext_indistinguishability","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":708,"byte_end":808,"line_start":13,"line_end":13,"column_start":1,"column_end":101}},{"value":"/ [RustCrypto/AEADs]: https://github.com/RustCrypto/AEADs","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":809,"byte_end":868,"line_start":14,"line_end":14,"column_start":1,"column_end":60}},{"value":"no_std","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":870,"byte_end":880,"line_start":16,"line_end":16,"column_start":1,"column_end":11}},{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":920,"byte_end":943,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"warn(missing_docs, rust_2018_idioms)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":1043,"byte_end":1083,"line_start":20,"line_end":20,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":1694,"byte_end":1699,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"Error","qualname":"::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error type.","sig":null,"attributes":[{"value":"/ Error type.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":1488,"byte_end":1503,"line_start":43,"line_end":43,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":1504,"byte_end":1507,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This type is deliberately opaque as to avoid potential side-channel","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":1508,"byte_end":1579,"line_start":45,"line_end":45,"column_start":1,"column_end":72}},{"value":"/ leakage (e.g. padding oracle).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":1580,"byte_end":1614,"line_start":46,"line_end":46,"column_start":1,"column_end":35}}]},{"kind":"Type","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":2004,"byte_end":2007,"line_start":61,"line_end":61,"column_start":10,"column_end":13},"name":"Key","qualname":"::Key","value":"GenericArray<u8, <A as NewAead>::KeySize>","parent":null,"children":[],"decl_id":null,"docs":" Key for a [`NewAead`] algorithm\n","sig":null,"attributes":[{"value":"/ Key for a [`NewAead`] algorithm","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":1900,"byte_end":1935,"line_start":59,"line_end":59,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":2130,"byte_end":2135,"line_start":64,"line_end":64,"column_start":10,"column_end":15},"name":"Nonce","qualname":"::Nonce","value":"GenericArray<u8, NonceSize>","parent":null,"children":[],"decl_id":null,"docs":" Nonce: single-use value for ensuring ciphertexts are unique\n","sig":null,"attributes":[{"value":"/ Nonce: single-use value for ensuring ciphertexts are unique","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":2057,"byte_end":2120,"line_start":63,"line_end":63,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":2257,"byte_end":2260,"line_start":67,"line_end":67,"column_start":10,"column_end":13},"name":"Tag","qualname":"::Tag","value":"GenericArray<u8, TagSize>","parent":null,"children":[],"decl_id":null,"docs":" Tag: authentication code which ensures ciphertexts are authentic\n","sig":null,"attributes":[{"value":"/ Tag: authentication code which ensures ciphertexts are authentic","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":2179,"byte_end":2247,"line_start":66,"line_end":66,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":2389,"byte_end":2396,"line_start":70,"line_end":70,"column_start":11,"column_end":18},"name":"NewAead","qualname":"::NewAead","value":"NewAead","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39}],"decl_id":null,"docs":" Instantiate either a stateless [`Aead`] or stateful [`AeadMut`] algorithm.\n","sig":null,"attributes":[{"value":"/ Instantiate either a stateless [`Aead`] or stateful [`AeadMut`] algorithm.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":2300,"byte_end":2378,"line_start":69,"line_end":69,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":2470,"byte_end":2477,"line_start":72,"line_end":72,"column_start":10,"column_end":17},"name":"KeySize","qualname":"::NewAead::KeySize","value":"type KeySize: ArrayLength<u8>;","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" The size of the key array required by this algorithm.\n","sig":null,"attributes":[{"value":"/ The size of the key array required by this algorithm.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":2403,"byte_end":2460,"line_start":71,"line_end":71,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":2559,"byte_end":2562,"line_start":75,"line_end":75,"column_start":8,"column_end":11},"name":"new","qualname":"::NewAead::new","value":"pub fn new(&Key<Self>) -> Self","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Create a new AEAD instance with the given key.\n","sig":null,"attributes":[{"value":"/ Create a new AEAD instance with the given key.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":2501,"byte_end":2551,"line_start":74,"line_end":74,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":2752,"byte_end":2762,"line_start":80,"line_end":80,"column_start":8,"column_end":18},"name":"new_varkey","qualname":"::NewAead::new_varkey","value":"pub fn new_varkey(&[u8]) -> Result<Self, Error> where Self: Sized","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Create new AEAD instance from key with variable size.","sig":null,"attributes":[{"value":"/ Create new AEAD instance from key with variable size.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":2594,"byte_end":2651,"line_start":77,"line_end":77,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":2656,"byte_end":2659,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Default implementation will accept only keys with length equal to `KeySize`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":2664,"byte_end":2744,"line_start":79,"line_end":79,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3284,"byte_end":3288,"line_start":98,"line_end":98,"column_start":11,"column_end":15},"name":"Aead","qualname":"::Aead","value":"Aead","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":48}],"decl_id":null,"docs":" Authenticated Encryption with Associated Data (AEAD) algorithm.","sig":null,"attributes":[{"value":"/ Authenticated Encryption with Associated Data (AEAD) algorithm.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3003,"byte_end":3070,"line_start":92,"line_end":92,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3071,"byte_end":3074,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ This trait is intended for use with stateless AEAD algorithms. The","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3075,"byte_end":3145,"line_start":94,"line_end":94,"column_start":1,"column_end":71}},{"value":"/ [`AeadMut`] trait provides a stateful interface.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3146,"byte_end":3198,"line_start":95,"line_end":95,"column_start":1,"column_end":53}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3199,"byte_end":3224,"line_start":96,"line_end":96,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3331,"byte_end":3340,"line_start":100,"line_end":100,"column_start":10,"column_end":19},"name":"NonceSize","qualname":"::Aead::NonceSize","value":"type NonceSize: ArrayLength<u8>;","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" The length of a nonce.\n","sig":null,"attributes":[{"value":"/ The length of a nonce.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3295,"byte_end":3321,"line_start":99,"line_end":99,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3410,"byte_end":3417,"line_start":103,"line_end":103,"column_start":10,"column_end":17},"name":"TagSize","qualname":"::Aead::TagSize","value":"type TagSize: ArrayLength<u8>;","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" The maximum length of the nonce.\n","sig":null,"attributes":[{"value":"/ The maximum length of the nonce.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3364,"byte_end":3400,"line_start":102,"line_end":102,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3555,"byte_end":3573,"line_start":107,"line_end":107,"column_start":10,"column_end":28},"name":"CiphertextOverhead","qualname":"::Aead::CiphertextOverhead","value":"type CiphertextOverhead: ArrayLength<u8> + Unsigned;","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" The upper bound amount of additional space required to support a\n ciphertext vs. a plaintext.\n","sig":null,"attributes":[{"value":"/ The upper bound amount of additional space required to support a","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3441,"byte_end":3509,"line_start":105,"line_end":105,"column_start":5,"column_end":73}},{"value":"/ ciphertext vs. a plaintext.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3514,"byte_end":3545,"line_start":106,"line_end":106,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4797,"byte_end":4804,"line_start":132,"line_end":132,"column_start":8,"column_end":15},"name":"encrypt","qualname":"::Aead::encrypt","value":"pub fn encrypt<'msg, 'aad,\nimpl Into<Payload<'msg, 'aad>>: Into<Payload>>(&Self, &Nonce<Self::NonceSize>,\nimpl Into<Payload<'msg, 'aad>>) -> Result<Vec<u8>, Error>","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" Encrypt the given plaintext payload, and return the resulting\n ciphertext as a vector of bytes.","sig":null,"attributes":[{"value":"/ Encrypt the given plaintext payload, and return the resulting","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3608,"byte_end":3673,"line_start":109,"line_end":109,"column_start":5,"column_end":70}},{"value":"/ ciphertext as a vector of bytes.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3678,"byte_end":3714,"line_start":110,"line_end":110,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3719,"byte_end":3722,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ The [`Payload`] type can be used to provide Additional Associated Data","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3727,"byte_end":3801,"line_start":112,"line_end":112,"column_start":5,"column_end":79}},{"value":"/ (AAD) along with the message: this is an optional bytestring which is","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3806,"byte_end":3879,"line_start":113,"line_end":113,"column_start":5,"column_end":78}},{"value":"/ not encrypted, but *is* authenticated along with the message. Failure","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3884,"byte_end":3957,"line_start":114,"line_end":114,"column_start":5,"column_end":78}},{"value":"/ to pass the same AAD that was used during encryption will cause","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":3962,"byte_end":4029,"line_start":115,"line_end":115,"column_start":5,"column_end":72}},{"value":"/ decryption to fail, which is useful if you would like to \"bind\" the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4034,"byte_end":4105,"line_start":116,"line_end":116,"column_start":5,"column_end":76}},{"value":"/ ciphertext to some other identifier, like a digital signature key","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4110,"byte_end":4179,"line_start":117,"line_end":117,"column_start":5,"column_end":74}},{"value":"/ or other identifier.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4184,"byte_end":4208,"line_start":118,"line_end":118,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4213,"byte_end":4216,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ If you don't care about AAD and just want to encrypt a plaintext","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4221,"byte_end":4289,"line_start":120,"line_end":120,"column_start":5,"column_end":73}},{"value":"/ message, `&[u8]` will automatically be coerced into a `Payload`:","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4294,"byte_end":4362,"line_start":121,"line_end":121,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4367,"byte_end":4370,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```nobuild","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4375,"byte_end":4389,"line_start":123,"line_end":123,"column_start":5,"column_end":19}},{"value":"/ let plaintext = b\"Top secret message, handle with care\";","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4394,"byte_end":4454,"line_start":124,"line_end":124,"column_start":5,"column_end":65}},{"value":"/ let ciphertext = cipher.encrypt(nonce, plaintext);","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4459,"byte_end":4513,"line_start":125,"line_end":125,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4518,"byte_end":4525,"line_start":126,"line_end":126,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4530,"byte_end":4533,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ The default implementation assumes a postfix tag (ala AES-GCM,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4538,"byte_end":4604,"line_start":128,"line_end":128,"column_start":5,"column_end":71}},{"value":"/ AES-GCM-SIV, ChaCha20Poly1305). [`Aead`] implementations which do not","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4609,"byte_end":4682,"line_start":129,"line_end":129,"column_start":5,"column_end":78}},{"value":"/ use a postfix tag will need to override this to correctly assemble the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4687,"byte_end":4761,"line_start":130,"line_end":130,"column_start":5,"column_end":79}},{"value":"/ ciphertext message.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4766,"byte_end":4789,"line_start":131,"line_end":131,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5661,"byte_end":5668,"line_start":155,"line_end":155,"column_start":8,"column_end":15},"name":"decrypt","qualname":"::Aead::decrypt","value":"pub fn decrypt<'msg, 'aad,\nimpl Into<Payload<'msg, 'aad>>: Into<Payload>>(&Self, &Nonce<Self::NonceSize>,\nimpl Into<Payload<'msg, 'aad>>) -> Result<Vec<u8>, Error>","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" Decrypt the given ciphertext slice, and return the resulting plaintext\n as a vector of bytes.","sig":null,"attributes":[{"value":"/ Decrypt the given ciphertext slice, and return the resulting plaintext","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":4962,"byte_end":5036,"line_start":138,"line_end":138,"column_start":5,"column_end":79}},{"value":"/ as a vector of bytes.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5041,"byte_end":5066,"line_start":139,"line_end":139,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5071,"byte_end":5074,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ See notes on [`Aead::encrypt()`] about allowable message payloads and","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5079,"byte_end":5152,"line_start":141,"line_end":141,"column_start":5,"column_end":78}},{"value":"/ Associated Additional Data (AAD).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5157,"byte_end":5194,"line_start":142,"line_end":142,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5199,"byte_end":5202,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ If you have no AAD, you can call this as follows:","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5207,"byte_end":5260,"line_start":144,"line_end":144,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5265,"byte_end":5268,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ ```nobuild","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5273,"byte_end":5287,"line_start":146,"line_end":146,"column_start":5,"column_end":19}},{"value":"/ let ciphertext = b\"...\";","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5292,"byte_end":5320,"line_start":147,"line_end":147,"column_start":5,"column_end":33}},{"value":"/ let plaintext = cipher.decrypt(nonce, ciphertext)?;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5325,"byte_end":5380,"line_start":148,"line_end":148,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5385,"byte_end":5392,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5397,"byte_end":5400,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ The default implementation assumes a postfix tag (ala AES-GCM,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5405,"byte_end":5471,"line_start":151,"line_end":151,"column_start":5,"column_end":71}},{"value":"/ AES-GCM-SIV, ChaCha20Poly1305). [`Aead`] implementations which do not","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5476,"byte_end":5549,"line_start":152,"line_end":152,"column_start":5,"column_end":78}},{"value":"/ use a postfix tag will need to override this to correctly parse the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5554,"byte_end":5625,"line_start":153,"line_end":153,"column_start":5,"column_end":76}},{"value":"/ ciphertext message.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5630,"byte_end":5653,"line_start":154,"line_end":154,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5980,"byte_end":5987,"line_start":165,"line_end":165,"column_start":11,"column_end":18},"name":"AeadMut","qualname":"::AeadMut","value":"AeadMut","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":60}],"decl_id":null,"docs":" Stateful Authenticated Encryption with Associated Data algorithm.\n","sig":null,"attributes":[{"value":"/ Stateful Authenticated Encryption with Associated Data algorithm.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5825,"byte_end":5894,"line_start":162,"line_end":162,"column_start":1,"column_end":70}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5895,"byte_end":5920,"line_start":163,"line_end":163,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6030,"byte_end":6039,"line_start":167,"line_end":167,"column_start":10,"column_end":19},"name":"NonceSize","qualname":"::AeadMut::NonceSize","value":"type NonceSize: ArrayLength<u8>;","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" The length of a nonce.\n","sig":null,"attributes":[{"value":"/ The length of a nonce.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":5994,"byte_end":6020,"line_start":166,"line_end":166,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6109,"byte_end":6116,"line_start":170,"line_end":170,"column_start":10,"column_end":17},"name":"TagSize","qualname":"::AeadMut::TagSize","value":"type TagSize: ArrayLength<u8>;","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" The maximum length of the nonce.\n","sig":null,"attributes":[{"value":"/ The maximum length of the nonce.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6063,"byte_end":6099,"line_start":169,"line_end":169,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6254,"byte_end":6272,"line_start":174,"line_end":174,"column_start":10,"column_end":28},"name":"CiphertextOverhead","qualname":"::AeadMut::CiphertextOverhead","value":"type CiphertextOverhead: ArrayLength<u8> + Unsigned;","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" The upper bound amount of additional space required to support a\n ciphertext vs. a plaintext.\n","sig":null,"attributes":[{"value":"/ The upper bound amount of additional space required to support a","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6140,"byte_end":6208,"line_start":172,"line_end":172,"column_start":5,"column_end":73}},{"value":"/ ciphertext vs. a plaintext.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6213,"byte_end":6244,"line_start":173,"line_end":173,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6547,"byte_end":6554,"line_start":181,"line_end":181,"column_start":8,"column_end":15},"name":"encrypt","qualname":"::AeadMut::encrypt","value":"pub fn encrypt<'msg, 'aad,\nimpl Into<Payload<'msg, 'aad>>: Into<Payload>>(&mut Self,\n&Nonce<Self::NonceSize>, impl Into<Payload<'msg, 'aad>>)\n-> Result<Vec<u8>, Error>","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" Encrypt the given plaintext slice, and return the resulting ciphertext\n as a vector of bytes.","sig":null,"attributes":[{"value":"/ Encrypt the given plaintext slice, and return the resulting ciphertext","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6307,"byte_end":6381,"line_start":176,"line_end":176,"column_start":5,"column_end":79}},{"value":"/ as a vector of bytes.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6386,"byte_end":6411,"line_start":177,"line_end":177,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6416,"byte_end":6419,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ See notes on [`Aead::encrypt()`] about allowable message payloads and","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6424,"byte_end":6497,"line_start":179,"line_end":179,"column_start":5,"column_end":78}},{"value":"/ Associated Additional Data (AAD).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6502,"byte_end":6539,"line_start":180,"line_end":180,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6980,"byte_end":6987,"line_start":192,"line_end":192,"column_start":8,"column_end":15},"name":"decrypt","qualname":"::AeadMut::decrypt","value":"pub fn decrypt<'msg, 'aad,\nimpl Into<Payload<'msg, 'aad>>: Into<Payload>>(&mut Self,\n&Nonce<Self::NonceSize>, impl Into<Payload<'msg, 'aad>>)\n-> Result<Vec<u8>, Error>","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" Decrypt the given ciphertext slice, and return the resulting plaintext\n as a vector of bytes.","sig":null,"attributes":[{"value":"/ Decrypt the given ciphertext slice, and return the resulting plaintext","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6716,"byte_end":6790,"line_start":187,"line_end":187,"column_start":5,"column_end":79}},{"value":"/ as a vector of bytes.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6795,"byte_end":6820,"line_start":188,"line_end":188,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6825,"byte_end":6828,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ See notes on [`Aead::encrypt()`] and [`Aead::decrypt()`] about allowable","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6833,"byte_end":6909,"line_start":190,"line_end":190,"column_start":5,"column_end":81}},{"value":"/ message payloads and Associated Additional Data (AAD).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":6914,"byte_end":6972,"line_start":191,"line_end":191,"column_start":5,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8048,"byte_end":8059,"line_start":221,"line_end":221,"column_start":11,"column_end":22},"name":"AeadInPlace","qualname":"::AeadInPlace","value":"AeadInPlace","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72}],"decl_id":null,"docs":" In-place stateless AEAD trait.","sig":null,"attributes":[{"value":"/ In-place stateless AEAD trait.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":7919,"byte_end":7953,"line_start":218,"line_end":218,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":7954,"byte_end":7957,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ This trait is both object safe and has no dependencies on `alloc` or `std`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":7958,"byte_end":8037,"line_start":220,"line_end":220,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8102,"byte_end":8111,"line_start":223,"line_end":223,"column_start":10,"column_end":19},"name":"NonceSize","qualname":"::AeadInPlace::NonceSize","value":"type NonceSize: ArrayLength<u8>;","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" The length of a nonce.\n","sig":null,"attributes":[{"value":"/ The length of a nonce.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8066,"byte_end":8092,"line_start":222,"line_end":222,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8181,"byte_end":8188,"line_start":226,"line_end":226,"column_start":10,"column_end":17},"name":"TagSize","qualname":"::AeadInPlace::TagSize","value":"type TagSize: ArrayLength<u8>;","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" The maximum length of the nonce.\n","sig":null,"attributes":[{"value":"/ The maximum length of the nonce.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8135,"byte_end":8171,"line_start":225,"line_end":225,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8326,"byte_end":8344,"line_start":230,"line_end":230,"column_start":10,"column_end":28},"name":"CiphertextOverhead","qualname":"::AeadInPlace::CiphertextOverhead","value":"type CiphertextOverhead: ArrayLength<u8> + Unsigned;","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" The upper bound amount of additional space required to support a\n ciphertext vs. a plaintext.\n","sig":null,"attributes":[{"value":"/ The upper bound amount of additional space required to support a","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8212,"byte_end":8280,"line_start":228,"line_end":228,"column_start":5,"column_end":73}},{"value":"/ ciphertext vs. a plaintext.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8285,"byte_end":8316,"line_start":229,"line_end":229,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8852,"byte_end":8868,"line_start":241,"line_end":241,"column_start":8,"column_end":24},"name":"encrypt_in_place","qualname":"::AeadInPlace::encrypt_in_place","value":"pub fn encrypt_in_place(&Self, &Nonce<Self::NonceSize>, &[u8],\n&mut dyn Buffer) -> Result<(), Error>","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" Encrypt the given buffer containing a plaintext message in-place.","sig":null,"attributes":[{"value":"/ Encrypt the given buffer containing a plaintext message in-place.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8379,"byte_end":8448,"line_start":232,"line_end":232,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8453,"byte_end":8456,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ The buffer must have sufficient capacity to store the ciphertext","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8461,"byte_end":8529,"line_start":234,"line_end":234,"column_start":5,"column_end":73}},{"value":"/ message, which will always be larger than the original plaintext.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8534,"byte_end":8603,"line_start":235,"line_end":235,"column_start":5,"column_end":74}},{"value":"/ The exact size needed is cipher-dependent, but generally includes","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8608,"byte_end":8677,"line_start":236,"line_end":236,"column_start":5,"column_end":74}},{"value":"/ the size of an authentication tag.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8682,"byte_end":8720,"line_start":237,"line_end":237,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8725,"byte_end":8728,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the buffer has insufficient capacity to store the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8733,"byte_end":8806,"line_start":239,"line_end":239,"column_start":5,"column_end":78}},{"value":"/ resulting ciphertext message.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":8811,"byte_end":8844,"line_start":240,"line_end":240,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":9259,"byte_end":9284,"line_start":253,"line_end":253,"column_start":8,"column_end":33},"name":"encrypt_in_place_detached","qualname":"::AeadInPlace::encrypt_in_place_detached","value":"pub fn encrypt_in_place_detached(&Self, &Nonce<Self::NonceSize>, &[u8],\n&mut [u8]) -> Result<Tag<Self::TagSize>, Error>","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" Encrypt the data in-place, returning the authentication tag\n","sig":null,"attributes":[{"value":"/ Encrypt the data in-place, returning the authentication tag","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":9188,"byte_end":9251,"line_start":252,"line_end":252,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":9714,"byte_end":9730,"line_start":265,"line_end":265,"column_start":8,"column_end":24},"name":"decrypt_in_place","qualname":"::AeadInPlace::decrypt_in_place","value":"pub fn decrypt_in_place(&Self, &Nonce<Self::NonceSize>, &[u8],\n&mut dyn Buffer) -> Result<(), Error>","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" Decrypt the message in-place, returning an error in the event the\n provided authentication tag does not match the given ciphertext.","sig":null,"attributes":[{"value":"/ Decrypt the message in-place, returning an error in the event the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":9449,"byte_end":9518,"line_start":260,"line_end":260,"column_start":5,"column_end":74}},{"value":"/ provided authentication tag does not match the given ciphertext.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":9523,"byte_end":9591,"line_start":261,"line_end":261,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":9596,"byte_end":9599,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ The buffer will be truncated to the length of the original plaintext","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":9604,"byte_end":9676,"line_start":263,"line_end":263,"column_start":5,"column_end":77}},{"value":"/ message upon success.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":9681,"byte_end":9706,"line_start":264,"line_end":264,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10160,"byte_end":10185,"line_start":277,"line_end":277,"column_start":8,"column_end":33},"name":"decrypt_in_place_detached","qualname":"::AeadInPlace::decrypt_in_place_detached","value":"pub fn decrypt_in_place_detached(&Self, &Nonce<Self::NonceSize>, &[u8],\n&mut [u8], &Tag<Self::TagSize>) -> Result<(), Error>","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" Decrypt the message in-place, returning an error in the event the provided\n authentication tag does not match the given ciphertext (i.e. ciphertext\n is modified/unauthentic)\n","sig":null,"attributes":[{"value":"/ Decrypt the message in-place, returning an error in the event the provided","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":9961,"byte_end":10039,"line_start":274,"line_end":274,"column_start":5,"column_end":83}},{"value":"/ authentication tag does not match the given ciphertext (i.e. ciphertext","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10044,"byte_end":10119,"line_start":275,"line_end":275,"column_start":5,"column_end":80}},{"value":"/ is modified/unauthentic)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10124,"byte_end":10152,"line_start":276,"line_end":276,"column_start":5,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10494,"byte_end":10508,"line_start":289,"line_end":289,"column_start":11,"column_end":25},"name":"AeadMutInPlace","qualname":"::AeadMutInPlace","value":"AeadMutInPlace","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":82}],"decl_id":null,"docs":" In-place stateful AEAD trait.","sig":null,"attributes":[{"value":"/ In-place stateful AEAD trait.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10366,"byte_end":10399,"line_start":286,"line_end":286,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10400,"byte_end":10403,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ This trait is both object safe and has no dependencies on `alloc` or `std`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10404,"byte_end":10483,"line_start":288,"line_end":288,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10551,"byte_end":10560,"line_start":291,"line_end":291,"column_start":10,"column_end":19},"name":"NonceSize","qualname":"::AeadMutInPlace::NonceSize","value":"type NonceSize: ArrayLength<u8>;","parent":{"krate":0,"index":73},"children":[],"decl_id":null,"docs":" The length of a nonce.\n","sig":null,"attributes":[{"value":"/ The length of a nonce.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10515,"byte_end":10541,"line_start":290,"line_end":290,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10630,"byte_end":10637,"line_start":294,"line_end":294,"column_start":10,"column_end":17},"name":"TagSize","qualname":"::AeadMutInPlace::TagSize","value":"type TagSize: ArrayLength<u8>;","parent":{"krate":0,"index":73},"children":[],"decl_id":null,"docs":" The maximum length of the nonce.\n","sig":null,"attributes":[{"value":"/ The maximum length of the nonce.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10584,"byte_end":10620,"line_start":293,"line_end":293,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10775,"byte_end":10793,"line_start":298,"line_end":298,"column_start":10,"column_end":28},"name":"CiphertextOverhead","qualname":"::AeadMutInPlace::CiphertextOverhead","value":"type CiphertextOverhead: ArrayLength<u8> + Unsigned;","parent":{"krate":0,"index":73},"children":[],"decl_id":null,"docs":" The upper bound amount of additional space required to support a\n ciphertext vs. a plaintext.\n","sig":null,"attributes":[{"value":"/ The upper bound amount of additional space required to support a","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10661,"byte_end":10729,"line_start":296,"line_end":296,"column_start":5,"column_end":73}},{"value":"/ ciphertext vs. a plaintext.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10734,"byte_end":10765,"line_start":297,"line_end":297,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":11301,"byte_end":11317,"line_start":309,"line_end":309,"column_start":8,"column_end":24},"name":"encrypt_in_place","qualname":"::AeadMutInPlace::encrypt_in_place","value":"pub fn encrypt_in_place<impl Buffer: Buffer>(&mut Self,\n&Nonce<Self::NonceSize>, &[u8], &mut impl Buffer) -> Result<(), Error>","parent":{"krate":0,"index":73},"children":[],"decl_id":null,"docs":" Encrypt the given buffer containing a plaintext message in-place.","sig":null,"attributes":[{"value":"/ Encrypt the given buffer containing a plaintext message in-place.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10828,"byte_end":10897,"line_start":300,"line_end":300,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10902,"byte_end":10905,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ The buffer must have sufficient capacity to store the ciphertext","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10910,"byte_end":10978,"line_start":302,"line_end":302,"column_start":5,"column_end":73}},{"value":"/ message, which will always be larger than the original plaintext.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":10983,"byte_end":11052,"line_start":303,"line_end":303,"column_start":5,"column_end":74}},{"value":"/ The exact size needed is cipher-dependent, but generally includes","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":11057,"byte_end":11126,"line_start":304,"line_end":304,"column_start":5,"column_end":74}},{"value":"/ the size of an authentication tag.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":11131,"byte_end":11169,"line_start":305,"line_end":305,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":11174,"byte_end":11177,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the buffer has insufficient capacity to store the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":11182,"byte_end":11255,"line_start":307,"line_end":307,"column_start":5,"column_end":78}},{"value":"/ resulting ciphertext message.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":11260,"byte_end":11293,"line_start":308,"line_end":308,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":11713,"byte_end":11738,"line_start":321,"line_end":321,"column_start":8,"column_end":33},"name":"encrypt_in_place_detached","qualname":"::AeadMutInPlace::encrypt_in_place_detached","value":"pub fn encrypt_in_place_detached(&mut Self, &Nonce<Self::NonceSize>, &[u8],\n&mut [u8]) -> Result<Tag<Self::TagSize>, Error>","parent":{"krate":0,"index":73},"children":[],"decl_id":null,"docs":" Encrypt the data in-place, returning the authentication tag\n","sig":null,"attributes":[{"value":"/ Encrypt the data in-place, returning the authentication tag","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":11642,"byte_end":11705,"line_start":320,"line_end":320,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":12172,"byte_end":12188,"line_start":333,"line_end":333,"column_start":8,"column_end":24},"name":"decrypt_in_place","qualname":"::AeadMutInPlace::decrypt_in_place","value":"pub fn decrypt_in_place<impl Buffer: Buffer>(&mut Self,\n&Nonce<Self::NonceSize>, &[u8], &mut impl Buffer) -> Result<(), Error>","parent":{"krate":0,"index":73},"children":[],"decl_id":null,"docs":" Decrypt the message in-place, returning an error in the event the\n provided authentication tag does not match the given ciphertext.","sig":null,"attributes":[{"value":"/ Decrypt the message in-place, returning an error in the event the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":11907,"byte_end":11976,"line_start":328,"line_end":328,"column_start":5,"column_end":74}},{"value":"/ provided authentication tag does not match the given ciphertext.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":11981,"byte_end":12049,"line_start":329,"line_end":329,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":12054,"byte_end":12057,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ The buffer will be truncated to the length of the original plaintext","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":12062,"byte_end":12134,"line_start":331,"line_end":331,"column_start":5,"column_end":77}},{"value":"/ message upon success.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":12139,"byte_end":12164,"line_start":332,"line_end":332,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":12620,"byte_end":12645,"line_start":345,"line_end":345,"column_start":8,"column_end":33},"name":"decrypt_in_place_detached","qualname":"::AeadMutInPlace::decrypt_in_place_detached","value":"pub fn decrypt_in_place_detached(&mut Self, &Nonce<Self::NonceSize>, &[u8],\n&mut [u8], &Tag<Self::TagSize>) -> Result<(), Error>","parent":{"krate":0,"index":73},"children":[],"decl_id":null,"docs":" Decrypt the data in-place, returning an error in the event the provided\n authentication tag does not match the given ciphertext (i.e. ciphertext\n is modified/unauthentic)\n","sig":null,"attributes":[{"value":"/ Decrypt the data in-place, returning an error in the event the provided","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":12424,"byte_end":12499,"line_start":342,"line_end":342,"column_start":5,"column_end":80}},{"value":"/ authentication tag does not match the given ciphertext (i.e. ciphertext","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":12504,"byte_end":12579,"line_start":343,"line_end":343,"column_start":5,"column_end":80}},{"value":"/ is modified/unauthentic)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":12584,"byte_end":12612,"line_start":344,"line_end":344,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":16565,"byte_end":16572,"line_start":465,"line_end":465,"column_start":12,"column_end":19},"name":"Payload","qualname":"::Payload","value":"Payload { msg, aad }","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124}],"decl_id":null,"docs":" AEAD payloads are a combination of a message (plaintext or ciphertext)\n and \"additional associated data\" (AAD) to be authenticated (in cleartext)\n along with the message.","sig":null,"attributes":[{"value":"/ AEAD payloads are a combination of a message (plaintext or ciphertext)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":16145,"byte_end":16219,"line_start":457,"line_end":457,"column_start":1,"column_end":75}},{"value":"/ and \"additional associated data\" (AAD) to be authenticated (in cleartext)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":16220,"byte_end":16297,"line_start":458,"line_end":458,"column_start":1,"column_end":78}},{"value":"/ along with the message.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":16298,"byte_end":16325,"line_start":459,"line_end":459,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":16326,"byte_end":16329,"line_start":460,"line_end":460,"column_start":1,"column_end":4}},{"value":"/ If you don't care about AAD, you can pass a `&[u8]` as the payload to","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":16330,"byte_end":16403,"line_start":461,"line_end":461,"column_start":1,"column_end":74}},{"value":"/ `encrypt`/`decrypt` and it will automatically be coerced to this type.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":16404,"byte_end":16478,"line_start":462,"line_end":462,"column_start":1,"column_end":75}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":16479,"byte_end":16504,"line_start":463,"line_end":463,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":16637,"byte_end":16640,"line_start":467,"line_end":467,"column_start":9,"column_end":12},"name":"msg","qualname":"::Payload::msg","value":"&'msg [u8]","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Message to be encrypted/decrypted\n","sig":null,"attributes":[{"value":"/ Message to be encrypted/decrypted","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":16591,"byte_end":16628,"line_start":466,"line_end":466,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":16926,"byte_end":16929,"line_start":473,"line_end":473,"column_start":9,"column_end":12},"name":"aad","qualname":"::Payload::aad","value":"&'aad [u8]","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Optional \"additional associated data\" to authenticate along with\n this message. If AAD is provided at the time the message is encrypted,\n the same AAD *MUST* be provided at the time the message is decrypted,\n or decryption will fail.\n","sig":null,"attributes":[{"value":"/ Optional \"additional associated data\" to authenticate along with","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":16659,"byte_end":16727,"line_start":469,"line_end":469,"column_start":5,"column_end":73}},{"value":"/ this message. If AAD is provided at the time the message is encrypted,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":16732,"byte_end":16806,"line_start":470,"line_end":470,"column_start":5,"column_end":79}},{"value":"/ the same AAD *MUST* be provided at the time the message is decrypted,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":16811,"byte_end":16884,"line_start":471,"line_end":471,"column_start":5,"column_end":78}},{"value":"/ or decryption will fail.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":16889,"byte_end":16917,"line_start":472,"line_end":472,"column_start":5,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17285,"byte_end":17291,"line_start":487,"line_end":487,"column_start":11,"column_end":17},"name":"Buffer","qualname":"::Buffer","value":"Buffer: AsRef<[u8]> + AsMut<[u8]>","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133}],"decl_id":null,"docs":" In-place encryption/decryption byte buffers.","sig":null,"attributes":[{"value":"/ In-place encryption/decryption byte buffers.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17111,"byte_end":17159,"line_start":483,"line_end":483,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17160,"byte_end":17163,"line_start":484,"line_end":484,"column_start":1,"column_end":4}},{"value":"/ This trait defines the set of methods needed to support in-place operations","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17164,"byte_end":17243,"line_start":485,"line_end":485,"column_start":1,"column_end":80}},{"value":"/ on a `Vec`-like data type.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17244,"byte_end":17274,"line_start":486,"line_end":486,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17365,"byte_end":17368,"line_start":489,"line_end":489,"column_start":8,"column_end":11},"name":"len","qualname":"::Buffer::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Get the length of the buffer\n","sig":null,"attributes":[{"value":"/ Get the length of the buffer","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17325,"byte_end":17357,"line_start":488,"line_end":488,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17458,"byte_end":17466,"line_start":494,"line_end":494,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::Buffer::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Is the buffer empty?\n","sig":null,"attributes":[{"value":"/ Is the buffer empty?","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17426,"byte_end":17450,"line_start":493,"line_end":493,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17579,"byte_end":17596,"line_start":499,"line_end":499,"column_start":8,"column_end":25},"name":"extend_from_slice","qualname":"::Buffer::extend_from_slice","value":"pub fn extend_from_slice(&mut Self, &[u8]) -> Result<(), Error>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Extend this buffer from the given slice\n","sig":null,"attributes":[{"value":"/ Extend this buffer from the given slice","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17528,"byte_end":17571,"line_start":498,"line_end":498,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17699,"byte_end":17707,"line_start":502,"line_end":502,"column_start":8,"column_end":16},"name":"truncate","qualname":"::Buffer::truncate","value":"pub fn truncate(&mut Self, usize)","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Truncate this buffer to the given size\n","sig":null,"attributes":[{"value":"/ Truncate this buffer to the given size","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17649,"byte_end":17691,"line_start":501,"line_end":501,"column_start":5,"column_end":47}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":1724,"byte_end":1729,"line_start":50,"line_end":50,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":12888,"byte_end":12891,"line_start":355,"line_end":355,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":13874,"byte_end":13877,"line_start":385,"line_end":385,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":14846,"byte_end":14849,"line_start":414,"line_end":414,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17010,"byte_end":17017,"line_start":477,"line_end":477,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17777,"byte_end":17780,"line_start":506,"line_end":506,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":1724,"byte_end":1729,"line_start":50,"line_end":50,"column_start":23,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":137},"to":{"krate":1,"index":9692}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":12888,"byte_end":12891,"line_start":355,"line_end":355,"column_start":33,"column_end":36},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":84},"to":{"krate":0,"index":40}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":13874,"byte_end":13877,"line_start":385,"line_end":385,"column_start":39,"column_end":42},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":97},"to":{"krate":0,"index":52}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":14846,"byte_end":14849,"line_start":414,"line_end":414,"column_start":43,"column_end":46},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":110},"to":{"krate":0,"index":73}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17010,"byte_end":17017,"line_start":477,"line_end":477,"column_start":39,"column_end":46},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":120},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17293,"byte_end":17298,"line_start":487,"line_end":487,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":2954},"to":{"krate":0,"index":129}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17307,"byte_end":17312,"line_start":487,"line_end":487,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":2957},"to":{"krate":0,"index":129}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.3.2\\src\\lib.rs","byte_start":17777,"byte_end":17780,"line_start":506,"line_end":506,"column_start":17,"column_end":20},"kind":{"Impl":{"id":5}},"from":{"krate":4,"index":7089},"to":{"krate":0,"index":129}}]}