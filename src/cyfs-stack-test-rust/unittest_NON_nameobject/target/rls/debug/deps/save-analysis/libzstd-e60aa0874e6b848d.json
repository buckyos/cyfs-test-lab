{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2","program":"C:\\Users\\bucky\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","zstd","--edition=2018","C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"arrays\"","--cfg","feature=\"default\"","--cfg","feature=\"legacy\"","-C","metadata=e60aa0874e6b848d","-C","extra-filename=-e60aa0874e6b848d","--out-dir","e:\\git_test\\cyfs-test-lab\\src\\cyfs-stack-test-rust\\unittest_NON_nameobject\\target\\rls\\debug\\deps","-L","dependency=e:\\git_test\\cyfs-test-lab\\src\\cyfs-stack-test-rust\\unittest_NON_nameobject\\target\\rls\\debug\\deps","--extern","zstd_safe=e:\\git_test\\cyfs-test-lab\\src\\cyfs-stack-test-rust\\unittest_NON_nameobject\\target\\rls\\debug\\deps\\libzstd_safe-77d2d222dbbe7601.rmeta","--cap-lints","allow","-L","native=e:\\git_test\\cyfs-test-lab\\src\\cyfs-stack-test-rust\\unittest_NON_nameobject\\target\\rls\\debug\\build\\zstd-sys-f8010d52876bd633\\out","--error-format=json","--sysroot","C:\\Users\\bucky\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"e:\\git_test\\cyfs-test-lab\\src\\cyfs-stack-test-rust\\unittest_NON_nameobject\\target\\rls\\debug\\deps\\libzstd-e60aa0874e6b848d.rmeta"},"prelude":{"crate_id":{"name":"zstd","disambiguator":[7713417626610227160,0]},"crate_root":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src","external_crates":[{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","num":16,"id":{"name":"zstd_safe","disambiguator":[8372934874562282112,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","num":17,"id":{"name":"zstd_sys","disambiguator":[18035920358363208242,0]}}],"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":0,"byte_end":2001,"line_start":1,"line_end":78,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":16,"index":0},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":703,"byte_end":712,"line_start":25,"line_end":25,"column_start":9,"column_end":18},"alias_span":null,"name":"zstd_safe","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2283,"byte_end":2293,"line_start":13,"line_end":13,"column_start":27,"column_end":37},"alias_span":null,"name":"Compressor","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":609},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2323,"byte_end":2335,"line_start":14,"line_end":14,"column_start":29,"column_end":41},"alias_span":null,"name":"Decompressor","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":16,"index":163},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":14144,"byte_end":14149,"line_start":23,"line_end":23,"column_start":21,"column_end":26},"alias_span":null,"name":"CDict","value":"","parent":{"krate":0,"index":77}},{"kind":"Use","ref_id":{"krate":16,"index":184},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":14151,"byte_end":14156,"line_start":23,"line_end":23,"column_start":28,"column_end":33},"alias_span":null,"name":"DDict","value":"","parent":{"krate":0,"index":77}},{"kind":"Use","ref_id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\mod.rs","byte_start":47027,"byte_end":47033,"line_start":6,"line_end":6,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":427},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\mod.rs","byte_start":47057,"byte_end":47063,"line_start":7,"line_end":7,"column_start":23,"column_end":29},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":16,"index":379},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63075,"byte_end":63085,"line_start":9,"line_end":9,"column_start":21,"column_end":31},"alias_span":null,"name":"CParameter","value":"","parent":{"krate":0,"index":464}},{"kind":"Use","ref_id":{"krate":16,"index":339},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63087,"byte_end":63097,"line_start":9,"line_end":9,"column_start":33,"column_end":43},"alias_span":null,"name":"DParameter","value":"","parent":{"krate":0,"index":464}},{"kind":"Use","ref_id":{"krate":16,"index":363},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63099,"byte_end":63107,"line_start":9,"line_end":9,"column_start":45,"column_end":53},"alias_span":null,"name":"InBuffer","value":"","parent":{"krate":0,"index":464}},{"kind":"Use","ref_id":{"krate":16,"index":370},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63109,"byte_end":63118,"line_start":9,"line_end":9,"column_start":55,"column_end":64},"alias_span":null,"name":"OutBuffer","value":"","parent":{"krate":0,"index":464}},{"kind":"Use","ref_id":{"krate":16,"index":210},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63120,"byte_end":63128,"line_start":9,"line_end":9,"column_start":66,"column_end":74},"alias_span":null,"name":"WriteBuf","value":"","parent":{"krate":0,"index":464}},{"kind":"Use","ref_id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":20020,"byte_end":20031,"line_start":20,"line_end":20,"column_start":27,"column_end":38},"alias_span":null,"name":"copy_decode","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":354},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":20033,"byte_end":20044,"line_start":20,"line_end":20,"column_start":40,"column_end":51},"alias_span":null,"name":"copy_encode","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":20046,"byte_end":20056,"line_start":20,"line_end":20,"column_start":53,"column_end":63},"alias_span":null,"name":"decode_all","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":20058,"byte_end":20068,"line_start":20,"line_end":20,"column_start":65,"column_end":75},"alias_span":null,"name":"encode_all","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":20091,"byte_end":20098,"line_start":21,"line_end":21,"column_start":21,"column_end":28},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":20122,"byte_end":20139,"line_start":22,"line_end":22,"column_start":23,"column_end":40},"alias_span":null,"name":"AutoFinishEncoder","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":20141,"byte_end":20148,"line_start":22,"line_end":22,"column_start":42,"column_end":49},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":16,"index":352},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":838,"byte_end":852,"line_start":36,"line_end":36,"column_start":20,"column_end":34},"alias_span":null,"name":"DEFAULT_COMPRESSION_LEVEL","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":1124,"byte_end":1134,"line_start":45,"line_end":45,"column_start":25,"column_end":35},"alias_span":null,"name":"decode_all","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":1136,"byte_end":1146,"line_start":45,"line_end":45,"column_start":37,"column_end":47},"alias_span":null,"name":"encode_all","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":1148,"byte_end":1155,"line_start":45,"line_end":45,"column_start":49,"column_end":56},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":1157,"byte_end":1164,"line_start":45,"line_end":45,"column_start":58,"column_end":65},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":0,"byte_end":2001,"line_start":1,"line_end":78,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":77},{"krate":0,"index":125},{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":591},{"krate":0,"index":594},{"krate":0,"index":597}],"decl_id":null,"docs":" Rust binding to the [zstd library][zstd].","sig":null,"attributes":[{"value":"/ Rust binding to the [zstd library][zstd].","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":0,"byte_end":45,"line_start":1,"line_end":1,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":46,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides:","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":50,"byte_end":74,"line_start":3,"line_end":3,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":75,"byte_end":78,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * An [encoder](stream/write/struct.Encoder.html) to compress data using zstd","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":79,"byte_end":159,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/   and send the output to another write.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":160,"byte_end":203,"line_start":6,"line_end":6,"column_start":1,"column_end":44}},{"value":"/ * A [decoder](stream/read/struct.Decoder.html) to read input data from a `Read`","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":204,"byte_end":287,"line_start":7,"line_end":7,"column_start":1,"column_end":84}},{"value":"/   and decompress it.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":288,"byte_end":312,"line_start":8,"line_end":8,"column_start":1,"column_end":25}},{"value":"/ * Convenient functions for common tasks.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":313,"byte_end":357,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":358,"byte_end":361,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":362,"byte_end":375,"line_start":11,"line_end":11,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":376,"byte_end":379,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":380,"byte_end":393,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":394,"byte_end":410,"line_start":14,"line_end":14,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":411,"byte_end":414,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ // Uncompress input and print the result.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":415,"byte_end":460,"line_start":16,"line_end":16,"column_start":1,"column_end":46}},{"value":"/ zstd::stream::copy_decode(io::stdin(), io::stdout()).unwrap();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":461,"byte_end":527,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":528,"byte_end":535,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":536,"byte_end":539,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ [zstd]: https://github.com/facebook/zstd","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":540,"byte_end":584,"line_start":20,"line_end":20,"column_start":1,"column_end":45}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":585,"byte_end":607,"line_start":21,"line_end":21,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bulk","qualname":"::bulk","value":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":36},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76}],"decl_id":null,"docs":" Compress and decompress data in bulk.","sig":null,"attributes":[{"value":"/ Compress and decompress data in bulk.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2003,"byte_end":2044,"line_start":1,"line_end":1,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2045,"byte_end":2048,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ These methods process all the input data at once.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2049,"byte_end":2102,"line_start":3,"line_end":3,"column_start":1,"column_end":54}},{"value":"/ It is therefore best used with relatively small blocks","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2103,"byte_end":2161,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/ (like small network packets).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2162,"byte_end":2195,"line_start":5,"line_end":5,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4339,"byte_end":4349,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"Compressor","qualname":"::bulk::compressor::Compressor","value":"Compressor {  }","parent":null,"children":[{"krate":0,"index":600}],"decl_id":null,"docs":" Allows to compress independently multiple chunks of data.","sig":null,"attributes":[{"value":"/ Allows to compress independently multiple chunks of data.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":3783,"byte_end":3844,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":3845,"byte_end":3848,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Each job will be processed entirely in-memory without streaming, so this","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":3849,"byte_end":3925,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ is most fitting for many small jobs. To compress larger volume that don't","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":3926,"byte_end":4003,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ easily fit in memory, a streaming compression may be more appropriate.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4004,"byte_end":4078,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4079,"byte_end":4082,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ It is more efficient than a streaming compressor for 2 reasons:","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4083,"byte_end":4150,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"/ * It re-uses the zstd context between jobs to avoid re-allocations","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4151,"byte_end":4221,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/ * It avoids copying data from a `Read` into a temporary buffer before compression.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4222,"byte_end":4308,"line_start":14,"line_end":14,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4469,"byte_end":4472,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<Compressor>::new","value":"pub fn new(i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd compressor\n","sig":null,"attributes":[{"value":"/ Creates a new zstd compressor","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4424,"byte_end":4457,"line_start":21,"line_end":21,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4750,"byte_end":4765,"line_start":30,"line_end":30,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Compressor>::with_dictionary","value":"pub fn with_dictionary(i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd compressor, using the given dictionary.","sig":null,"attributes":[{"value":"/ Creates a new zstd compressor, using the given dictionary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4560,"byte_end":4622,"line_start":26,"line_end":26,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4627,"byte_end":4630,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ Note that using a dictionary means that decompression will need to use","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4635,"byte_end":4709,"line_start":28,"line_end":28,"column_start":5,"column_end":79}},{"value":"/ the same dictionary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4714,"byte_end":4738,"line_start":29,"line_end":29,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":5273,"byte_end":5297,"line_start":46,"line_end":46,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Compressor>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(&'a crate::dict::EncoderDictionary)\n-> io::Result<Self> where 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new compressor using an existing `EncoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new compressor using an existing `EncoderDictionary`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4984,"byte_end":5051,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":5056,"byte_end":5059,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ The compression level will be the one specified when creating the dictionary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":5064,"byte_end":5145,"line_start":42,"line_end":42,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":5150,"byte_end":5153,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ Note that using a dictionary means that decompression will need to use","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":5158,"byte_end":5232,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/ the same dictionary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":5237,"byte_end":5261,"line_start":45,"line_end":45,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":5858,"byte_end":5879,"line_start":65,"line_end":65,"column_start":12,"column_end":33},"name":"set_compression_level","qualname":"<Compressor>::set_compression_level","value":"pub fn set_compression_level(&mut Self, i32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Changes the compression level used by this compressor.","sig":null,"attributes":[{"value":"/ Changes the compression level used by this compressor.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":5560,"byte_end":5618,"line_start":59,"line_end":59,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":5623,"byte_end":5626,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ *This will clear any dictionary previously registered.*","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":5631,"byte_end":5690,"line_start":61,"line_end":61,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":5695,"byte_end":5698,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ If you want to keep the existing dictionary, you will need to pass it again to","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":5703,"byte_end":5785,"line_start":63,"line_end":63,"column_start":5,"column_end":87}},{"value":"/ `Self::set_dictionary` instead of using this method.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":5790,"byte_end":5846,"line_start":64,"line_end":64,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":6228,"byte_end":6242,"line_start":75,"line_end":75,"column_start":12,"column_end":26},"name":"set_dictionary","qualname":"<Compressor>::set_dictionary","value":"pub fn set_dictionary(&mut Self, i32, &[u8]) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Changes the dictionary and compression level used by this compressor.","sig":null,"attributes":[{"value":"/ Changes the dictionary and compression level used by this compressor.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":5974,"byte_end":6047,"line_start":69,"line_end":69,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":6052,"byte_end":6055,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Will affect future compression jobs.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":6060,"byte_end":6100,"line_start":71,"line_end":71,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":6105,"byte_end":6108,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ Note that using a dictionary means that decompression will need to use","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":6113,"byte_end":6187,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/ the same dictionary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":6192,"byte_end":6216,"line_start":74,"line_end":74,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":6866,"byte_end":6889,"line_start":97,"line_end":97,"column_start":12,"column_end":35},"name":"set_prepared_dictionary","qualname":"<Compressor>::set_prepared_dictionary","value":"pub fn set_prepared_dictionary<'b>(&mut Self,\n&'a crate::dict::EncoderDictionary) -> io::Result<()> where 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Changes the dictionary used by this compressor.","sig":null,"attributes":[{"value":"/ Changes the dictionary used by this compressor.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":6600,"byte_end":6651,"line_start":91,"line_end":91,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":6656,"byte_end":6659,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ The compression level used when preparing the dictionary will be used.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":6664,"byte_end":6738,"line_start":93,"line_end":93,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":6743,"byte_end":6746,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Note that using a dictionary means that decompression will need to use","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":6751,"byte_end":6825,"line_start":95,"line_end":95,"column_start":5,"column_end":79}},{"value":"/ the same dictionary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":6830,"byte_end":6854,"line_start":96,"line_end":96,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":7462,"byte_end":7480,"line_start":117,"line_end":117,"column_start":12,"column_end":30},"name":"compress_to_buffer","qualname":"<Compressor>::compress_to_buffer","value":"pub fn compress_to_buffer<C: zstd_safe::WriteBuf +\n?Sized>(&mut Self, &[u8], &mut C) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Compress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Compress a single block of data to the given destination buffer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":7163,"byte_end":7231,"line_start":111,"line_end":111,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":7236,"byte_end":7239,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":7244,"byte_end":7318,"line_start":113,"line_end":113,"column_start":5,"column_end":79}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":7323,"byte_end":7382,"line_start":114,"line_end":114,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":7387,"byte_end":7390,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":7395,"byte_end":7450,"line_start":116,"line_end":116,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":7873,"byte_end":7881,"line_start":130,"line_end":130,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compressor>::compress","value":"pub fn compress(&mut Self, &[u8]) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a block of data and returns the compressed result.","sig":null,"attributes":[{"value":"/ Compresses a block of data and returns the compressed result.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":7728,"byte_end":7793,"line_start":127,"line_end":127,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":7798,"byte_end":7801,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":7806,"byte_end":7861,"line_start":129,"line_end":129,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":8346,"byte_end":8357,"line_start":142,"line_end":142,"column_start":12,"column_end":23},"name":"context_mut","qualname":"<Compressor>::context_mut","value":"pub fn context_mut(&mut Self) -> &mut zstd_safe::CCtx","parent":null,"children":[],"decl_id":null,"docs":" Gives mutable access to the internal context.\n","sig":null,"attributes":[{"value":"/ Gives mutable access to the internal context.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":8285,"byte_end":8334,"line_start":141,"line_end":141,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":8501,"byte_end":8514,"line_start":147,"line_end":147,"column_start":12,"column_end":25},"name":"set_parameter","qualname":"<Compressor>::set_parameter","value":"pub fn set_parameter(&mut Self, zstd_safe::CParameter) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a compression parameter for this compressor.\n","sig":null,"attributes":[{"value":"/ Sets a compression parameter for this compressor.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":8436,"byte_end":8489,"line_start":146,"line_end":146,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":609},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":9156,"byte_end":9168,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"Decompressor","qualname":"::bulk::decompressor::Decompressor","value":"Decompressor {  }","parent":null,"children":[{"krate":0,"index":611}],"decl_id":null,"docs":" Allows to decompress independently multiple blocks of data.","sig":null,"attributes":[{"value":"/ Allows to decompress independently multiple blocks of data.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":8979,"byte_end":9042,"line_start":8,"line_end":8,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":9043,"byte_end":9046,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This reduces memory usage compared to calling `decompress` multiple times.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":9047,"byte_end":9125,"line_start":10,"line_end":10,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":9293,"byte_end":9296,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompressor>::new","value":"pub fn new() -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd decompressor.\n","sig":null,"attributes":[{"value":"/ Creates a new zstd decompressor.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":9245,"byte_end":9281,"line_start":17,"line_end":17,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":9443,"byte_end":9458,"line_start":23,"line_end":23,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decompressor>::with_dictionary","value":"pub fn with_dictionary(&[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd decompressor, using the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new zstd decompressor, using the given dictionary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":9367,"byte_end":9431,"line_start":22,"line_end":22,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":9861,"byte_end":9885,"line_start":37,"line_end":37,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decompressor>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(&'a crate::dict::DecoderDictionary)\n-> io::Result<Self> where 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decompressor using an existing `DecoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new decompressor using an existing `DecoderDictionary`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":9666,"byte_end":9735,"line_start":33,"line_end":33,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":9740,"byte_end":9743,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ Note that using a dictionary means that compression will need to use","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":9748,"byte_end":9820,"line_start":35,"line_end":35,"column_start":5,"column_end":77}},{"value":"/ the same dictionary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":9825,"byte_end":9849,"line_start":36,"line_end":36,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":10386,"byte_end":10400,"line_start":56,"line_end":56,"column_start":12,"column_end":26},"name":"set_dictionary","qualname":"<Decompressor>::set_dictionary","value":"pub fn set_dictionary(&mut Self, &[u8]) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Changes the dictionary used by this decompressor.","sig":null,"attributes":[{"value":"/ Changes the dictionary used by this decompressor.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":10154,"byte_end":10207,"line_start":50,"line_end":50,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":10212,"byte_end":10215,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Will affect future compression jobs.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":10220,"byte_end":10260,"line_start":52,"line_end":52,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":10265,"byte_end":10268,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Note that using a dictionary means that compression will need to use","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":10273,"byte_end":10345,"line_start":54,"line_end":54,"column_start":5,"column_end":77}},{"value":"/ the same dictionary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":10350,"byte_end":10374,"line_start":55,"line_end":55,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":10758,"byte_end":10781,"line_start":68,"line_end":68,"column_start":12,"column_end":35},"name":"set_prepared_dictionary","qualname":"<Decompressor>::set_prepared_dictionary","value":"pub fn set_prepared_dictionary<'b>(&mut Self,\n&'a crate::dict::DecoderDictionary) -> io::Result<()> where 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Changes the dictionary used by this decompressor.","sig":null,"attributes":[{"value":"/ Changes the dictionary used by this decompressor.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":10579,"byte_end":10632,"line_start":64,"line_end":64,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":10637,"byte_end":10640,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Note that using a dictionary means that compression will need to use","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":10645,"byte_end":10717,"line_start":66,"line_end":66,"column_start":5,"column_end":77}},{"value":"/ the same dictionary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":10722,"byte_end":10746,"line_start":67,"line_end":67,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":11287,"byte_end":11307,"line_start":86,"line_end":86,"column_start":12,"column_end":32},"name":"decompress_to_buffer","qualname":"<Decompressor>::decompress_to_buffer","value":"pub fn decompress_to_buffer<C: zstd_safe::WriteBuf +\n?Sized>(&mut Self, &[u8], &mut C) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Deompress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Deompress a single block of data to the given destination buffer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":11055,"byte_end":11124,"line_start":82,"line_end":82,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":11129,"byte_end":11132,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":11137,"byte_end":11211,"line_start":84,"line_end":84,"column_start":5,"column_end":79}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":11216,"byte_end":11275,"line_start":85,"line_end":85,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":11751,"byte_end":11761,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompressor>::decompress","value":"pub fn decompress(&mut Self, &[u8], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompress a block of data, and return the result in a `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Decompress a block of data, and return the result in a `Vec<u8>`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":11556,"byte_end":11625,"line_start":96,"line_end":96,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":11630,"byte_end":11633,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ The decompressed data should be less than `capacity` bytes,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":11638,"byte_end":11701,"line_start":98,"line_end":98,"column_start":5,"column_end":68}},{"value":"/ or an error will be returned.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":11706,"byte_end":11739,"line_start":99,"line_end":99,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":12162,"byte_end":12175,"line_start":113,"line_end":113,"column_start":12,"column_end":25},"name":"set_parameter","qualname":"<Decompressor>::set_parameter","value":"pub fn set_parameter(&mut Self, zstd_safe::DParameter) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a decompression parameter for this decompressor.\n","sig":null,"attributes":[{"value":"/ Sets a decompression parameter for this decompressor.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":12093,"byte_end":12150,"line_start":112,"line_end":112,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":12925,"byte_end":12936,"line_start":134,"line_end":134,"column_start":12,"column_end":23},"name":"upper_bound","qualname":"<Decompressor>::upper_bound","value":"pub fn upper_bound(&[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get an upper bound on the decompressed size of data, if available","sig":null,"attributes":[{"value":"/ Get an upper bound on the decompressed size of data, if available","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":12423,"byte_end":12492,"line_start":125,"line_end":125,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":12497,"byte_end":12500,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ This can be used to pre-allocate enough capacity for `decompress_to_buffer`","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":12505,"byte_end":12584,"line_start":127,"line_end":127,"column_start":5,"column_end":84}},{"value":"/ and is used by `decompress` to ensure that it does not over-allocate if","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":12589,"byte_end":12664,"line_start":128,"line_end":128,"column_start":5,"column_end":80}},{"value":"/ you supply a large `capacity`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":12669,"byte_end":12703,"line_start":129,"line_end":129,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":12708,"byte_end":12711,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if the upper bound cannot be determined or is larger than `usize::MAX`","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":12716,"byte_end":12809,"line_start":131,"line_end":131,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":12814,"byte_end":12817,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Note that unless the `experimental` feature is enabled, this will always return `None`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":12822,"byte_end":12913,"line_start":133,"line_end":133,"column_start":5,"column_end":96}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2629,"byte_end":2647,"line_start":24,"line_end":24,"column_start":8,"column_end":26},"name":"compress_to_buffer","qualname":"::bulk::compress_to_buffer","value":"pub fn compress_to_buffer(&[u8], &mut [u8], i32) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Compresses a single block of data to the given destination buffer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2352,"byte_end":2422,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2423,"byte_end":2426,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2427,"byte_end":2501,"line_start":20,"line_end":20,"column_start":1,"column_end":75}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2502,"byte_end":2561,"line_start":21,"line_end":21,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2562,"byte_end":2565,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2566,"byte_end":2621,"line_start":23,"line_end":23,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2941,"byte_end":2949,"line_start":35,"line_end":35,"column_start":8,"column_end":16},"name":"compress","qualname":"::bulk::compress","value":"pub fn compress(&[u8], i32) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a block of data and returns the compressed result.","sig":null,"attributes":[{"value":"/ Compresses a block of data and returns the compressed result.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2808,"byte_end":2873,"line_start":32,"line_end":32,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2874,"byte_end":2877,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":2878,"byte_end":2933,"line_start":34,"line_end":34,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":3262,"byte_end":3282,"line_start":43,"line_end":43,"column_start":8,"column_end":28},"name":"decompress_to_buffer","qualname":"::bulk::decompress_to_buffer","value":"pub fn decompress_to_buffer(&[u8], &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Deompress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Deompress a single block of data to the given destination buffer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":3046,"byte_end":3115,"line_start":39,"line_end":39,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":3116,"byte_end":3119,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":3120,"byte_end":3194,"line_start":41,"line_end":41,"column_start":1,"column_end":75}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":3195,"byte_end":3254,"line_start":42,"line_end":42,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":3605,"byte_end":3615,"line_start":54,"line_end":54,"column_start":8,"column_end":18},"name":"decompress","qualname":"::bulk::decompress","value":"pub fn decompress(&[u8], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses a block of data and returns the decompressed result.","sig":null,"attributes":[{"value":"/ Decompresses a block of data and returns the decompressed result.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":3426,"byte_end":3495,"line_start":50,"line_end":50,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":3496,"byte_end":3499,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ The decompressed data should be less than `capacity` bytes,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":3500,"byte_end":3563,"line_start":52,"line_end":52,"column_start":1,"column_end":64}},{"value":"/ or an error will be returned.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\mod.rs","byte_start":3564,"byte_end":3597,"line_start":53,"line_end":53,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dict","qualname":"::dict","value":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":122}],"decl_id":null,"docs":" Train a dictionary from various sources.","sig":null,"attributes":[{"value":"/ Train a dictionary from various sources.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":13326,"byte_end":13370,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":13371,"byte_end":13374,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A dictionary can help improve the compression of small files.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":13375,"byte_end":13440,"line_start":3,"line_end":3,"column_start":1,"column_end":66}},{"value":"/ The dictionary must be present during decompression,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":13441,"byte_end":13497,"line_start":4,"line_end":4,"column_start":1,"column_end":57}},{"value":"/ but can be shared accross multiple \"similar\" files.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":13498,"byte_end":13553,"line_start":5,"line_end":5,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":13554,"byte_end":13557,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Creating a dictionary using the `zstd` C library,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":13558,"byte_end":13611,"line_start":7,"line_end":7,"column_start":1,"column_end":54}},{"value":"/ using the `zstd` command-line interface, using this library,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":13612,"byte_end":13676,"line_start":8,"line_end":8,"column_start":1,"column_end":65}},{"value":"/ or using the `train` binary provided, should give the same result,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":13677,"byte_end":13747,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/ and are therefore completely compatible.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":13748,"byte_end":13792,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":13793,"byte_end":13796,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ To use, see [`Encoder::with_dictionary`] or [`Decoder::with_dictionary`].","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":13797,"byte_end":13874,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":13875,"byte_end":13878,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`Encoder::with_dictionary`]: ../struct.Encoder.html#method.with_dictionary","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":13879,"byte_end":13958,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ [`Decoder::with_dictionary`]: ../struct.Decoder.html#method.with_dictionary","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":13959,"byte_end":14038,"line_start":15,"line_end":15,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":14369,"byte_end":14386,"line_start":29,"line_end":29,"column_start":12,"column_end":29},"name":"EncoderDictionary","qualname":"::dict::EncoderDictionary","value":"EncoderDictionary {  }","parent":null,"children":[{"krate":0,"index":103}],"decl_id":null,"docs":" Prepared dictionary for compression","sig":null,"attributes":[{"value":"/ Prepared dictionary for compression","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":14160,"byte_end":14199,"line_start":25,"line_end":25,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":14200,"byte_end":14203,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ A dictionary can include its own copy of the data (if it is `'static`), or it can merely point","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":14204,"byte_end":14302,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/ to a separate buffer (if it has another lifetime).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":14303,"byte_end":14357,"line_start":28,"line_end":28,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":14576,"byte_end":14580,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"copy","qualname":"<EncoderDictionary>::copy","value":"pub fn copy(&[u8], i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a prepared dictionary for compression.","sig":null,"attributes":[{"value":"/ Creates a prepared dictionary for compression.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":14456,"byte_end":14506,"line_start":34,"line_end":34,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":14511,"byte_end":14514,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ This will copy the dictionary internally.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":14519,"byte_end":14564,"line_start":36,"line_end":36,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":15314,"byte_end":15322,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"name":"as_cdict","qualname":"<EncoderDictionary>::as_cdict","value":"pub fn as_cdict(&Self) -> &CDict","parent":null,"children":[],"decl_id":null,"docs":" Returns reference to `CDict` inner object\n","sig":null,"attributes":[{"value":"/ Returns reference to `CDict` inner object","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":15257,"byte_end":15302,"line_start":58,"line_end":58,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":15428,"byte_end":15445,"line_start":65,"line_end":65,"column_start":12,"column_end":29},"name":"DecoderDictionary","qualname":"::dict::DecoderDictionary","value":"DecoderDictionary {  }","parent":null,"children":[{"krate":0,"index":111}],"decl_id":null,"docs":" Prepared dictionary for decompression\n","sig":null,"attributes":[{"value":"/ Prepared dictionary for decompression","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":15375,"byte_end":15416,"line_start":64,"line_end":64,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":15636,"byte_end":15640,"line_start":73,"line_end":73,"column_start":12,"column_end":16},"name":"copy","qualname":"<DecoderDictionary>::copy","value":"pub fn copy(&[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a prepared dictionary for decompression.","sig":null,"attributes":[{"value":"/ Create a prepared dictionary for decompression.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":15515,"byte_end":15566,"line_start":70,"line_end":70,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":15571,"byte_end":15574,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ This will copy the dictionary internally.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":15579,"byte_end":15624,"line_start":72,"line_end":72,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":16259,"byte_end":16267,"line_start":93,"line_end":93,"column_start":12,"column_end":20},"name":"as_ddict","qualname":"<DecoderDictionary>::as_ddict","value":"pub fn as_ddict(&Self) -> &DDict","parent":null,"children":[],"decl_id":null,"docs":" Returns reference to `DDict` inner object\n","sig":null,"attributes":[{"value":"/ Returns reference to `DDict` inner object","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":16202,"byte_end":16247,"line_start":92,"line_end":92,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":16493,"byte_end":16508,"line_start":102,"line_end":102,"column_start":8,"column_end":23},"name":"from_continuous","qualname":"::dict::from_continuous","value":"pub fn from_continuous(&[u8], &[usize], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Train a dictionary from a big continuous chunk of data.","sig":null,"attributes":[{"value":"/ Train a dictionary from a big continuous chunk of data.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":16320,"byte_end":16379,"line_start":98,"line_end":98,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":16380,"byte_end":16383,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ This is the most efficient way to train a dictionary,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":16384,"byte_end":16441,"line_start":100,"line_end":100,"column_start":1,"column_end":58}},{"value":"/ since this is directly fed into `zstd`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":16442,"byte_end":16485,"line_start":101,"line_end":101,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":17400,"byte_end":17412,"line_start":130,"line_end":130,"column_start":8,"column_end":20},"name":"from_samples","qualname":"::dict::from_samples","value":"pub fn from_samples<S: AsRef<[u8]>>(&[S], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Train a dictionary from multiple samples.","sig":null,"attributes":[{"value":"/ Train a dictionary from multiple samples.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":17057,"byte_end":17102,"line_start":121,"line_end":121,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":17103,"byte_end":17106,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ The samples will internaly be copied to a single continuous buffer,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":17107,"byte_end":17178,"line_start":123,"line_end":123,"column_start":1,"column_end":72}},{"value":"/ so make sure you have enough memory available.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":17179,"byte_end":17229,"line_start":124,"line_end":124,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":17230,"byte_end":17233,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ If you need to stretch your system's limits,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":17234,"byte_end":17282,"line_start":126,"line_end":126,"column_start":1,"column_end":49}},{"value":"/ [`from_continuous`] directly uses the given slice.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":17283,"byte_end":17337,"line_start":127,"line_end":127,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":17338,"byte_end":17341,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ [`from_continuous`]: ./fn.from_continuous.html","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":17342,"byte_end":17392,"line_start":129,"line_end":129,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":17809,"byte_end":17819,"line_start":143,"line_end":143,"column_start":8,"column_end":18},"name":"from_files","qualname":"::dict::from_files","value":"pub fn from_files<I, P>(I, usize) -> io::Result<Vec<u8>> where\nP: AsRef<path::Path>, I: IntoIterator<Item = P>","parent":null,"children":[],"decl_id":null,"docs":" Train a dict from a list of files.\n","sig":null,"attributes":[{"value":"/ Train a dict from a list of files.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":17763,"byte_end":17801,"line_start":142,"line_end":142,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::stream","value":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":210},{"krate":0,"index":336},{"krate":0,"index":357},{"krate":0,"index":464},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":570},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576}],"decl_id":null,"docs":" Compress and decompress Zstd streams.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":744,"byte_end":756,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"/ Compress and decompress Zstd streams.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":19621,"byte_end":19662,"line_start":1,"line_end":1,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":19663,"byte_end":19666,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Zstd streams are the main way to compress and decompress data.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":19667,"byte_end":19733,"line_start":3,"line_end":3,"column_start":1,"column_end":67}},{"value":"/ They are compatible with the `zstd` command-line tool.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":19734,"byte_end":19792,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":19793,"byte_end":19796,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module provides both `Read` and `Write` interfaces to compressing and","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":19797,"byte_end":19875,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ decompressing.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":19876,"byte_end":19894,"line_start":7,"line_end":7,"column_start":1,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::stream::read","value":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":154},{"krate":0,"index":157},{"krate":0,"index":161},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":172},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":192},{"krate":0,"index":201},{"krate":0,"index":204}],"decl_id":null,"docs":" Implement pull-based [`Read`] trait for both compressing and decompressing.\n","sig":null,"attributes":[{"value":"/ Implement pull-based [`Read`] trait for both compressing and decompressing.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":27016,"byte_end":27095,"line_start":1,"line_end":1,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":27448,"byte_end":27455,"line_start":15,"line_end":15,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::read::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":160}],"decl_id":null,"docs":" A decoder that decompress input data from another `Read`.","sig":null,"attributes":[{"value":"/ A decoder that decompress input data from another `Read`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":27273,"byte_end":27334,"line_start":11,"line_end":11,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":27335,"byte_end":27338,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This allows to read a stream of compressed data","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":27339,"byte_end":27390,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/ (good for files or heavy network stream).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":27391,"byte_end":27436,"line_start":14,"line_end":14,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":27595,"byte_end":27602,"line_start":20,"line_end":20,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::read::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":164}],"decl_id":null,"docs":" An encoder that compress input data from another `Read`.\n","sig":null,"attributes":[{"value":"/ An encoder that compress input data from another `Read`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":27523,"byte_end":27583,"line_start":19,"line_end":19,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":27759,"byte_end":27762,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new(R) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":27721,"byte_end":27747,"line_start":25,"line_end":25,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":28033,"byte_end":28044,"line_start":35,"line_end":35,"column_start":12,"column_end":23},"name":"with_buffer","qualname":"<Decoder>::with_buffer","value":"pub fn with_buffer(R) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder around a `BufRead`.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder around a `BufRead`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":27976,"byte_end":28021,"line_start":34,"line_end":34,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":28283,"byte_end":28298,"line_start":41,"line_end":41,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder>::with_dictionary","value":"pub fn with_dictionary(R, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing dictionary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":28131,"byte_end":28187,"line_start":38,"line_end":38,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":28192,"byte_end":28195,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":28200,"byte_end":28271,"line_start":40,"line_end":40,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":28717,"byte_end":28729,"line_start":53,"line_end":53,"column_start":12,"column_end":24},"name":"single_frame","qualname":"<Decoder>::single_frame","value":"pub fn single_frame(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets this `Decoder` to stop after the first frame.","sig":null,"attributes":[{"value":"/ Sets this `Decoder` to stop after the first frame.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":28555,"byte_end":28609,"line_start":49,"line_end":49,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":28614,"byte_end":28617,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ By default, it keeps concatenating frames until EOF is reached.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":28622,"byte_end":28689,"line_start":51,"line_end":51,"column_start":5,"column_end":72}},{"value":"must_use","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":28694,"byte_end":28705,"line_start":52,"line_end":52,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":28975,"byte_end":28999,"line_start":61,"line_end":61,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(R, &DecoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing `DecoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing `DecoderDictionary`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":28814,"byte_end":28879,"line_start":58,"line_end":58,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":28884,"byte_end":28887,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":28892,"byte_end":28963,"line_start":60,"line_end":60,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":29365,"byte_end":29388,"line_start":75,"line_end":75,"column_start":12,"column_end":35},"name":"recommended_output_size","qualname":"<Decoder>::recommended_output_size","value":"pub fn recommended_output_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Recommendation for the size of the output buffer.\n","sig":null,"attributes":[{"value":"/ Recommendation for the size of the output buffer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":29300,"byte_end":29353,"line_start":74,"line_end":74,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":29510,"byte_end":29517,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Decoder>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquire a reference to the underlying reader.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":29449,"byte_end":29498,"line_start":79,"line_end":79,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":29773,"byte_end":29780,"line_start":88,"line_end":88,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Decoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquire a mutable reference to the underlying reader.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":29573,"byte_end":29630,"line_start":84,"line_end":84,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":29635,"byte_end":29638,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":29643,"byte_end":29715,"line_start":86,"line_end":86,"column_start":5,"column_end":77}},{"value":"/ this decoder is continued to be used.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":29720,"byte_end":29761,"line_start":87,"line_end":87,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":30022,"byte_end":30028,"line_start":96,"line_end":96,"column_start":12,"column_end":18},"name":"finish","qualname":"<Decoder>::finish","value":"pub fn finish(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Return the inner `Read`.","sig":null,"attributes":[{"value":"/ Return the inner `Read`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":29848,"byte_end":29876,"line_start":92,"line_end":92,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":29881,"byte_end":29884,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Calling `finish()` is not *required* after reading a stream -","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":29889,"byte_end":29954,"line_start":94,"line_end":94,"column_start":5,"column_end":70}},{"value":"/ just use it if you need to get the `Read` back.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":29959,"byte_end":30010,"line_start":95,"line_end":95,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":30354,"byte_end":30357,"line_start":111,"line_end":111,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(R, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":30316,"byte_end":30342,"line_start":110,"line_end":110,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":30647,"byte_end":30658,"line_start":120,"line_end":120,"column_start":12,"column_end":23},"name":"with_buffer","qualname":"<Encoder>::with_buffer","value":"pub fn with_buffer(R, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder around a `BufRead`.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder around a `BufRead`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":30590,"byte_end":30635,"line_start":119,"line_end":119,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":30917,"byte_end":30932,"line_start":127,"line_end":127,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder>::with_dictionary","value":"pub fn with_dictionary(R, i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing dictionary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":30765,"byte_end":30821,"line_start":124,"line_end":124,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":30826,"byte_end":30829,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":30834,"byte_end":30905,"line_start":126,"line_end":126,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":31401,"byte_end":31425,"line_start":143,"line_end":143,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(R, &EncoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing `EncoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing `EncoderDictionary`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":31240,"byte_end":31305,"line_start":140,"line_end":140,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":31310,"byte_end":31313,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":31318,"byte_end":31389,"line_start":142,"line_end":142,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":31791,"byte_end":31814,"line_start":157,"line_end":157,"column_start":12,"column_end":35},"name":"recommended_output_size","qualname":"<Encoder>::recommended_output_size","value":"pub fn recommended_output_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Recommendation for the size of the output buffer.\n","sig":null,"attributes":[{"value":"/ Recommendation for the size of the output buffer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":31726,"byte_end":31779,"line_start":156,"line_end":156,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":31936,"byte_end":31943,"line_start":162,"line_end":162,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Encoder>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquire a reference to the underlying reader.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":31875,"byte_end":31924,"line_start":161,"line_end":161,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":32199,"byte_end":32206,"line_start":170,"line_end":170,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Encoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquire a mutable reference to the underlying reader.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":31999,"byte_end":32056,"line_start":166,"line_end":166,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":32061,"byte_end":32064,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":32069,"byte_end":32141,"line_start":168,"line_end":168,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":32146,"byte_end":32187,"line_start":169,"line_end":169,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":32448,"byte_end":32454,"line_start":178,"line_end":178,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"pub fn finish(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Return the inner `Read`.","sig":null,"attributes":[{"value":"/ Return the inner `Read`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":32274,"byte_end":32302,"line_start":174,"line_end":174,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":32307,"byte_end":32310,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Calling `finish()` is not *required* after reading a stream -","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":32315,"byte_end":32380,"line_start":176,"line_end":176,"column_start":5,"column_end":70}},{"value":"/ just use it if you need to get the `Read` back.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":32385,"byte_end":32436,"line_start":177,"line_end":177,"column_start":5,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::stream::write","value":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":225},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":239},{"krate":0,"index":243},{"krate":0,"index":249},{"krate":0,"index":255},{"krate":0,"index":262},{"krate":0,"index":266},{"krate":0,"index":271},{"krate":0,"index":278},{"krate":0,"index":282},{"krate":0,"index":287},{"krate":0,"index":291},{"krate":0,"index":307},{"krate":0,"index":312},{"krate":0,"index":316},{"krate":0,"index":329},{"krate":0,"index":333}],"decl_id":null,"docs":" Implement push-based [`Write`] trait for both compressing and decompressing.\n","sig":null,"attributes":[{"value":"/ Implement push-based [`Write`] trait for both compressing and decompressing.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":32898,"byte_end":32978,"line_start":1,"line_end":1,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33687,"byte_end":33694,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::write::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":238}],"decl_id":null,"docs":" An encoder that compress and forward data to another writer.","sig":null,"attributes":[{"value":"/ An encoder that compress and forward data to another writer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33138,"byte_end":33202,"line_start":12,"line_end":12,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33203,"byte_end":33206,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This allows to compress a stream of data","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33207,"byte_end":33251,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"/ (good for files or heavy network stream).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33252,"byte_end":33297,"line_start":15,"line_end":15,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33298,"byte_end":33301,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Don't forget to call [`finish()`] before dropping it!","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33302,"byte_end":33359,"line_start":17,"line_end":17,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33360,"byte_end":33363,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Alternatively, you can call [`auto_finish()`] to use an","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33364,"byte_end":33423,"line_start":19,"line_end":19,"column_start":1,"column_end":60}},{"value":"/ [`AutoFinishEncoder`] that will finish on drop.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33424,"byte_end":33475,"line_start":20,"line_end":20,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33476,"byte_end":33479,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Note: The zstd library has its own internal input buffer (~128kb).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33480,"byte_end":33550,"line_start":22,"line_end":22,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33551,"byte_end":33554,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`finish()`]: #method.finish","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33555,"byte_end":33587,"line_start":24,"line_end":24,"column_start":1,"column_end":33}},{"value":"/ [`auto_finish()`]: #method.auto_finish","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33588,"byte_end":33630,"line_start":25,"line_end":25,"column_start":1,"column_end":43}},{"value":"/ [`AutoFinishEncoder`]: AutoFinishEncoder","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33631,"byte_end":33675,"line_start":26,"line_end":26,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34082,"byte_end":34089,"line_start":38,"line_end":38,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::write::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":242}],"decl_id":null,"docs":" A decoder that decompress and forward data to another writer.","sig":null,"attributes":[{"value":"/ A decoder that decompress and forward data to another writer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33799,"byte_end":33864,"line_start":32,"line_end":32,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33865,"byte_end":33868,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Note that you probably want to `flush()` after writing your stream content.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33869,"byte_end":33948,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ You can use [`auto_flush()`] to automatically flush the writer on drop.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":33949,"byte_end":34024,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34025,"byte_end":34028,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ [`auto_flush()`]: Decoder::auto_flush","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34029,"byte_end":34070,"line_start":37,"line_end":37,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34431,"byte_end":34448,"line_start":49,"line_end":49,"column_start":12,"column_end":29},"name":"AutoFinishEncoder","qualname":"::stream::write::AutoFinishEncoder","value":"AutoFinishEncoder {  }","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":248}],"decl_id":null,"docs":" A wrapper around an `Encoder<W>` that finishes the stream on drop.","sig":null,"attributes":[{"value":"/ A wrapper around an `Encoder<W>` that finishes the stream on drop.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34196,"byte_end":34266,"line_start":43,"line_end":43,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34267,"byte_end":34270,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This can be created by the [`auto_finish()`] method on the [`Encoder`].","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34271,"byte_end":34346,"line_start":45,"line_end":45,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34347,"byte_end":34350,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ [`auto_finish()`]: Encoder::auto_finish","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34351,"byte_end":34394,"line_start":47,"line_end":47,"column_start":1,"column_end":44}},{"value":"/ [`Encoder`]: Encoder","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34395,"byte_end":34419,"line_start":48,"line_end":48,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34898,"byte_end":34914,"line_start":66,"line_end":66,"column_start":12,"column_end":28},"name":"AutoFlushDecoder","qualname":"::stream::write::AutoFlushDecoder","value":"AutoFlushDecoder {  }","parent":null,"children":[{"krate":0,"index":253},{"krate":0,"index":254}],"decl_id":null,"docs":" A wrapper around a `Decoder<W>` that flushes the stream on drop.","sig":null,"attributes":[{"value":"/ A wrapper around a `Decoder<W>` that flushes the stream on drop.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34668,"byte_end":34736,"line_start":60,"line_end":60,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34737,"byte_end":34740,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ This can be created by the [`auto_flush()`] method on the [`Decoder`].","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34741,"byte_end":34815,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34816,"byte_end":34819,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ [`auto_flush()`]: Decoder::auto_flush","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34820,"byte_end":34861,"line_start":64,"line_end":64,"column_start":1,"column_end":42}},{"value":"/ [`Decoder`]: Decoder","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":34862,"byte_end":34886,"line_start":65,"line_end":65,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":35452,"byte_end":35459,"line_start":86,"line_end":86,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<AutoFlushDecoder>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":35390,"byte_end":35440,"line_start":85,"line_end":85,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":35786,"byte_end":35793,"line_start":96,"line_end":96,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AutoFlushDecoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":35535,"byte_end":35593,"line_start":90,"line_end":90,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":35598,"byte_end":35601,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":35606,"byte_end":35678,"line_start":92,"line_end":92,"column_start":5,"column_end":77}},{"value":"/ this decoder is continued to be used.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":35683,"byte_end":35724,"line_start":93,"line_end":93,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":35729,"byte_end":35732,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Mostly used for testing purposes.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":35737,"byte_end":35774,"line_start":95,"line_end":95,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":36820,"byte_end":36827,"line_start":134,"line_end":134,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<AutoFinishEncoder>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":36758,"byte_end":36808,"line_start":133,"line_end":133,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":37154,"byte_end":37161,"line_start":144,"line_end":144,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AutoFinishEncoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":36903,"byte_end":36961,"line_start":138,"line_end":138,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":36966,"byte_end":36969,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":36974,"byte_end":37046,"line_start":140,"line_end":140,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":37051,"byte_end":37092,"line_start":141,"line_end":141,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":37097,"byte_end":37100,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ Mostly used for testing purposes.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":37105,"byte_end":37142,"line_start":143,"line_end":143,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":38012,"byte_end":38015,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(W, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":37855,"byte_end":37881,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":37886,"byte_end":37889,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ `level`: compression level (1-21).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":37894,"byte_end":37932,"line_start":171,"line_end":171,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":37937,"byte_end":37940,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":37945,"byte_end":38000,"line_start":173,"line_end":173,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":38399,"byte_end":38414,"line_start":184,"line_end":184,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder>::with_dictionary","value":"pub fn with_dictionary(W, i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing dictionary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":38122,"byte_end":38178,"line_start":178,"line_end":178,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":38183,"byte_end":38186,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":38191,"byte_end":38246,"line_start":180,"line_end":180,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":38251,"byte_end":38319,"line_start":181,"line_end":181,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":38324,"byte_end":38327,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":38332,"byte_end":38387,"line_start":183,"line_end":183,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":38946,"byte_end":38970,"line_start":200,"line_end":200,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(W, &EncoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing prepared `EncoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing prepared `EncoderDictionary`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":38719,"byte_end":38793,"line_start":196,"line_end":196,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":38798,"byte_end":38801,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":38806,"byte_end":38861,"line_start":198,"line_end":198,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":38866,"byte_end":38934,"line_start":199,"line_end":199,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":39456,"byte_end":39467,"line_start":217,"line_end":217,"column_start":12,"column_end":23},"name":"auto_finish","qualname":"<Encoder>::auto_finish","value":"pub fn auto_finish(Self) -> AutoFinishEncoder","parent":null,"children":[],"decl_id":null,"docs":" Returns a wrapper around `self` that will finish the stream on drop.","sig":null,"attributes":[{"value":"/ Returns a wrapper around `self` that will finish the stream on drop.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":39270,"byte_end":39342,"line_start":212,"line_end":212,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":39347,"byte_end":39350,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":39355,"byte_end":39366,"line_start":214,"line_end":214,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":39371,"byte_end":39374,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Panics on drop if an error happens when finishing the stream.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":39379,"byte_end":39444,"line_start":216,"line_end":216,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":39744,"byte_end":39753,"line_start":226,"line_end":226,"column_start":12,"column_end":21},"name":"on_finish","qualname":"<Encoder>::on_finish","value":"pub fn on_finish<F: FnMut(io::Result<W>) -> ()>(Self, F) -> AutoFinishEncoder","parent":null,"children":[],"decl_id":null,"docs":" Returns an encoder that will finish the stream on drop.","sig":null,"attributes":[{"value":"/ Returns an encoder that will finish the stream on drop.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":39599,"byte_end":39658,"line_start":223,"line_end":223,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":39663,"byte_end":39666,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ Calls the given callback with the result from `finish()`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":39671,"byte_end":39732,"line_start":225,"line_end":225,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":39960,"byte_end":39967,"line_start":234,"line_end":234,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Encoder>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":39898,"byte_end":39948,"line_start":233,"line_end":233,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40224,"byte_end":40231,"line_start":242,"line_end":242,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Encoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40023,"byte_end":40081,"line_start":238,"line_end":238,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40086,"byte_end":40089,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40094,"byte_end":40166,"line_start":240,"line_end":240,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40171,"byte_end":40212,"line_start":241,"line_end":241,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40855,"byte_end":40861,"line_start":258,"line_end":258,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" **Required**: Finishes the stream.","sig":null,"attributes":[{"value":"/ **Required**: Finishes the stream.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40299,"byte_end":40337,"line_start":246,"line_end":246,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40342,"byte_end":40345,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40350,"byte_end":40423,"line_start":248,"line_end":248,"column_start":5,"column_end":78}},{"value":"/ this method or with [`try_finish(self)`](#method.try_finish).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40428,"byte_end":40493,"line_start":249,"line_end":249,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40498,"byte_end":40501,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ This returns the inner writer in case you need it.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40506,"byte_end":40560,"line_start":251,"line_end":251,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40565,"byte_end":40568,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ To get back `self` in case an error happened, use `try_finish`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40573,"byte_end":40640,"line_start":253,"line_end":253,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40645,"byte_end":40648,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ **Note**: If you don't want (or can't) call `finish()` manually after","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40653,"byte_end":40726,"line_start":255,"line_end":255,"column_start":5,"column_end":78}},{"value":"/           writing your data, consider using `auto_finish()` to get an","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40731,"byte_end":40804,"line_start":256,"line_end":256,"column_start":5,"column_end":78}},{"value":"/           `AutoFinishEncoder`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40809,"byte_end":40843,"line_start":257,"line_end":257,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":41394,"byte_end":41404,"line_start":272,"line_end":272,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<Encoder>::try_finish","value":"pub fn try_finish(Self) -> Result<W, (Self, io::Error)>","parent":null,"children":[],"decl_id":null,"docs":" **Required**: Attempts to finish the stream.","sig":null,"attributes":[{"value":"/ **Required**: Attempts to finish the stream.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":40948,"byte_end":40996,"line_start":262,"line_end":262,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":41001,"byte_end":41004,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":41009,"byte_end":41082,"line_start":264,"line_end":264,"column_start":5,"column_end":78}},{"value":"/ this method or with [`finish(self)`](#method.finish).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":41087,"byte_end":41144,"line_start":265,"line_end":265,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":41149,"byte_end":41152,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ This returns the inner writer if the finish was successful, or the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":41157,"byte_end":41227,"line_start":267,"line_end":267,"column_start":5,"column_end":75}},{"value":"/ object plus an error if it wasn't.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":41232,"byte_end":41270,"line_start":268,"line_end":268,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":41275,"byte_end":41278,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ `write` on this object will panic after `try_finish` has been called,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":41283,"byte_end":41356,"line_start":270,"line_end":270,"column_start":5,"column_end":78}},{"value":"/ even if it fails.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":41361,"byte_end":41382,"line_start":271,"line_end":271,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":41842,"byte_end":41851,"line_start":284,"line_end":284,"column_start":12,"column_end":21},"name":"do_finish","qualname":"<Encoder>::do_finish","value":"pub fn do_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attemps to finish the stream.","sig":null,"attributes":[{"value":"/ Attemps to finish the stream.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":41649,"byte_end":41682,"line_start":280,"line_end":280,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":41687,"byte_end":41690,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":41695,"byte_end":41768,"line_start":282,"line_end":282,"column_start":5,"column_end":78}},{"value":"/ this method or with [`finish(self)`](#method.finish).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":41773,"byte_end":41830,"line_start":283,"line_end":283,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":42001,"byte_end":42023,"line_start":289,"line_end":289,"column_start":12,"column_end":34},"name":"recommended_input_size","qualname":"<Encoder>::recommended_input_size","value":"pub fn recommended_input_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return a recommendation for the size of data to write at once.\n","sig":null,"attributes":[{"value":"/ Return a recommendation for the size of data to write at once.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":41923,"byte_end":41989,"line_start":288,"line_end":288,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":42421,"byte_end":42424,"line_start":308,"line_end":308,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new(W) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":42383,"byte_end":42409,"line_start":307,"line_end":307,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":42721,"byte_end":42736,"line_start":316,"line_end":316,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder>::with_dictionary","value":"pub fn with_dictionary(W, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing dictionary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":42512,"byte_end":42568,"line_start":312,"line_end":312,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":42573,"byte_end":42576,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":42581,"byte_end":42636,"line_start":314,"line_end":314,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":42641,"byte_end":42709,"line_start":315,"line_end":315,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":43218,"byte_end":43242,"line_start":328,"line_end":328,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(W, &DecoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing prepared `DecoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing prepared `DecoderDictionary`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":42991,"byte_end":43065,"line_start":324,"line_end":324,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":43070,"byte_end":43073,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":43078,"byte_end":43133,"line_start":326,"line_end":326,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":43138,"byte_end":43206,"line_start":327,"line_end":327,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":43604,"byte_end":43611,"line_start":341,"line_end":341,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Decoder>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":43542,"byte_end":43592,"line_start":340,"line_end":340,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":43868,"byte_end":43875,"line_start":349,"line_end":349,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Decoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":43667,"byte_end":43725,"line_start":345,"line_end":345,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":43730,"byte_end":43733,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":43738,"byte_end":43810,"line_start":347,"line_end":347,"column_start":5,"column_end":77}},{"value":"/ this decoder is continued to be used.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":43815,"byte_end":43856,"line_start":348,"line_end":348,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":43985,"byte_end":43995,"line_start":354,"line_end":354,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Decoder>::into_inner","value":"pub fn into_inner(Self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner `Write`.\n","sig":null,"attributes":[{"value":"/ Returns the inner `Write`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":43943,"byte_end":43973,"line_start":353,"line_end":353,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":44133,"byte_end":44155,"line_start":359,"line_end":359,"column_start":12,"column_end":34},"name":"recommended_input_size","qualname":"<Decoder>::recommended_input_size","value":"pub fn recommended_input_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return a recommendation for the size of data to write at once.\n","sig":null,"attributes":[{"value":"/ Return a recommendation for the size of data to write at once.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":44055,"byte_end":44121,"line_start":358,"line_end":358,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":44399,"byte_end":44409,"line_start":368,"line_end":368,"column_start":12,"column_end":22},"name":"auto_flush","qualname":"<Decoder>::auto_flush","value":"pub fn auto_flush(Self) -> AutoFlushDecoder","parent":null,"children":[],"decl_id":null,"docs":" Returns a wrapper around `self` that will flush the stream on drop.","sig":null,"attributes":[{"value":"/ Returns a wrapper around `self` that will flush the stream on drop.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":44215,"byte_end":44286,"line_start":363,"line_end":363,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":44291,"byte_end":44294,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":44299,"byte_end":44310,"line_start":365,"line_end":365,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":44315,"byte_end":44318,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ Panics on drop if an error happens when flushing the stream.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":44323,"byte_end":44387,"line_start":367,"line_end":367,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":44681,"byte_end":44689,"line_start":377,"line_end":377,"column_start":12,"column_end":20},"name":"on_flush","qualname":"<Decoder>::on_flush","value":"pub fn on_flush<F: FnMut(io::Result<()>) -> ()>(Self, F) -> AutoFlushDecoder","parent":null,"children":[],"decl_id":null,"docs":" Returns a decoder that will flush the stream on drop.","sig":null,"attributes":[{"value":"/ Returns a decoder that will flush the stream on drop.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":44539,"byte_end":44596,"line_start":374,"line_end":374,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":44601,"byte_end":44604,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ Calls the given callback with the result from `flush()`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":44609,"byte_end":44669,"line_start":376,"line_end":376,"column_start":5,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":45551,"byte_end":45561,"line_start":8,"line_end":8,"column_start":8,"column_end":18},"name":"decode_all","qualname":"::stream::functions::decode_all","value":"pub fn decode_all<R: io::Read>(R) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompress from the given source as if using a `Decoder`.","sig":null,"attributes":[{"value":"/ Decompress from the given source as if using a `Decoder`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":45425,"byte_end":45486,"line_start":5,"line_end":5,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":45487,"byte_end":45490,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The input data must be in the zstd frame format.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":45491,"byte_end":45543,"line_start":7,"line_end":7,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":45831,"byte_end":45842,"line_start":17,"line_end":17,"column_start":8,"column_end":19},"name":"copy_decode","qualname":"::stream::functions::copy_decode","value":"pub fn copy_decode<R, W>(R, W) -> io::Result<()> where R: io::Read,\nW: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Decompress from the given source as if using a `Decoder`.","sig":null,"attributes":[{"value":"/ Decompress from the given source as if using a `Decoder`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":45701,"byte_end":45762,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":45763,"byte_end":45766,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Decompressed data will be appended to `destination`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":45767,"byte_end":45823,"line_start":16,"line_end":16,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":46233,"byte_end":46243,"line_start":32,"line_end":32,"column_start":8,"column_end":18},"name":"encode_all","qualname":"::stream::functions::encode_all","value":"pub fn encode_all<R: io::Read>(R, i32) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compress all data from the given source as if using an `Encoder`.","sig":null,"attributes":[{"value":"/ Compress all data from the given source as if using an `Encoder`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":46047,"byte_end":46116,"line_start":27,"line_end":27,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":46117,"byte_end":46120,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Result will be in the zstd frame format.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":46121,"byte_end":46165,"line_start":29,"line_end":29,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":46166,"byte_end":46169,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":46170,"byte_end":46225,"line_start":31,"line_end":31,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":354},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":46604,"byte_end":46615,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"copy_encode","qualname":"::stream::functions::copy_encode","value":"pub fn copy_encode<R, W>(R, W, i32) -> io::Result<()> where R: io::Read,\nW: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Compress all data from the given source as if using an `Encoder`.","sig":null,"attributes":[{"value":"/ Compress all data from the given source as if using an `Encoder`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":46408,"byte_end":46477,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":46478,"byte_end":46481,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Compressed data will be appended to `destination`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":46482,"byte_end":46536,"line_start":40,"line_end":40,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":46537,"byte_end":46540,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\functions.rs","byte_start":46541,"byte_end":46596,"line_start":42,"line_end":42,"column_start":1,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":357},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"zio","qualname":"::stream::zio","value":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\mod.rs","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":409},{"krate":0,"index":458},{"krate":0,"index":461}],"decl_id":null,"docs":" Wrappers around raw operations implementing `std::io::{Read, Write}`.\n","sig":null,"attributes":[{"value":"/ Wrappers around raw operations implementing `std::io::{Read, Write}`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\mod.rs","byte_start":46905,"byte_end":46978,"line_start":1,"line_end":1,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":47461,"byte_end":47467,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"Reader","qualname":"::stream::zio::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386}],"decl_id":null,"docs":" Implements the [`Read`] API around an [`Operation`].","sig":null,"attributes":[{"value":"/ Implements the [`Read`] API around an [`Operation`].","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":47194,"byte_end":47250,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":47251,"byte_end":47254,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This can be used to wrap a raw in-memory operation in a read-focused API.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":47255,"byte_end":47332,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":47333,"byte_end":47336,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ It can wrap either a compression or decompression operation, and pulls","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":47337,"byte_end":47411,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ input data from a wrapped `Read`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":47412,"byte_end":47449,"line_start":11,"line_end":11,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":47947,"byte_end":47950,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R, D>>::new","value":"pub fn new(R, D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Reader`.","sig":null,"attributes":[{"value":"/ Creates a new `Reader`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":47826,"byte_end":47853,"line_start":32,"line_end":32,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":47858,"byte_end":47861,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ `reader` will be used to pull input data for the given operation.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":47866,"byte_end":47935,"line_start":34,"line_end":34,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":48236,"byte_end":48252,"line_start":46,"line_end":46,"column_start":12,"column_end":28},"name":"set_single_frame","qualname":"<Reader<R, D>>::set_single_frame","value":"pub fn set_single_frame(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Sets `self` to stop after the first decoded frame.\n","sig":null,"attributes":[{"value":"/ Sets `self` to stop after the first decoded frame.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":48170,"byte_end":48224,"line_start":45,"line_end":45,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":48383,"byte_end":48396,"line_start":51,"line_end":51,"column_start":12,"column_end":25},"name":"operation_mut","qualname":"<Reader<R, D>>::operation_mut","value":"pub fn operation_mut(&mut Self) -> &mut D","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying operation.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying operation.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":48311,"byte_end":48371,"line_start":50,"line_end":50,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":48528,"byte_end":48538,"line_start":56,"line_end":56,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<Reader<R, D>>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying reader.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":48459,"byte_end":48516,"line_start":55,"line_end":55,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":48659,"byte_end":48665,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"reader","qualname":"<Reader<R, D>>::reader","value":"pub fn reader(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying reader.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":48598,"byte_end":48647,"line_start":60,"line_end":60,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":48754,"byte_end":48764,"line_start":66,"line_end":66,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R, D>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner reader.\n","sig":null,"attributes":[{"value":"/ Returns the inner reader.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":48713,"byte_end":48742,"line_start":65,"line_end":65,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":427},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":54693,"byte_end":54699,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Writer","qualname":"::stream::zio::writer::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435}],"decl_id":null,"docs":" Implements the [`Write`] API around an [`Operation`].","sig":null,"attributes":[{"value":"/ Implements the [`Write`] API around an [`Operation`].","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":54426,"byte_end":54483,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":54484,"byte_end":54487,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This can be used to wrap a raw in-memory operation in a write-focused API.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":54488,"byte_end":54566,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":54567,"byte_end":54570,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ It can be used with either compression or decompression, and forwards the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":54571,"byte_end":54648,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"/ output to a wrapped `Write`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":54649,"byte_end":54681,"line_start":12,"line_end":12,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":55144,"byte_end":55147,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Writer<W, D>>::new","value":"pub fn new(W, D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Writer`.","sig":null,"attributes":[{"value":"/ Creates a new `Writer`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":55022,"byte_end":55049,"line_start":32,"line_end":32,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":55054,"byte_end":55057,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ All output from the given operation will be forwarded to `writer`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":55062,"byte_end":55132,"line_start":34,"line_end":34,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":55790,"byte_end":55796,"line_start":58,"line_end":58,"column_start":12,"column_end":18},"name":"finish","qualname":"<Writer<W, D>>::finish","value":"pub fn finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Ends the stream.","sig":null,"attributes":[{"value":"/ Ends the stream.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":55456,"byte_end":55476,"line_start":49,"line_end":49,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":55481,"byte_end":55484,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This *must* be called after all data has been written to finish the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":55489,"byte_end":55560,"line_start":51,"line_end":51,"column_start":5,"column_end":76}},{"value":"/ stream.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":55565,"byte_end":55576,"line_start":52,"line_end":52,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":55581,"byte_end":55584,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ If you forget to call this and just drop the `Writer`, you *will* have","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":55589,"byte_end":55663,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ an incomplete output.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":55668,"byte_end":55693,"line_start":55,"line_end":55,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":55698,"byte_end":55701,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ Keep calling it until it returns `Ok(())`, then don't call it again.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":55706,"byte_end":55778,"line_start":57,"line_end":57,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":58429,"byte_end":58439,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Writer<W, D>>::into_inner","value":"pub fn into_inner(Self) -> (W, D)","parent":null,"children":[],"decl_id":null,"docs":" Return the wrapped `Writer` and `Operation`.","sig":null,"attributes":[{"value":"/ Return the wrapped `Writer` and `Operation`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":58252,"byte_end":58300,"line_start":130,"line_end":130,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":58305,"byte_end":58308,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ Careful: if you call this before calling [`Writer::finish()`], the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":58313,"byte_end":58383,"line_start":132,"line_end":132,"column_start":5,"column_end":75}},{"value":"/ output may be incomplete.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":58388,"byte_end":58417,"line_start":133,"line_end":133,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":58561,"byte_end":58567,"line_start":139,"line_end":139,"column_start":12,"column_end":18},"name":"writer","qualname":"<Writer<W, D>>::writer","value":"pub fn writer(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Gives a reference to the inner writer.\n","sig":null,"attributes":[{"value":"/ Gives a reference to the inner writer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":58507,"byte_end":58549,"line_start":138,"line_end":138,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":58677,"byte_end":58687,"line_start":144,"line_end":144,"column_start":12,"column_end":22},"name":"writer_mut","qualname":"<Writer<W, D>>::writer_mut","value":"pub fn writer_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Gives a mutable reference to the inner writer.\n","sig":null,"attributes":[{"value":"/ Gives a mutable reference to the inner writer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":58615,"byte_end":58665,"line_start":143,"line_end":143,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":58804,"byte_end":58813,"line_start":149,"line_end":149,"column_start":12,"column_end":21},"name":"operation","qualname":"<Writer<W, D>>::operation","value":"pub fn operation(&Self) -> &D","parent":null,"children":[],"decl_id":null,"docs":" Gives a reference to the inner operation.\n","sig":null,"attributes":[{"value":"/ Gives a reference to the inner operation.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":58747,"byte_end":58792,"line_start":148,"line_end":148,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":58929,"byte_end":58942,"line_start":154,"line_end":154,"column_start":12,"column_end":25},"name":"operation_mut","qualname":"<Writer<W, D>>::operation_mut","value":"pub fn operation_mut(&mut Self) -> &mut D","parent":null,"children":[],"decl_id":null,"docs":" Gives a mutable reference to the inner operation.\n","sig":null,"attributes":[{"value":"/ Gives a mutable reference to the inner operation.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":58864,"byte_end":58917,"line_start":153,"line_end":153,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"raw","qualname":"::stream::raw","value":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","parent":null,"children":[{"krate":0,"index":465},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":472},{"krate":0,"index":475},{"krate":0,"index":478},{"krate":0,"index":481},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":488},{"krate":0,"index":491},{"krate":0,"index":494},{"krate":0,"index":503},{"krate":0,"index":505},{"krate":0,"index":508},{"krate":0,"index":512},{"krate":0,"index":515},{"krate":0,"index":518},{"krate":0,"index":523},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":535},{"krate":0,"index":541}],"decl_id":null,"docs":" Raw in-memory stream compression/decompression.","sig":null,"attributes":[{"value":"/ Raw in-memory stream compression/decompression.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":62808,"byte_end":62859,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":62860,"byte_end":62863,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module defines a `Decoder` and an `Encoder` to decode/encode streams","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":62864,"byte_end":62941,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ of data using buffers.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":62942,"byte_end":62968,"line_start":4,"line_end":4,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":62969,"byte_end":62972,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ They are mostly thin wrappers around `zstd_safe::{DCtx, CCtx}`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":62973,"byte_end":63040,"line_start":6,"line_end":6,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63347,"byte_end":63356,"line_start":17,"line_end":17,"column_start":11,"column_end":20},"name":"Operation","qualname":"::stream::raw::Operation","value":"Operation","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":501}],"decl_id":null,"docs":" Represents an abstract compression/decompression operation.","sig":null,"attributes":[{"value":"/ Represents an abstract compression/decompression operation.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63217,"byte_end":63280,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63281,"byte_end":63284,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This trait covers both `Encoder` and `Decoder`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63285,"byte_end":63336,"line_start":16,"line_end":16,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63576,"byte_end":63579,"line_start":24,"line_end":24,"column_start":8,"column_end":11},"name":"run","qualname":"::stream::raw::Operation::run","value":"pub fn run<C: WriteBuf +\n?Sized>(&mut Self, &mut InBuffer, &mut OutBuffer<, C>) -> io::Result<usize>","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Performs a single step of this operation.","sig":null,"attributes":[{"value":"/ Performs a single step of this operation.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63363,"byte_end":63408,"line_start":18,"line_end":18,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63413,"byte_end":63416,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ Should return a hint for the next input size.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63421,"byte_end":63470,"line_start":20,"line_end":20,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63475,"byte_end":63478,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ If the result is `Ok(0)`, it may indicate that a frame was just","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63483,"byte_end":63550,"line_start":22,"line_end":22,"column_start":5,"column_end":72}},{"value":"/ finished.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63555,"byte_end":63568,"line_start":23,"line_end":23,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63914,"byte_end":63928,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"run_on_buffers","qualname":"::stream::raw::Operation::run_on_buffers","value":"pub fn run_on_buffers(&mut Self, &[u8], &mut [u8]) -> io::Result<Status>","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Performs a single step of this operation.","sig":null,"attributes":[{"value":"/ Performs a single step of this operation.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63728,"byte_end":63773,"line_start":30,"line_end":30,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63778,"byte_end":63781,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ This is a comvenience wrapper around `Operation::run` if you don't","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63786,"byte_end":63856,"line_start":32,"line_end":32,"column_start":5,"column_end":75}},{"value":"/ want to deal with `InBuffer`/`OutBuffer`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":63861,"byte_end":63906,"line_start":33,"line_end":33,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":64513,"byte_end":64518,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"flush","qualname":"::stream::raw::Operation::flush","value":"pub fn flush<C: WriteBuf + ?Sized>(&mut Self, &mut OutBuffer<, C>)\n-> io::Result<usize>","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Flushes any internal buffer, if any.","sig":null,"attributes":[{"value":"/ Flushes any internal buffer, if any.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":64334,"byte_end":64374,"line_start":51,"line_end":51,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":64379,"byte_end":64382,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes still in the buffer.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":64387,"byte_end":64439,"line_start":53,"line_end":53,"column_start":5,"column_end":57}},{"value":"/ To flush entirely, keep calling until it returns `Ok(0)`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":64444,"byte_end":64505,"line_start":54,"line_end":54,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":64802,"byte_end":64808,"line_start":66,"line_end":66,"column_start":8,"column_end":14},"name":"reinit","qualname":"::stream::raw::Operation::reinit","value":"pub fn reinit(&mut Self) -> io::Result<()>","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Prepares the operation for a new frame.","sig":null,"attributes":[{"value":"/ Prepares the operation for a new frame.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":64678,"byte_end":64721,"line_start":63,"line_end":63,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":64726,"byte_end":64729,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This is hopefully cheaper than creating a new operation.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":64734,"byte_end":64794,"line_start":65,"line_end":65,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":65107,"byte_end":65113,"line_start":76,"line_end":76,"column_start":8,"column_end":14},"name":"finish","qualname":"::stream::raw::Operation::finish","value":"pub fn finish<C: WriteBuf + ?Sized>(&mut Self, &mut OutBuffer<, C>, bool)\n-> io::Result<usize>","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Finishes the operation, writing any footer if necessary.","sig":null,"attributes":[{"value":"/ Finishes the operation, writing any footer if necessary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":64866,"byte_end":64926,"line_start":70,"line_end":70,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":64931,"byte_end":64934,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes still to write.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":64939,"byte_end":64986,"line_start":72,"line_end":72,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":64991,"byte_end":64994,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Keep calling this method until it returns `Ok(0)`,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":64999,"byte_end":65053,"line_start":74,"line_end":74,"column_start":5,"column_end":59}},{"value":"/ and then don't ever call this method.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":65058,"byte_end":65099,"line_start":75,"line_end":75,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":65406,"byte_end":65410,"line_start":88,"line_end":88,"column_start":12,"column_end":16},"name":"NoOp","qualname":"::stream::raw::NoOp","value":"","parent":null,"children":[],"decl_id":null,"docs":" Dummy operation that just copies its input to the output.\n","sig":null,"attributes":[{"value":"/ Dummy operation that just copies its input to the output.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":65333,"byte_end":65394,"line_start":87,"line_end":87,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66346,"byte_end":66352,"line_start":117,"line_end":117,"column_start":12,"column_end":18},"name":"Status","qualname":"::stream::raw::Status","value":"Status { remaining, bytes_read, bytes_written }","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511}],"decl_id":null,"docs":" Describes the result of an operation.\n","sig":null,"attributes":[{"value":"/ Describes the result of an operation.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66293,"byte_end":66334,"line_start":116,"line_end":116,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66449,"byte_end":66458,"line_start":121,"line_end":121,"column_start":9,"column_end":18},"name":"remaining","qualname":"::stream::raw::Status::remaining","value":"usize","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":" Number of bytes expected for next input.","sig":null,"attributes":[{"value":"/ Number of bytes expected for next input.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66359,"byte_end":66403,"line_start":118,"line_end":118,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66408,"byte_end":66411,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ This is just a hint.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66416,"byte_end":66440,"line_start":120,"line_end":120,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66521,"byte_end":66531,"line_start":124,"line_end":124,"column_start":9,"column_end":19},"name":"bytes_read","qualname":"::stream::raw::Status::bytes_read","value":"usize","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":" Number of bytes read from the input.\n","sig":null,"attributes":[{"value":"/ Number of bytes read from the input.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66472,"byte_end":66512,"line_start":123,"line_end":123,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66596,"byte_end":66609,"line_start":127,"line_end":127,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::stream::raw::Status::bytes_written","value":"usize","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":" Number of bytes written to the output.\n","sig":null,"attributes":[{"value":"/ Number of bytes written to the output.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66545,"byte_end":66587,"line_start":126,"line_end":126,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66678,"byte_end":66685,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::raw::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":514}],"decl_id":null,"docs":" An in-memory decoder for streams of data.\n","sig":null,"attributes":[{"value":"/ An in-memory decoder for streams of data.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66621,"byte_end":66666,"line_start":130,"line_end":130,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66795,"byte_end":66798,"line_start":137,"line_end":137,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new() -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66757,"byte_end":66783,"line_start":136,"line_end":136,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66945,"byte_end":66960,"line_start":142,"line_end":142,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder>::with_dictionary","value":"pub fn with_dictionary(&[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder initialized with the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder initialized with the given dictionary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66869,"byte_end":66933,"line_start":141,"line_end":141,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":67320,"byte_end":67344,"line_start":154,"line_end":154,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(&DecoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing `DecoderDictionary`.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing `DecoderDictionary`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":67243,"byte_end":67308,"line_start":153,"line_end":153,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":67713,"byte_end":67726,"line_start":168,"line_end":168,"column_start":12,"column_end":25},"name":"set_parameter","qualname":"<Decoder>::set_parameter","value":"pub fn set_parameter(&mut Self, DParameter) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a decompression parameter for this decoder.\n","sig":null,"attributes":[{"value":"/ Sets a decompression parameter for this decoder.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":67649,"byte_end":67701,"line_start":167,"line_end":167,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":68747,"byte_end":68754,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::raw::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":531}],"decl_id":null,"docs":" An in-memory encoder for streams of data.\n","sig":null,"attributes":[{"value":"/ An in-memory encoder for streams of data.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":68690,"byte_end":68735,"line_start":208,"line_end":208,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":68864,"byte_end":68867,"line_start":215,"line_end":215,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":68826,"byte_end":68852,"line_start":214,"line_end":214,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":69031,"byte_end":69046,"line_start":220,"line_end":220,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder>::with_dictionary","value":"pub fn with_dictionary(i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder initialized with the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder initialized with the given dictionary.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":68955,"byte_end":69019,"line_start":219,"line_end":219,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":69515,"byte_end":69539,"line_start":237,"line_end":237,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(&EncoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder using an existing `EncoderDictionary`.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder using an existing `EncoderDictionary`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":69439,"byte_end":69503,"line_start":236,"line_end":236,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":69906,"byte_end":69919,"line_start":251,"line_end":251,"column_start":12,"column_end":25},"name":"set_parameter","qualname":"<Encoder>::set_parameter","value":"pub fn set_parameter(&mut Self, CParameter) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a compression parameter for this encoder.\n","sig":null,"attributes":[{"value":"/ Sets a compression parameter for this encoder.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":69844,"byte_end":69894,"line_start":250,"line_end":250,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":70324,"byte_end":70344,"line_start":264,"line_end":264,"column_start":12,"column_end":32},"name":"set_pledged_src_size","qualname":"<Encoder>::set_pledged_src_size","value":"pub fn set_pledged_src_size(&mut Self, u64) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the size of the input expected by zstd.","sig":null,"attributes":[{"value":"/ Sets the size of the input expected by zstd.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":70098,"byte_end":70146,"line_start":258,"line_end":258,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":70151,"byte_end":70154,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ May affect compression ratio.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":70159,"byte_end":70192,"line_start":260,"line_end":260,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":70197,"byte_end":70200,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ It is an error to give an incorrect size (an error _will_ be returned when closing the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":70205,"byte_end":70295,"line_start":262,"line_end":262,"column_start":5,"column_end":95}},{"value":"/ stream).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":70300,"byte_end":70312,"line_start":263,"line_end":263,"column_start":5,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":583},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":937,"byte_end":960,"line_start":39,"line_end":39,"column_start":8,"column_end":31},"name":"compression_level_range","qualname":"::compression_level_range","value":"pub fn compression_level_range()\n-> std::ops::RangeInclusive<zstd_safe::CompressionLevel>","parent":null,"children":[],"decl_id":null,"docs":" The accepted range of compression levels.\n","sig":null,"attributes":[{"value":"/ The accepted range of compression levels.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":884,"byte_end":929,"line_start":38,"line_end":38,"column_start":1,"column_end":46}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4398,"byte_end":4408,"line_start":20,"line_end":20,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4963,"byte_end":4973,"line_start":39,"line_end":39,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":9217,"byte_end":9229,"line_start":16,"line_end":16,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":9643,"byte_end":9655,"line_start":32,"line_end":32,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":615},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":14423,"byte_end":14440,"line_start":33,"line_end":33,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":14728,"byte_end":14745,"line_start":44,"line_end":44,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":15482,"byte_end":15499,"line_start":69,"line_end":69,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":15770,"byte_end":15787,"line_start":80,"line_end":80,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":27684,"byte_end":27691,"line_start":24,"line_end":24,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":27950,"byte_end":27957,"line_start":33,"line_end":33,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":28534,"byte_end":28541,"line_start":48,"line_end":48,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":616},{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":30147,"byte_end":30154,"line_start":103,"line_end":103,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":30279,"byte_end":30286,"line_start":109,"line_end":109,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":30564,"byte_end":30571,"line_start":118,"line_end":118,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":31219,"byte_end":31226,"line_start":139,"line_end":139,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":32573,"byte_end":32580,"line_start":185,"line_end":185,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":35180,"byte_end":35196,"line_start":77,"line_end":77,"column_start":46,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":35895,"byte_end":35911,"line_start":101,"line_end":101,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":36254,"byte_end":36270,"line_start":115,"line_end":115,"column_start":52,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":36543,"byte_end":36560,"line_start":125,"line_end":125,"column_start":45,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":37292,"byte_end":37309,"line_start":149,"line_end":149,"column_start":50,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":37568,"byte_end":37585,"line_start":158,"line_end":158,"column_start":51,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":37829,"byte_end":37836,"line_start":168,"line_end":168,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":38698,"byte_end":38705,"line_start":195,"line_end":195,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":42147,"byte_end":42154,"line_start":296,"line_end":296,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":42357,"byte_end":42364,"line_start":306,"line_end":306,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":42970,"byte_end":42977,"line_start":323,"line_end":323,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":327},{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":44893,"byte_end":44900,"line_start":387,"line_end":387,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":47807,"byte_end":47813,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":49437,"byte_end":49443,"line_start":95,"line_end":95,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":54965,"byte_end":54971,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":59325,"byte_end":59331,"line_start":171,"line_end":171,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":65432,"byte_end":65436,"line_start":90,"line_end":90,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66734,"byte_end":66741,"line_start":135,"line_end":135,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":67225,"byte_end":67232,"line_start":152,"line_end":152,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":67922,"byte_end":67929,"line_start":176,"line_end":176,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":68803,"byte_end":68810,"line_start":213,"line_end":213,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":533},{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":69421,"byte_end":69428,"line_start":235,"line_end":235,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":539},{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":70581,"byte_end":70588,"line_start":275,"line_end":275,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":545},{"krate":0,"index":547},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":723,"byte_end":727,"line_start":27,"line_end":27,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":737,"byte_end":741,"line_start":28,"line_end":28,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":77}},{"kind":"Mod","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\lib.rs","byte_start":765,"byte_end":771,"line_start":31,"line_end":31,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":125}},{"kind":"Mod","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":19904,"byte_end":19908,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":126}},{"kind":"Mod","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":19918,"byte_end":19923,"line_start":10,"line_end":10,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":210}},{"kind":"Mod","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":19949,"byte_end":19952,"line_start":13,"line_end":13,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":357}},{"kind":"Mod","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\mod.rs","byte_start":19988,"byte_end":19991,"line_start":18,"line_end":18,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":464}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4398,"byte_end":4408,"line_start":20,"line_end":20,"column_start":6,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":598},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\compressor.rs","byte_start":4963,"byte_end":4973,"line_start":39,"line_end":39,"column_start":10,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":598},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":9217,"byte_end":9229,"line_start":16,"line_end":16,"column_start":6,"column_end":18},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":609},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\bulk\\decompressor.rs","byte_start":9643,"byte_end":9655,"line_start":32,"line_end":32,"column_start":10,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":609},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":14423,"byte_end":14440,"line_start":33,"line_end":33,"column_start":6,"column_end":23},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":101},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":14728,"byte_end":14745,"line_start":44,"line_end":44,"column_start":10,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":101},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":15482,"byte_end":15499,"line_start":69,"line_end":69,"column_start":6,"column_end":23},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\dict.rs","byte_start":15770,"byte_end":15787,"line_start":80,"line_end":80,"column_start":10,"column_end":27},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":27684,"byte_end":27691,"line_start":24,"line_end":24,"column_start":15,"column_end":22},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":27950,"byte_end":27957,"line_start":33,"line_end":33,"column_start":18,"column_end":25},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":28534,"byte_end":28541,"line_start":48,"line_end":48,"column_start":22,"column_end":29},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":30147,"byte_end":30154,"line_start":103,"line_end":103,"column_start":27,"column_end":34},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":157},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":30279,"byte_end":30286,"line_start":109,"line_end":109,"column_start":15,"column_end":22},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":30564,"byte_end":30571,"line_start":118,"line_end":118,"column_start":18,"column_end":25},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":31219,"byte_end":31226,"line_start":139,"line_end":139,"column_start":22,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\read\\mod.rs","byte_start":32573,"byte_end":32580,"line_start":185,"line_end":185,"column_start":27,"column_end":34},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":161},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":35180,"byte_end":35196,"line_start":77,"line_end":77,"column_start":46,"column_end":62},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":249},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":35895,"byte_end":35911,"line_start":101,"line_end":101,"column_start":21,"column_end":37},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":249},"to":{"krate":2,"index":3300}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":36254,"byte_end":36270,"line_start":115,"line_end":115,"column_start":52,"column_end":68},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":249},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":36543,"byte_end":36560,"line_start":125,"line_end":125,"column_start":45,"column_end":62},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":243},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":37292,"byte_end":37309,"line_start":149,"line_end":149,"column_start":50,"column_end":67},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":243},"to":{"krate":2,"index":3300}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":37568,"byte_end":37585,"line_start":158,"line_end":158,"column_start":51,"column_end":68},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":37829,"byte_end":37836,"line_start":168,"line_end":168,"column_start":16,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":38698,"byte_end":38705,"line_start":195,"line_end":195,"column_start":20,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":42147,"byte_end":42154,"line_start":296,"line_end":296,"column_start":30,"column_end":37},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":235},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":42357,"byte_end":42364,"line_start":306,"line_end":306,"column_start":16,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":239},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":42970,"byte_end":42977,"line_start":323,"line_end":323,"column_start":20,"column_end":27},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":239},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\write\\mod.rs","byte_start":44893,"byte_end":44900,"line_start":387,"line_end":387,"column_start":26,"column_end":33},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":239},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":47807,"byte_end":47813,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\reader.rs","byte_start":49437,"byte_end":49443,"line_start":95,"line_end":95,"column_start":21,"column_end":27},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":379},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":54965,"byte_end":54971,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":427},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\zio\\writer.rs","byte_start":59325,"byte_end":59331,"line_start":171,"line_end":171,"column_start":22,"column_end":28},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":427},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":65432,"byte_end":65436,"line_start":90,"line_end":90,"column_start":20,"column_end":24},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":503},"to":{"krate":0,"index":494}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":66734,"byte_end":66741,"line_start":135,"line_end":135,"column_start":6,"column_end":13},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":512},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":67225,"byte_end":67232,"line_start":152,"line_end":152,"column_start":10,"column_end":17},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":512},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":67922,"byte_end":67929,"line_start":176,"line_end":176,"column_start":20,"column_end":27},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":512},"to":{"krate":0,"index":494}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":68803,"byte_end":68810,"line_start":213,"line_end":213,"column_start":6,"column_end":13},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":529},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":69421,"byte_end":69428,"line_start":235,"line_end":235,"column_start":10,"column_end":17},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":529},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zstd-0.10.2+zstd.1.5.2\\src\\stream\\raw.rs","byte_start":70581,"byte_end":70588,"line_start":275,"line_end":275,"column_start":24,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":529},"to":{"krate":0,"index":494}}]}