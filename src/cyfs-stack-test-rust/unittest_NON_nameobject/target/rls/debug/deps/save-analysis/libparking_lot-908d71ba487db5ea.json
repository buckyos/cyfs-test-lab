{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1","program":"C:\\Users\\bucky\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","parking_lot","--edition=2018","C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=908d71ba487db5ea","-C","extra-filename=-908d71ba487db5ea","--out-dir","e:\\git_test\\cyfs-test-lab\\src\\cyfs-stack-test-rust\\unittest_NON_nameobject\\target\\rls\\debug\\deps","-L","dependency=e:\\git_test\\cyfs-test-lab\\src\\cyfs-stack-test-rust\\unittest_NON_nameobject\\target\\rls\\debug\\deps","--extern","lock_api=e:\\git_test\\cyfs-test-lab\\src\\cyfs-stack-test-rust\\unittest_NON_nameobject\\target\\rls\\debug\\deps\\liblock_api-a87331b6b9db9928.rmeta","--extern","parking_lot_core=e:\\git_test\\cyfs-test-lab\\src\\cyfs-stack-test-rust\\unittest_NON_nameobject\\target\\rls\\debug\\deps\\libparking_lot_core-36167d4e0cb7fac2.rmeta","--cap-lints","allow","-L","native=C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\windows_x86_64_msvc-0.36.1\\lib","--error-format=json","--sysroot","C:\\Users\\bucky\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"e:\\git_test\\cyfs-test-lab\\src\\cyfs-stack-test-rust\\unittest_NON_nameobject\\target\\rls\\debug\\deps\\libparking_lot-908d71ba487db5ea.rmeta"},"prelude":{"crate_id":{"name":"parking_lot","disambiguator":[16773540040621139900,0]},"crate_root":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src","external_crates":[{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","num":16,"id":{"name":"lock_api","disambiguator":[2157842252132152726,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","num":17,"id":{"name":"scopeguard","disambiguator":[14791793103096291185,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","num":18,"id":{"name":"parking_lot_core","disambiguator":[9796831600866457894,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","num":19,"id":{"name":"smallvec","disambiguator":[15543606612870660554,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","num":20,"id":{"name":"cfg_if","disambiguator":[17941200006019888196,0]}},{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","num":21,"id":{"name":"windows_sys","disambiguator":[5786223631017077,0]}}],"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":333,"byte_end":1976,"line_start":8,"line_end":56,"column_start":1,"column_end":20}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1303,"byte_end":1310,"line_start":41,"line_end":41,"column_start":25,"column_end":32},"alias_span":null,"name":"Condvar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1312,"byte_end":1329,"line_start":41,"line_end":41,"column_start":34,"column_end":51},"alias_span":null,"name":"WaitTimeoutResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1359,"byte_end":1375,"line_start":42,"line_end":42,"column_start":28,"column_end":44},"alias_span":null,"name":"const_fair_mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1377,"byte_end":1386,"line_start":42,"line_end":42,"column_start":46,"column_end":55},"alias_span":null,"name":"FairMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1388,"byte_end":1402,"line_start":42,"line_end":42,"column_start":57,"column_end":71},"alias_span":null,"name":"FairMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1404,"byte_end":1424,"line_start":42,"line_end":42,"column_start":73,"column_end":93},"alias_span":null,"name":"MappedFairMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1449,"byte_end":1460,"line_start":43,"line_end":43,"column_start":23,"column_end":34},"alias_span":null,"name":"const_mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1462,"byte_end":1478,"line_start":43,"line_end":43,"column_start":36,"column_end":52},"alias_span":null,"name":"MappedMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1480,"byte_end":1485,"line_start":43,"line_end":43,"column_start":54,"column_end":59},"alias_span":null,"name":"Mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1487,"byte_end":1497,"line_start":43,"line_end":43,"column_start":61,"column_end":71},"alias_span":null,"name":"MutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1521,"byte_end":1525,"line_start":44,"line_end":44,"column_start":22,"column_end":26},"alias_span":null,"name":"Once","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1527,"byte_end":1536,"line_start":44,"line_end":44,"column_start":28,"column_end":37},"alias_span":null,"name":"OnceState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1569,"byte_end":1581,"line_start":45,"line_end":45,"column_start":31,"column_end":43},"alias_span":null,"name":"RawFairMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1608,"byte_end":1616,"line_start":46,"line_end":46,"column_start":26,"column_end":34},"alias_span":null,"name":"RawMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1644,"byte_end":1653,"line_start":47,"line_end":47,"column_start":27,"column_end":36},"alias_span":null,"name":"RawRwLock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1684,"byte_end":1705,"line_start":49,"line_end":49,"column_start":5,"column_end":26},"alias_span":null,"name":"const_reentrant_mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1707,"byte_end":1732,"line_start":49,"line_end":49,"column_start":28,"column_end":53},"alias_span":null,"name":"MappedReentrantMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1734,"byte_end":1745,"line_start":49,"line_end":49,"column_start":55,"column_end":66},"alias_span":null,"name":"RawThreadId","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1734,"byte_end":1745,"line_start":49,"line_end":49,"column_start":55,"column_end":66},"alias_span":null,"name":"RawThreadId","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1747,"byte_end":1761,"line_start":49,"line_end":49,"column_start":68,"column_end":82},"alias_span":null,"name":"ReentrantMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1767,"byte_end":1786,"line_start":50,"line_end":50,"column_start":5,"column_end":24},"alias_span":null,"name":"ReentrantMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1819,"byte_end":1831,"line_start":53,"line_end":53,"column_start":5,"column_end":17},"alias_span":null,"name":"const_rwlock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1833,"byte_end":1854,"line_start":53,"line_end":53,"column_start":19,"column_end":40},"alias_span":null,"name":"MappedRwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1856,"byte_end":1878,"line_start":53,"line_end":53,"column_start":42,"column_end":64},"alias_span":null,"name":"MappedRwLockWriteGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1880,"byte_end":1886,"line_start":53,"line_end":53,"column_start":66,"column_end":72},"alias_span":null,"name":"RwLock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1888,"byte_end":1903,"line_start":53,"line_end":53,"column_start":74,"column_end":89},"alias_span":null,"name":"RwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1909,"byte_end":1934,"line_start":54,"line_end":54,"column_start":5,"column_end":30},"alias_span":null,"name":"RwLockUpgradableReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1936,"byte_end":1952,"line_start":54,"line_end":54,"column_start":32,"column_end":48},"alias_span":null,"name":"RwLockWriteGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":0},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":1967,"byte_end":1975,"line_start":56,"line_end":56,"column_start":11,"column_end":19},"alias_span":null,"name":"lock_api","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":333,"byte_end":1976,"line_start":8,"line_end":56,"column_start":1,"column_end":20},"name":"","qualname":"::","value":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":107},{"krate":0,"index":120},{"krate":0,"index":137},{"krate":0,"index":154},{"krate":0,"index":222},{"krate":0,"index":247},{"krate":0,"index":322},{"krate":0,"index":491},{"krate":0,"index":521},{"krate":0,"index":547},{"krate":0,"index":563},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":576},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":583},{"krate":0,"index":586},{"krate":0,"index":589},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":596},{"krate":0,"index":599},{"krate":0,"index":602},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":609},{"krate":0,"index":612},{"krate":0,"index":615},{"krate":0,"index":618},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":625},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":631},{"krate":0,"index":634},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":641},{"krate":0,"index":644},{"krate":0,"index":647},{"krate":0,"index":650},{"krate":0,"index":653},{"krate":0,"index":656},{"krate":0,"index":659}],"decl_id":null,"docs":" This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n `Once` that are smaller, faster and more flexible than those in the Rust\n standard library. It also provides a `ReentrantMutex` type.\n","sig":null,"attributes":[{"value":"/ This library provides implementations of `Mutex`, `RwLock`, `Condvar` and","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":333,"byte_end":410,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/ `Once` that are smaller, faster and more flexible than those in the Rust","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":411,"byte_end":487,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ standard library. It also provides a `ReentrantMutex` type.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":488,"byte_end":551,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":553,"byte_end":575,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\lib.rs","byte_start":576,"byte_end":602,"line_start":13,"line_end":13,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":2850,"byte_end":2867,"line_start":23,"line_end":23,"column_start":12,"column_end":29},"name":"WaitTimeoutResult","qualname":"::condvar::WaitTimeoutResult","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type indicating whether a timed wait on a condition variable returned\n due to a time out or not.\n","sig":null,"attributes":[{"value":"/ A type indicating whether a timed wait on a condition variable returned","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":2688,"byte_end":2763,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ due to a time out or not.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":2764,"byte_end":2793,"line_start":21,"line_end":21,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":2988,"byte_end":2997,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"name":"timed_out","qualname":"<WaitTimeoutResult>::timed_out","value":"pub fn timed_out(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the wait was known to have timed out.\n","sig":null,"attributes":[{"value":"/ Returns whether the wait was known to have timed out.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":2905,"byte_end":2962,"line_start":26,"line_end":26,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":2967,"byte_end":2976,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5350,"byte_end":5357,"line_start":90,"line_end":90,"column_start":12,"column_end":19},"name":"Condvar","qualname":"::condvar::Condvar","value":"Condvar {  }","parent":null,"children":[{"krate":0,"index":70}],"decl_id":null,"docs":" A Condition Variable","sig":null,"attributes":[{"value":"/ A Condition Variable","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3038,"byte_end":3062,"line_start":33,"line_end":33,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3063,"byte_end":3066,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Condition variables represent the ability to block a thread such that it","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3067,"byte_end":3143,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"/ consumes no CPU time while waiting for an event to occur. Condition","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3144,"byte_end":3215,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/ variables are typically associated with a boolean predicate (a condition)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3216,"byte_end":3293,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"/ and a mutex. The predicate is always verified inside of the mutex before","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3294,"byte_end":3370,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ determining that thread must block.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3371,"byte_end":3410,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3411,"byte_end":3414,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Note that this module places one additional restriction over the system","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3415,"byte_end":3490,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ condition variables: each condvar can be used with only one mutex at a","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3491,"byte_end":3565,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"/ time. Any attempt to use multiple mutexes on the same condition variable","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3566,"byte_end":3642,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/ simultaneously will result in a runtime panic. However it is possible to","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3643,"byte_end":3719,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ switch to a different mutex if there are no threads currently waiting on","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3720,"byte_end":3796,"line_start":45,"line_end":45,"column_start":1,"column_end":77}},{"value":"/ the condition variable.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3797,"byte_end":3824,"line_start":46,"line_end":46,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3825,"byte_end":3828,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Condvar`","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3829,"byte_end":3882,"line_start":48,"line_end":48,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3883,"byte_end":3886,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ - No spurious wakeups: A wait will only return a non-timeout result if it","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3887,"byte_end":3964,"line_start":50,"line_end":50,"column_start":1,"column_end":78}},{"value":"/   was woken up by `notify_one` or `notify_all`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":3965,"byte_end":4016,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/ - `Condvar::notify_all` will only wake up a single thread, the rest are","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4017,"byte_end":4092,"line_start":52,"line_end":52,"column_start":1,"column_end":76}},{"value":"/   requeued to wait for the `Mutex` to be unlocked by the thread that was","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4093,"byte_end":4169,"line_start":53,"line_end":53,"column_start":1,"column_end":77}},{"value":"/   woken up.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4170,"byte_end":4185,"line_start":54,"line_end":54,"column_start":1,"column_end":16}},{"value":"/ - Only requires 1 word of space, whereas the standard library boxes the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4186,"byte_end":4261,"line_start":55,"line_end":55,"column_start":1,"column_end":76}},{"value":"/   `Condvar` due to platform limitations.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4262,"byte_end":4306,"line_start":56,"line_end":56,"column_start":1,"column_end":45}},{"value":"/ - Can be statically constructed.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4307,"byte_end":4343,"line_start":57,"line_end":57,"column_start":1,"column_end":37}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4344,"byte_end":4394,"line_start":58,"line_end":58,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4395,"byte_end":4443,"line_start":59,"line_end":59,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4444,"byte_end":4447,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4448,"byte_end":4462,"line_start":61,"line_end":61,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4463,"byte_end":4466,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4467,"byte_end":4474,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::{Mutex, Condvar};","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4475,"byte_end":4513,"line_start":64,"line_end":64,"column_start":1,"column_end":39}},{"value":"/ use std::sync::Arc;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4514,"byte_end":4537,"line_start":65,"line_end":65,"column_start":1,"column_end":24}},{"value":"/ use std::thread;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4538,"byte_end":4558,"line_start":66,"line_end":66,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4559,"byte_end":4562,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ let pair = Arc::new((Mutex::new(false), Condvar::new()));","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4563,"byte_end":4624,"line_start":68,"line_end":68,"column_start":1,"column_end":62}},{"value":"/ let pair2 = pair.clone();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4625,"byte_end":4654,"line_start":69,"line_end":69,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4655,"byte_end":4658,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ // Inside of our lock, spawn a new thread, and then wait for it to start","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4659,"byte_end":4735,"line_start":71,"line_end":71,"column_start":1,"column_end":77}},{"value":"/ thread::spawn(move|| {","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4736,"byte_end":4762,"line_start":72,"line_end":72,"column_start":1,"column_end":27}},{"value":"/     let &(ref lock, ref cvar) = &*pair2;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4763,"byte_end":4807,"line_start":73,"line_end":73,"column_start":1,"column_end":45}},{"value":"/     let mut started = lock.lock();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4808,"byte_end":4846,"line_start":74,"line_end":74,"column_start":1,"column_end":39}},{"value":"/     *started = true;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4847,"byte_end":4871,"line_start":75,"line_end":75,"column_start":1,"column_end":25}},{"value":"/     cvar.notify_one();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4872,"byte_end":4898,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"/ });","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4899,"byte_end":4906,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4907,"byte_end":4910,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ // wait for the thread to start up","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4911,"byte_end":4949,"line_start":79,"line_end":79,"column_start":1,"column_end":39}},{"value":"/ let &(ref lock, ref cvar) = &*pair;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4950,"byte_end":4989,"line_start":80,"line_end":80,"column_start":1,"column_end":40}},{"value":"/ let mut started = lock.lock();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":4990,"byte_end":5024,"line_start":81,"line_end":81,"column_start":1,"column_end":35}},{"value":"/ if !*started {","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5025,"byte_end":5043,"line_start":82,"line_end":82,"column_start":1,"column_end":19}},{"value":"/     cvar.wait(&mut started);","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5044,"byte_end":5076,"line_start":83,"line_end":83,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5077,"byte_end":5082,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/ // Note that we used an if instead of a while loop above. This is only","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5083,"byte_end":5157,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/ // possible because parking_lot's Condvar will never spuriously wake up.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5158,"byte_end":5234,"line_start":86,"line_end":86,"column_start":1,"column_end":77}},{"value":"/ // This means that wait() will only return after notify_one or notify_all is","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5235,"byte_end":5315,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ // called.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5316,"byte_end":5330,"line_start":88,"line_end":88,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5331,"byte_end":5338,"line_start":89,"line_end":89,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5535,"byte_end":5538,"line_start":98,"line_end":98,"column_start":18,"column_end":21},"name":"new","qualname":"<Condvar>::new","value":"pub const fn new() -> Condvar","parent":null,"children":[],"decl_id":null,"docs":" Creates a new condition variable which is ready to be waited on and\n notified.\n","sig":null,"attributes":[{"value":"/ Creates a new condition variable which is ready to be waited on and","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5414,"byte_end":5485,"line_start":95,"line_end":95,"column_start":5,"column_end":76}},{"value":"/ notified.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5490,"byte_end":5503,"line_start":96,"line_end":96,"column_start":5,"column_end":18}},{"value":"inline","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5508,"byte_end":5517,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":6364,"byte_end":6374,"line_start":128,"line_end":128,"column_start":12,"column_end":22},"name":"notify_one","qualname":"<Condvar>::notify_one","value":"pub fn notify_one(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Wakes up one blocked thread on this condvar.","sig":null,"attributes":[{"value":"/ Wakes up one blocked thread on this condvar.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5645,"byte_end":5693,"line_start":104,"line_end":104,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5698,"byte_end":5701,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Returns whether a thread was woken up.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5706,"byte_end":5748,"line_start":106,"line_end":106,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5753,"byte_end":5756,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ If there is a blocked thread on this condition variable, then it will","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5761,"byte_end":5834,"line_start":108,"line_end":108,"column_start":5,"column_end":78}},{"value":"/ be woken up from its call to `wait` or `wait_timeout`. Calls to","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5839,"byte_end":5906,"line_start":109,"line_end":109,"column_start":5,"column_end":72}},{"value":"/ `notify_one` are not buffered in any way.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5911,"byte_end":5956,"line_start":110,"line_end":110,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5961,"byte_end":5964,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ To wake up all threads, see `notify_all()`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5969,"byte_end":6016,"line_start":112,"line_end":112,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":6021,"byte_end":6024,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":6029,"byte_end":6043,"line_start":114,"line_end":114,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":6048,"byte_end":6051,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":6056,"byte_end":6063,"line_start":116,"line_end":116,"column_start":5,"column_end":12}},{"value":"/ use parking_lot::Condvar;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":6068,"byte_end":6097,"line_start":117,"line_end":117,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":6102,"byte_end":6105,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ let condvar = Condvar::new();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":6110,"byte_end":6143,"line_start":119,"line_end":119,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":6148,"byte_end":6151,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ // do something with condvar, share it with other threads","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":6156,"byte_end":6217,"line_start":121,"line_end":121,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":6222,"byte_end":6225,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ if !condvar.notify_one() {","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":6230,"byte_end":6260,"line_start":123,"line_end":123,"column_start":5,"column_end":35}},{"value":"/     println!(\"Nobody was listening for this.\");","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":6265,"byte_end":6316,"line_start":124,"line_end":124,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":6321,"byte_end":6326,"line_start":125,"line_end":125,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":6331,"byte_end":6338,"line_start":126,"line_end":126,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":6343,"byte_end":6352,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":8810,"byte_end":8820,"line_start":187,"line_end":187,"column_start":12,"column_end":22},"name":"notify_all","qualname":"<Condvar>::notify_all","value":"pub fn notify_all(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Wakes up all blocked threads on this condvar.","sig":null,"attributes":[{"value":"/ Wakes up all blocked threads on this condvar.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":8443,"byte_end":8492,"line_start":177,"line_end":177,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":8497,"byte_end":8500,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Returns the number of threads woken up.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":8505,"byte_end":8548,"line_start":179,"line_end":179,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":8553,"byte_end":8556,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ This method will ensure that any current waiters on the condition","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":8561,"byte_end":8630,"line_start":181,"line_end":181,"column_start":5,"column_end":74}},{"value":"/ variable are awoken. Calls to `notify_all()` are not buffered in any","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":8635,"byte_end":8707,"line_start":182,"line_end":182,"column_start":5,"column_end":77}},{"value":"/ way.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":8712,"byte_end":8720,"line_start":183,"line_end":183,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":8725,"byte_end":8728,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ To wake up only one thread, see `notify_one()`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":8733,"byte_end":8784,"line_start":185,"line_end":185,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":8789,"byte_end":8798,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":11839,"byte_end":11843,"line_start":255,"line_end":255,"column_start":12,"column_end":16},"name":"wait","qualname":"<Condvar>::wait","value":"pub fn wait<T: ?Sized>(&Self, &mut MutexGuard<, T>)","parent":null,"children":[],"decl_id":null,"docs":" Blocks the current thread until this condition variable receives a\n notification.","sig":null,"attributes":[{"value":"/ Blocks the current thread until this condition variable receives a","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":11190,"byte_end":11260,"line_start":241,"line_end":241,"column_start":5,"column_end":75}},{"value":"/ notification.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":11265,"byte_end":11282,"line_start":242,"line_end":242,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":11287,"byte_end":11290,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ This function will atomically unlock the mutex specified (represented by","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":11295,"byte_end":11371,"line_start":244,"line_end":244,"column_start":5,"column_end":81}},{"value":"/ `mutex_guard`) and block the current thread. This means that any calls","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":11376,"byte_end":11450,"line_start":245,"line_end":245,"column_start":5,"column_end":79}},{"value":"/ to `notify_*()` which happen logically after the mutex is unlocked are","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":11455,"byte_end":11529,"line_start":246,"line_end":246,"column_start":5,"column_end":79}},{"value":"/ candidates to wake this thread up. When this function call returns, the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":11534,"byte_end":11609,"line_start":247,"line_end":247,"column_start":5,"column_end":80}},{"value":"/ lock specified will have been re-acquired.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":11614,"byte_end":11660,"line_start":248,"line_end":248,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":11665,"byte_end":11668,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":11673,"byte_end":11685,"line_start":250,"line_end":250,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":11690,"byte_end":11693,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ This function will panic if another thread is waiting on the `Condvar`","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":11698,"byte_end":11772,"line_start":252,"line_end":252,"column_start":5,"column_end":79}},{"value":"/ with a different `Mutex` object.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":11777,"byte_end":11813,"line_start":253,"line_end":253,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":11818,"byte_end":11827,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":13118,"byte_end":13128,"line_start":283,"line_end":283,"column_start":12,"column_end":22},"name":"wait_until","qualname":"<Condvar>::wait_until","value":"pub fn wait_until<T: ?Sized>(&Self, &mut MutexGuard<, T>, Instant)\n-> WaitTimeoutResult","parent":null,"children":[],"decl_id":null,"docs":" Waits on this condition variable for a notification, timing out after\n the specified time instant.","sig":null,"attributes":[{"value":"/ Waits on this condition variable for a notification, timing out after","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12001,"byte_end":12074,"line_start":259,"line_end":259,"column_start":5,"column_end":78}},{"value":"/ the specified time instant.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12079,"byte_end":12110,"line_start":260,"line_end":260,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12115,"byte_end":12118,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The semantics of this function are equivalent to `wait()` except that","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12123,"byte_end":12196,"line_start":262,"line_end":262,"column_start":5,"column_end":78}},{"value":"/ the thread will be blocked roughly until `timeout` is reached. This","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12201,"byte_end":12272,"line_start":263,"line_end":263,"column_start":5,"column_end":76}},{"value":"/ method should not be used for precise timing due to anomalies such as","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12277,"byte_end":12350,"line_start":264,"line_end":264,"column_start":5,"column_end":78}},{"value":"/ preemption or platform differences that may not cause the maximum","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12355,"byte_end":12424,"line_start":265,"line_end":265,"column_start":5,"column_end":74}},{"value":"/ amount of time waited to be precisely `timeout`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12429,"byte_end":12481,"line_start":266,"line_end":266,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12486,"byte_end":12489,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ Note that the best effort is made to ensure that the time waited is","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12494,"byte_end":12565,"line_start":268,"line_end":268,"column_start":5,"column_end":76}},{"value":"/ measured with a monotonic clock, and not affected by the changes made to","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12570,"byte_end":12646,"line_start":269,"line_end":269,"column_start":5,"column_end":81}},{"value":"/ the system time.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12651,"byte_end":12671,"line_start":270,"line_end":270,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12676,"byte_end":12679,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ The returned `WaitTimeoutResult` value indicates if the timeout is","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12684,"byte_end":12754,"line_start":272,"line_end":272,"column_start":5,"column_end":75}},{"value":"/ known to have elapsed.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12759,"byte_end":12785,"line_start":273,"line_end":273,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12790,"byte_end":12793,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ Like `wait`, the lock specified will be re-acquired when this function","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12798,"byte_end":12872,"line_start":275,"line_end":275,"column_start":5,"column_end":79}},{"value":"/ returns, regardless of whether the timeout elapsed or not.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12877,"byte_end":12939,"line_start":276,"line_end":276,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12944,"byte_end":12947,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12952,"byte_end":12964,"line_start":278,"line_end":278,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12969,"byte_end":12972,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ This function will panic if another thread is waiting on the `Condvar`","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":12977,"byte_end":13051,"line_start":280,"line_end":280,"column_start":5,"column_end":79}},{"value":"/ with a different `Mutex` object.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":13056,"byte_end":13092,"line_start":281,"line_end":281,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":13097,"byte_end":13106,"line_start":282,"line_end":282,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":17238,"byte_end":17246,"line_start":379,"line_end":379,"column_start":12,"column_end":20},"name":"wait_for","qualname":"<Condvar>::wait_for","value":"pub fn wait_for<T: ?Sized>(&Self, &mut MutexGuard<, T>, Duration)\n-> WaitTimeoutResult","parent":null,"children":[],"decl_id":null,"docs":" Waits on this condition variable for a notification, timing out after a\n specified duration.","sig":null,"attributes":[{"value":"/ Waits on this condition variable for a notification, timing out after a","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":16278,"byte_end":16353,"line_start":360,"line_end":360,"column_start":5,"column_end":80}},{"value":"/ specified duration.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":16358,"byte_end":16381,"line_start":361,"line_end":361,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":16386,"byte_end":16389,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ The semantics of this function are equivalent to `wait()` except that","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":16394,"byte_end":16467,"line_start":363,"line_end":363,"column_start":5,"column_end":78}},{"value":"/ the thread will be blocked for roughly no longer than `timeout`. This","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":16472,"byte_end":16545,"line_start":364,"line_end":364,"column_start":5,"column_end":78}},{"value":"/ method should not be used for precise timing due to anomalies such as","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":16550,"byte_end":16623,"line_start":365,"line_end":365,"column_start":5,"column_end":78}},{"value":"/ preemption or platform differences that may not cause the maximum","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":16628,"byte_end":16697,"line_start":366,"line_end":366,"column_start":5,"column_end":74}},{"value":"/ amount of time waited to be precisely `timeout`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":16702,"byte_end":16754,"line_start":367,"line_end":367,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":16759,"byte_end":16762,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ Note that the best effort is made to ensure that the time waited is","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":16767,"byte_end":16838,"line_start":369,"line_end":369,"column_start":5,"column_end":76}},{"value":"/ measured with a monotonic clock, and not affected by the changes made to","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":16843,"byte_end":16919,"line_start":370,"line_end":370,"column_start":5,"column_end":81}},{"value":"/ the system time.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":16924,"byte_end":16944,"line_start":371,"line_end":371,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":16949,"byte_end":16952,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ The returned `WaitTimeoutResult` value indicates if the timeout is","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":16957,"byte_end":17027,"line_start":373,"line_end":373,"column_start":5,"column_end":75}},{"value":"/ known to have elapsed.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":17032,"byte_end":17058,"line_start":374,"line_end":374,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":17063,"byte_end":17066,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ Like `wait`, the lock specified will be re-acquired when this function","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":17071,"byte_end":17145,"line_start":376,"line_end":376,"column_start":5,"column_end":79}},{"value":"/ returns, regardless of whether the timeout elapsed or not.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":17150,"byte_end":17212,"line_start":377,"line_end":377,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":17217,"byte_end":17226,"line_start":378,"line_end":378,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":19005,"byte_end":19015,"line_start":425,"line_end":425,"column_start":12,"column_end":22},"name":"wait_while","qualname":"<Condvar>::wait_while","value":"pub fn wait_while<T, F>(&Self, &mut MutexGuard<, T>, F) where T: ?Sized,\nF: FnMut(&mut T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Blocks the current thread until this condition variable receives a\n notification. If the provided condition evaluates to `false`, then the\n thread is no longer blocked and the operation is completed. If the\n condition evaluates to `true`, then the thread is blocked again and\n waits for another notification before repeating this process.","sig":null,"attributes":[{"value":"/ Blocks the current thread until this condition variable receives a","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18078,"byte_end":18148,"line_start":408,"line_end":408,"column_start":5,"column_end":75}},{"value":"/ notification. If the provided condition evaluates to `false`, then the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18153,"byte_end":18227,"line_start":409,"line_end":409,"column_start":5,"column_end":79}},{"value":"/ thread is no longer blocked and the operation is completed. If the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18232,"byte_end":18302,"line_start":410,"line_end":410,"column_start":5,"column_end":75}},{"value":"/ condition evaluates to `true`, then the thread is blocked again and","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18307,"byte_end":18378,"line_start":411,"line_end":411,"column_start":5,"column_end":76}},{"value":"/ waits for another notification before repeating this process.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18383,"byte_end":18448,"line_start":412,"line_end":412,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18453,"byte_end":18456,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ This function will atomically unlock the mutex specified (represented by","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18461,"byte_end":18537,"line_start":414,"line_end":414,"column_start":5,"column_end":81}},{"value":"/ `mutex_guard`) and block the current thread. This means that any calls","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18542,"byte_end":18616,"line_start":415,"line_end":415,"column_start":5,"column_end":79}},{"value":"/ to `notify_*()` which happen logically after the mutex is unlocked are","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18621,"byte_end":18695,"line_start":416,"line_end":416,"column_start":5,"column_end":79}},{"value":"/ candidates to wake this thread up. When this function call returns, the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18700,"byte_end":18775,"line_start":417,"line_end":417,"column_start":5,"column_end":80}},{"value":"/ lock specified will have been re-acquired.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18780,"byte_end":18826,"line_start":418,"line_end":418,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18831,"byte_end":18834,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18839,"byte_end":18851,"line_start":420,"line_end":420,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18856,"byte_end":18859,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ This function will panic if another thread is waiting on the `Condvar`","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18864,"byte_end":18938,"line_start":422,"line_end":422,"column_start":5,"column_end":79}},{"value":"/ with a different `Mutex` object.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18943,"byte_end":18979,"line_start":423,"line_end":423,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":18984,"byte_end":18993,"line_start":424,"line_end":424,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20633,"byte_end":20649,"line_start":461,"line_end":461,"column_start":12,"column_end":28},"name":"wait_while_until","qualname":"<Condvar>::wait_while_until","value":"pub fn wait_while_until<T, F>(&Self, &mut MutexGuard<, T>, F, Instant)\n-> WaitTimeoutResult where T: ?Sized, F: FnMut(&mut T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Waits on this condition variable for a notification, timing out after\n the specified time instant. If the provided condition evaluates to\n `false`, then the thread is no longer blocked and the operation is\n completed. If the condition evaluates to `true`, then the thread is\n blocked again and waits for another notification before repeating\n this process.","sig":null,"attributes":[{"value":"/ Waits on this condition variable for a notification, timing out after","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":19230,"byte_end":19303,"line_start":433,"line_end":433,"column_start":5,"column_end":78}},{"value":"/ the specified time instant. If the provided condition evaluates to","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":19308,"byte_end":19378,"line_start":434,"line_end":434,"column_start":5,"column_end":75}},{"value":"/ `false`, then the thread is no longer blocked and the operation is","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":19383,"byte_end":19453,"line_start":435,"line_end":435,"column_start":5,"column_end":75}},{"value":"/ completed. If the condition evaluates to `true`, then the thread is","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":19458,"byte_end":19529,"line_start":436,"line_end":436,"column_start":5,"column_end":76}},{"value":"/ blocked again and waits for another notification before repeating","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":19534,"byte_end":19603,"line_start":437,"line_end":437,"column_start":5,"column_end":74}},{"value":"/ this process.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":19608,"byte_end":19625,"line_start":438,"line_end":438,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":19630,"byte_end":19633,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ The semantics of this function are equivalent to `wait()` except that","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":19638,"byte_end":19711,"line_start":440,"line_end":440,"column_start":5,"column_end":78}},{"value":"/ the thread will be blocked roughly until `timeout` is reached. This","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":19716,"byte_end":19787,"line_start":441,"line_end":441,"column_start":5,"column_end":76}},{"value":"/ method should not be used for precise timing due to anomalies such as","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":19792,"byte_end":19865,"line_start":442,"line_end":442,"column_start":5,"column_end":78}},{"value":"/ preemption or platform differences that may not cause the maximum","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":19870,"byte_end":19939,"line_start":443,"line_end":443,"column_start":5,"column_end":74}},{"value":"/ amount of time waited to be precisely `timeout`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":19944,"byte_end":19996,"line_start":444,"line_end":444,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20001,"byte_end":20004,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ Note that the best effort is made to ensure that the time waited is","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20009,"byte_end":20080,"line_start":446,"line_end":446,"column_start":5,"column_end":76}},{"value":"/ measured with a monotonic clock, and not affected by the changes made to","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20085,"byte_end":20161,"line_start":447,"line_end":447,"column_start":5,"column_end":81}},{"value":"/ the system time.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20166,"byte_end":20186,"line_start":448,"line_end":448,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20191,"byte_end":20194,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ The returned `WaitTimeoutResult` value indicates if the timeout is","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20199,"byte_end":20269,"line_start":450,"line_end":450,"column_start":5,"column_end":75}},{"value":"/ known to have elapsed.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20274,"byte_end":20300,"line_start":451,"line_end":451,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20305,"byte_end":20308,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ Like `wait`, the lock specified will be re-acquired when this function","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20313,"byte_end":20387,"line_start":453,"line_end":453,"column_start":5,"column_end":79}},{"value":"/ returns, regardless of whether the timeout elapsed or not.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20392,"byte_end":20454,"line_start":454,"line_end":454,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20459,"byte_end":20462,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20467,"byte_end":20479,"line_start":456,"line_end":456,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20484,"byte_end":20487,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ This function will panic if another thread is waiting on the `Condvar`","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20492,"byte_end":20566,"line_start":458,"line_end":458,"column_start":5,"column_end":79}},{"value":"/ with a different `Mutex` object.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20571,"byte_end":20607,"line_start":459,"line_end":459,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20612,"byte_end":20621,"line_start":460,"line_end":460,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":22188,"byte_end":22202,"line_start":496,"line_end":496,"column_start":12,"column_end":26},"name":"wait_while_for","qualname":"<Condvar>::wait_while_for","value":"pub fn wait_while_for<T: ?Sized, F>(&Self, &mut MutexGuard<, T>, F, Duration)\n-> WaitTimeoutResult where F: FnMut(&mut T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Waits on this condition variable for a notification, timing out after a\n specified duration. If the provided condition evaluates to `false`,\n then the thread is no longer blocked and the operation is completed.\n If the condition evaluates to `true`, then the thread is blocked again\n and waits for another notification before repeating this process.","sig":null,"attributes":[{"value":"/ Waits on this condition variable for a notification, timing out after a","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":20950,"byte_end":21025,"line_start":474,"line_end":474,"column_start":5,"column_end":80}},{"value":"/ specified duration. If the provided condition evaluates to `false`,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21030,"byte_end":21101,"line_start":475,"line_end":475,"column_start":5,"column_end":76}},{"value":"/ then the thread is no longer blocked and the operation is completed.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21106,"byte_end":21178,"line_start":476,"line_end":476,"column_start":5,"column_end":77}},{"value":"/ If the condition evaluates to `true`, then the thread is blocked again","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21183,"byte_end":21257,"line_start":477,"line_end":477,"column_start":5,"column_end":79}},{"value":"/ and waits for another notification before repeating this process.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21262,"byte_end":21331,"line_start":478,"line_end":478,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21336,"byte_end":21339,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ The semantics of this function are equivalent to `wait()` except that","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21344,"byte_end":21417,"line_start":480,"line_end":480,"column_start":5,"column_end":78}},{"value":"/ the thread will be blocked for roughly no longer than `timeout`. This","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21422,"byte_end":21495,"line_start":481,"line_end":481,"column_start":5,"column_end":78}},{"value":"/ method should not be used for precise timing due to anomalies such as","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21500,"byte_end":21573,"line_start":482,"line_end":482,"column_start":5,"column_end":78}},{"value":"/ preemption or platform differences that may not cause the maximum","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21578,"byte_end":21647,"line_start":483,"line_end":483,"column_start":5,"column_end":74}},{"value":"/ amount of time waited to be precisely `timeout`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21652,"byte_end":21704,"line_start":484,"line_end":484,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21709,"byte_end":21712,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ Note that the best effort is made to ensure that the time waited is","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21717,"byte_end":21788,"line_start":486,"line_end":486,"column_start":5,"column_end":76}},{"value":"/ measured with a monotonic clock, and not affected by the changes made to","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21793,"byte_end":21869,"line_start":487,"line_end":487,"column_start":5,"column_end":81}},{"value":"/ the system time.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21874,"byte_end":21894,"line_start":488,"line_end":488,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21899,"byte_end":21902,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ The returned `WaitTimeoutResult` value indicates if the timeout is","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21907,"byte_end":21977,"line_start":490,"line_end":490,"column_start":5,"column_end":75}},{"value":"/ known to have elapsed.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":21982,"byte_end":22008,"line_start":491,"line_end":491,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":22013,"byte_end":22016,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ Like `wait`, the lock specified will be re-acquired when this function","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":22021,"byte_end":22095,"line_start":493,"line_end":493,"column_start":5,"column_end":79}},{"value":"/ returns, regardless of whether the timeout elapsed or not.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":22100,"byte_end":22162,"line_start":494,"line_end":494,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":22167,"byte_end":22176,"line_start":495,"line_end":495,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\elision.rs","byte_start":45846,"byte_end":45853,"line_start":14,"line_end":14,"column_start":10,"column_end":17},"name":"IntType","qualname":"::elision::AtomicElisionExt::IntType","value":"type IntType;","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51901,"byte_end":51910,"line_start":78,"line_end":78,"column_start":10,"column_end":19},"name":"FairMutex","qualname":"::fair_mutex::FairMutex","value":"lock_api::Mutex<RawFairMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutual exclusive primitive that is always fair, useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusive primitive that is always fair, useful for protecting shared data","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":49082,"byte_end":49169,"line_start":11,"line_end":11,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":49170,"byte_end":49173,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":49174,"byte_end":49253,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ mutex can be statically initialized or created by the `new`","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":49254,"byte_end":49317,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":49318,"byte_end":49397,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":49398,"byte_end":49473,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":49474,"byte_end":49553,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":49554,"byte_end":49597,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":49598,"byte_end":49601,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The regular mutex provided by `parking_lot` uses eventual fairness","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":49602,"byte_end":49672,"line_start":20,"line_end":20,"column_start":1,"column_end":71}},{"value":"/ (after some time it will default to the fair algorithm), but eventual","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":49673,"byte_end":49746,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ fairness does not provide the same guarantees an always fair method would.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":49747,"byte_end":49825,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ Fair mutexes are generally slower, but sometimes needed.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":49826,"byte_end":49886,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":49887,"byte_end":49890,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ In a fair mutex the waiters form a queue, and the lock is always granted to","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":49891,"byte_end":49970,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ the next requester in the queue, in first-in first-out order. This ensures","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":49971,"byte_end":50049,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ that one thread cannot starve others by quickly re-acquiring the lock after","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50050,"byte_end":50129,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/ releasing it.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50130,"byte_end":50147,"line_start":28,"line_end":28,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50148,"byte_end":50151,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ A fair mutex may not be interesting if threads have different priorities (this is known as","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50152,"byte_end":50246,"line_start":30,"line_end":30,"column_start":1,"column_end":95}},{"value":"/ priority inversion).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50247,"byte_end":50271,"line_start":31,"line_end":31,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50272,"byte_end":50275,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Mutex`","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50276,"byte_end":50327,"line_start":33,"line_end":33,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50328,"byte_end":50331,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ - No poisoning, the lock is released normally on panic.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50332,"byte_end":50391,"line_start":35,"line_end":35,"column_start":1,"column_end":60}},{"value":"/ - Only requires 1 byte of space, whereas the standard library boxes the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50392,"byte_end":50467,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/   `FairMutex` due to platform limitations.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50468,"byte_end":50514,"line_start":37,"line_end":37,"column_start":1,"column_end":47}},{"value":"/ - Can be statically constructed.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50515,"byte_end":50551,"line_start":38,"line_end":38,"column_start":1,"column_end":37}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50552,"byte_end":50602,"line_start":39,"line_end":39,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50603,"byte_end":50651,"line_start":40,"line_end":40,"column_start":1,"column_end":49}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50652,"byte_end":50721,"line_start":41,"line_end":41,"column_start":1,"column_end":70}},{"value":"/ - Allows raw locking & unlocking without a guard.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50722,"byte_end":50775,"line_start":42,"line_end":42,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50776,"byte_end":50779,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50780,"byte_end":50794,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50795,"byte_end":50798,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50799,"byte_end":50806,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::FairMutex;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50807,"byte_end":50838,"line_start":47,"line_end":47,"column_start":1,"column_end":32}},{"value":"/ use std::sync::{Arc, mpsc::channel};","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50839,"byte_end":50879,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/ use std::thread;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50880,"byte_end":50900,"line_start":49,"line_end":49,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50901,"byte_end":50904,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ const N: usize = 10;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50905,"byte_end":50929,"line_start":51,"line_end":51,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50930,"byte_end":50933,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // Spawn a few threads to increment a shared variable (non-atomically), and","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":50934,"byte_end":51013,"line_start":53,"line_end":53,"column_start":1,"column_end":80}},{"value":"/ // let the main thread know once all increments are done.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51014,"byte_end":51075,"line_start":54,"line_end":54,"column_start":1,"column_end":62}},{"value":"/ //","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51076,"byte_end":51082,"line_start":55,"line_end":55,"column_start":1,"column_end":7}},{"value":"/ // Here we're using an Arc to share memory among threads, and the data inside","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51083,"byte_end":51164,"line_start":56,"line_end":56,"column_start":1,"column_end":82}},{"value":"/ // the Arc is protected with a mutex.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51165,"byte_end":51206,"line_start":57,"line_end":57,"column_start":1,"column_end":42}},{"value":"/ let data = Arc::new(FairMutex::new(0));","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51207,"byte_end":51250,"line_start":58,"line_end":58,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51251,"byte_end":51254,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ let (tx, rx) = channel();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51255,"byte_end":51284,"line_start":60,"line_end":60,"column_start":1,"column_end":30}},{"value":"/ for _ in 0..10 {","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51285,"byte_end":51305,"line_start":61,"line_end":61,"column_start":1,"column_end":21}},{"value":"/     let (data, tx) = (Arc::clone(&data), tx.clone());","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51306,"byte_end":51363,"line_start":62,"line_end":62,"column_start":1,"column_end":58}},{"value":"/     thread::spawn(move || {","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51364,"byte_end":51395,"line_start":63,"line_end":63,"column_start":1,"column_end":32}},{"value":"/         // The shared state can only be accessed once the lock is held.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51396,"byte_end":51471,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/         // Our non-atomic increment is safe because we're the only thread","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51472,"byte_end":51549,"line_start":65,"line_end":65,"column_start":1,"column_end":78}},{"value":"/         // which can access the shared state when the lock is held.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51550,"byte_end":51621,"line_start":66,"line_end":66,"column_start":1,"column_end":72}},{"value":"/         let mut data = data.lock();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51622,"byte_end":51661,"line_start":67,"line_end":67,"column_start":1,"column_end":40}},{"value":"/         *data += 1;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51662,"byte_end":51685,"line_start":68,"line_end":68,"column_start":1,"column_end":24}},{"value":"/         if *data == N {","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51686,"byte_end":51713,"line_start":69,"line_end":69,"column_start":1,"column_end":28}},{"value":"/             tx.send(()).unwrap();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51714,"byte_end":51751,"line_start":70,"line_end":70,"column_start":1,"column_end":38}},{"value":"/         }","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51752,"byte_end":51765,"line_start":71,"line_end":71,"column_start":1,"column_end":14}},{"value":"/         // the lock is unlocked here when `data` goes out of scope.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51766,"byte_end":51837,"line_start":72,"line_end":72,"column_start":1,"column_end":72}},{"value":"/     });","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51838,"byte_end":51849,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51850,"byte_end":51855,"line_start":74,"line_end":74,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51856,"byte_end":51859,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ rx.recv().unwrap();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51860,"byte_end":51883,"line_start":76,"line_end":76,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51884,"byte_end":51891,"line_start":77,"line_end":77,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52109,"byte_end":52125,"line_start":83,"line_end":83,"column_start":14,"column_end":30},"name":"const_fair_mutex","qualname":"::fair_mutex::const_fair_mutex","value":"pub const fn const_fair_mutex<T>(T) -> FairMutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new fair mutex in an unlocked state ready for use.","sig":null,"attributes":[{"value":"/ Creates a new fair mutex in an unlocked state ready for use.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":51951,"byte_end":52015,"line_start":80,"line_end":80,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52016,"byte_end":52019,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This allows creating a fair mutex in a constant context on stable Rust.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52020,"byte_end":52095,"line_start":82,"line_end":82,"column_start":1,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52510,"byte_end":52524,"line_start":92,"line_end":92,"column_start":10,"column_end":24},"name":"FairMutexGuard","qualname":"::fair_mutex::FairMutexGuard","value":"lock_api::MutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52232,"byte_end":52312,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52313,"byte_end":52373,"line_start":88,"line_end":88,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52374,"byte_end":52377,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52378,"byte_end":52456,"line_start":90,"line_end":90,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52457,"byte_end":52500,"line_start":91,"line_end":91,"column_start":1,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52964,"byte_end":52984,"line_start":101,"line_end":101,"column_start":10,"column_end":30},"name":"MappedFairMutexGuard","qualname":"::fair_mutex::MappedFairMutexGuard","value":"lock_api::MappedMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52578,"byte_end":52657,"line_start":94,"line_end":94,"column_start":1,"column_end":80}},{"value":"/ subfield of the protected data.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52658,"byte_end":52693,"line_start":95,"line_end":95,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52694,"byte_end":52697,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedFairMutexGuard` and `FairMutexGuard` is that the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52698,"byte_end":52785,"line_start":97,"line_end":97,"column_start":1,"column_end":88}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52786,"byte_end":52861,"line_start":98,"line_end":98,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52862,"byte_end":52942,"line_start":99,"line_end":99,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\fair_mutex.rs","byte_start":52943,"byte_end":52954,"line_start":100,"line_end":100,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61233,"byte_end":61238,"line_start":87,"line_end":87,"column_start":10,"column_end":15},"name":"Mutex","qualname":"::mutex::Mutex","value":"lock_api::Mutex<RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":57904,"byte_end":57970,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":57971,"byte_end":57974,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":57975,"byte_end":58054,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ mutex can be statically initialized or created by the `new`","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58055,"byte_end":58118,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58119,"byte_end":58198,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58199,"byte_end":58274,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58275,"byte_end":58354,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58355,"byte_end":58398,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58399,"byte_end":58402,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Fairness","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58403,"byte_end":58417,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58418,"byte_end":58421,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ A typical unfair lock can often end up in a situation where a single thread","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58422,"byte_end":58501,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/ quickly acquires and releases the same mutex in succession, which can starve","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58502,"byte_end":58582,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ other threads waiting to acquire the mutex. While this improves throughput","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58583,"byte_end":58661,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ because it doesn't force a context switch when a thread tries to re-acquire","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58662,"byte_end":58741,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ a mutex it has just released, this can starve other threads.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58742,"byte_end":58806,"line_start":26,"line_end":26,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58807,"byte_end":58810,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ This mutex uses [eventual fairness](https://trac.webkit.org/changeset/203350)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58811,"byte_end":58892,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/ to ensure that the lock will be fair on average without sacrificing","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58893,"byte_end":58964,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/ throughput. This is done by forcing a fair unlock on average every 0.5ms,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":58965,"byte_end":59042,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ which will force the lock to go to the next thread waiting for the mutex.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59043,"byte_end":59120,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59121,"byte_end":59124,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Additionally, any critical section longer than 1ms will always use a fair","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59125,"byte_end":59202,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ unlock, which has a negligible impact on throughput considering the length","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59203,"byte_end":59281,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ of the critical section.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59282,"byte_end":59310,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59311,"byte_end":59314,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ You can also force a fair unlock by calling `MutexGuard::unlock_fair` when","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59315,"byte_end":59393,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ unlocking a mutex instead of simply dropping the `MutexGuard`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59394,"byte_end":59460,"line_start":38,"line_end":38,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59461,"byte_end":59464,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Mutex`","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59465,"byte_end":59516,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59517,"byte_end":59520,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ - No poisoning, the lock is released normally on panic.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59521,"byte_end":59580,"line_start":42,"line_end":42,"column_start":1,"column_end":60}},{"value":"/ - Only requires 1 byte of space, whereas the standard library boxes the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59581,"byte_end":59656,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/   `Mutex` due to platform limitations.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59657,"byte_end":59699,"line_start":44,"line_end":44,"column_start":1,"column_end":43}},{"value":"/ - Can be statically constructed.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59700,"byte_end":59736,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59737,"byte_end":59787,"line_start":46,"line_end":46,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59788,"byte_end":59836,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59837,"byte_end":59906,"line_start":48,"line_end":48,"column_start":1,"column_end":70}},{"value":"/ - Allows raw locking & unlocking without a guard.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59907,"byte_end":59960,"line_start":49,"line_end":49,"column_start":1,"column_end":54}},{"value":"/ - Supports eventual fairness so that the mutex is fair on average.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":59961,"byte_end":60031,"line_start":50,"line_end":50,"column_start":1,"column_end":71}},{"value":"/ - Optionally allows making the mutex fair by calling `MutexGuard::unlock_fair`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60032,"byte_end":60115,"line_start":51,"line_end":51,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60116,"byte_end":60119,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60120,"byte_end":60134,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60135,"byte_end":60138,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60139,"byte_end":60146,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::Mutex;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60147,"byte_end":60174,"line_start":56,"line_end":56,"column_start":1,"column_end":28}},{"value":"/ use std::sync::{Arc, mpsc::channel};","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60175,"byte_end":60215,"line_start":57,"line_end":57,"column_start":1,"column_end":41}},{"value":"/ use std::thread;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60216,"byte_end":60236,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60237,"byte_end":60240,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ const N: usize = 10;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60241,"byte_end":60265,"line_start":60,"line_end":60,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60266,"byte_end":60269,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ // Spawn a few threads to increment a shared variable (non-atomically), and","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60270,"byte_end":60349,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/ // let the main thread know once all increments are done.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60350,"byte_end":60411,"line_start":63,"line_end":63,"column_start":1,"column_end":62}},{"value":"/ //","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60412,"byte_end":60418,"line_start":64,"line_end":64,"column_start":1,"column_end":7}},{"value":"/ // Here we're using an Arc to share memory among threads, and the data inside","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60419,"byte_end":60500,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/ // the Arc is protected with a mutex.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60501,"byte_end":60542,"line_start":66,"line_end":66,"column_start":1,"column_end":42}},{"value":"/ let data = Arc::new(Mutex::new(0));","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60543,"byte_end":60582,"line_start":67,"line_end":67,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60583,"byte_end":60586,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let (tx, rx) = channel();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60587,"byte_end":60616,"line_start":69,"line_end":69,"column_start":1,"column_end":30}},{"value":"/ for _ in 0..10 {","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60617,"byte_end":60637,"line_start":70,"line_end":70,"column_start":1,"column_end":21}},{"value":"/     let (data, tx) = (Arc::clone(&data), tx.clone());","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60638,"byte_end":60695,"line_start":71,"line_end":71,"column_start":1,"column_end":58}},{"value":"/     thread::spawn(move || {","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60696,"byte_end":60727,"line_start":72,"line_end":72,"column_start":1,"column_end":32}},{"value":"/         // The shared state can only be accessed once the lock is held.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60728,"byte_end":60803,"line_start":73,"line_end":73,"column_start":1,"column_end":76}},{"value":"/         // Our non-atomic increment is safe because we're the only thread","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60804,"byte_end":60881,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/         // which can access the shared state when the lock is held.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60882,"byte_end":60953,"line_start":75,"line_end":75,"column_start":1,"column_end":72}},{"value":"/         let mut data = data.lock();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60954,"byte_end":60993,"line_start":76,"line_end":76,"column_start":1,"column_end":40}},{"value":"/         *data += 1;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":60994,"byte_end":61017,"line_start":77,"line_end":77,"column_start":1,"column_end":24}},{"value":"/         if *data == N {","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61018,"byte_end":61045,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/             tx.send(()).unwrap();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61046,"byte_end":61083,"line_start":79,"line_end":79,"column_start":1,"column_end":38}},{"value":"/         }","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61084,"byte_end":61097,"line_start":80,"line_end":80,"column_start":1,"column_end":14}},{"value":"/         // the lock is unlocked here when `data` goes out of scope.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61098,"byte_end":61169,"line_start":81,"line_end":81,"column_start":1,"column_end":72}},{"value":"/     });","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61170,"byte_end":61181,"line_start":82,"line_end":82,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61182,"byte_end":61187,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61188,"byte_end":61191,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ rx.recv().unwrap();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61192,"byte_end":61215,"line_start":85,"line_end":85,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61216,"byte_end":61223,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61423,"byte_end":61434,"line_start":92,"line_end":92,"column_start":14,"column_end":25},"name":"const_mutex","qualname":"::mutex::const_mutex","value":"pub const fn const_mutex<T>(T) -> Mutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.","sig":null,"attributes":[{"value":"/ Creates a new mutex in an unlocked state ready for use.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61275,"byte_end":61334,"line_start":89,"line_end":89,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61335,"byte_end":61338,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ This allows creating a mutex in a constant context on stable Rust.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61339,"byte_end":61409,"line_start":91,"line_end":91,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61807,"byte_end":61817,"line_start":101,"line_end":101,"column_start":10,"column_end":20},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"lock_api::MutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61529,"byte_end":61609,"line_start":96,"line_end":96,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61610,"byte_end":61670,"line_start":97,"line_end":97,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61671,"byte_end":61674,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61675,"byte_end":61753,"line_start":99,"line_end":99,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61754,"byte_end":61797,"line_start":100,"line_end":100,"column_start":1,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":62241,"byte_end":62257,"line_start":110,"line_end":110,"column_start":10,"column_end":26},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"lock_api::MappedMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61867,"byte_end":61942,"line_start":103,"line_end":103,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61943,"byte_end":61978,"line_start":104,"line_end":104,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61979,"byte_end":61982,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":61983,"byte_end":62062,"line_start":106,"line_end":106,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":62063,"byte_end":62138,"line_start":107,"line_end":107,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":62139,"byte_end":62219,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\mutex.rs","byte_start":62220,"byte_end":62231,"line_start":109,"line_end":109,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68341,"byte_end":68344,"line_start":24,"line_end":24,"column_start":5,"column_end":8},"name":"New","qualname":"::once::OnceState::New","value":"OnceState::New","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" A closure has not been executed yet\n","sig":null,"attributes":[{"value":"/ A closure has not been executed yet","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68297,"byte_end":68336,"line_start":23,"line_end":23,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":680},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68396,"byte_end":68404,"line_start":27,"line_end":27,"column_start":5,"column_end":13},"name":"Poisoned","qualname":"::once::OnceState::Poisoned","value":"OnceState::Poisoned","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" A closure was executed but panicked.\n","sig":null,"attributes":[{"value":"/ A closure was executed but panicked.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68351,"byte_end":68391,"line_start":26,"line_end":26,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68462,"byte_end":68472,"line_start":30,"line_end":30,"column_start":5,"column_end":15},"name":"InProgress","qualname":"::once::OnceState::InProgress","value":"OnceState::InProgress","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" A thread is currently executing a closure.\n","sig":null,"attributes":[{"value":"/ A thread is currently executing a closure.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68411,"byte_end":68457,"line_start":29,"line_end":29,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68525,"byte_end":68529,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Done","qualname":"::once::OnceState::Done","value":"OnceState::Done","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" A closure has completed successfully.\n","sig":null,"attributes":[{"value":"/ A closure has completed successfully.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68479,"byte_end":68520,"line_start":32,"line_end":32,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68281,"byte_end":68290,"line_start":22,"line_end":22,"column_start":10,"column_end":19},"name":"OnceState","qualname":"::once::OnceState","value":"pub enum OnceState { New, Poisoned, InProgress, Done, }","parent":null,"children":[{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":684}],"decl_id":null,"docs":" Current state of a `Once`.\n","sig":null,"attributes":[{"value":"/ Current state of a `Once`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68196,"byte_end":68226,"line_start":20,"line_end":20,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68809,"byte_end":68817,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"poisoned","qualname":"<OnceState>::poisoned","value":"pub fn poisoned(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the associated `Once` has been poisoned.","sig":null,"attributes":[{"value":"/ Returns whether the associated `Once` has been poisoned.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68555,"byte_end":68615,"line_start":37,"line_end":37,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68620,"byte_end":68623,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ Once an initialization routine for a `Once` has panicked it will forever","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68628,"byte_end":68704,"line_start":39,"line_end":39,"column_start":5,"column_end":81}},{"value":"/ indicate to future forced initialization routines that it is poisoned.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68709,"byte_end":68783,"line_start":40,"line_end":40,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68788,"byte_end":68797,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69053,"byte_end":69057,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"done","qualname":"<OnceState>::done","value":"pub fn done(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the associated `Once` has successfully executed a\n closure.\n","sig":null,"attributes":[{"value":"/ Returns whether the associated `Once` has successfully executed a","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68941,"byte_end":69010,"line_start":49,"line_end":49,"column_start":5,"column_end":74}},{"value":"/ closure.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69015,"byte_end":69027,"line_start":50,"line_end":50,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69032,"byte_end":69041,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69878,"byte_end":69882,"line_start":83,"line_end":83,"column_start":12,"column_end":16},"name":"Once","qualname":"::once::Once","value":"","parent":null,"children":[],"decl_id":null,"docs":" A synchronization primitive which can be used to run a one-time\n initialization. Useful for one-time initialization for globals, FFI or\n related functionality.","sig":null,"attributes":[{"value":"/ A synchronization primitive which can be used to run a one-time","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69175,"byte_end":69242,"line_start":60,"line_end":60,"column_start":1,"column_end":68}},{"value":"/ initialization. Useful for one-time initialization for globals, FFI or","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69243,"byte_end":69317,"line_start":61,"line_end":61,"column_start":1,"column_end":75}},{"value":"/ related functionality.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69318,"byte_end":69344,"line_start":62,"line_end":62,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69345,"byte_end":69348,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Once`","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69349,"byte_end":69399,"line_start":64,"line_end":64,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69400,"byte_end":69403,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ - Only requires 1 byte of space, instead of 1 word.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69404,"byte_end":69459,"line_start":66,"line_end":66,"column_start":1,"column_end":56}},{"value":"/ - Not required to be `'static`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69460,"byte_end":69495,"line_start":67,"line_end":67,"column_start":1,"column_end":36}},{"value":"/ - Relaxed memory barriers in the fast path, which can significantly improve","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69496,"byte_end":69575,"line_start":68,"line_end":68,"column_start":1,"column_end":80}},{"value":"/   performance on some architectures.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69576,"byte_end":69616,"line_start":69,"line_end":69,"column_start":1,"column_end":41}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69617,"byte_end":69686,"line_start":70,"line_end":70,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69687,"byte_end":69690,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69691,"byte_end":69705,"line_start":72,"line_end":72,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69706,"byte_end":69709,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69710,"byte_end":69717,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::Once;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69718,"byte_end":69744,"line_start":75,"line_end":75,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69745,"byte_end":69748,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ static START: Once = Once::new();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69749,"byte_end":69786,"line_start":77,"line_end":77,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69787,"byte_end":69790,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ START.call_once(|| {","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69791,"byte_end":69815,"line_start":79,"line_end":79,"column_start":1,"column_end":25}},{"value":"/     // run initialization here","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69816,"byte_end":69850,"line_start":80,"line_end":80,"column_start":1,"column_end":35}},{"value":"/ });","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69851,"byte_end":69858,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69859,"byte_end":69866,"line_start":82,"line_end":82,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69974,"byte_end":69977,"line_start":88,"line_end":88,"column_start":18,"column_end":21},"name":"new","qualname":"<Once>::new","value":"pub const fn new() -> Once","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Once` value.\n","sig":null,"attributes":[{"value":"/ Creates a new `Once` value.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69911,"byte_end":69942,"line_start":86,"line_end":86,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69947,"byte_end":69956,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":70103,"byte_end":70108,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"state","qualname":"<Once>::state","value":"pub fn state(&Self) -> OnceState","parent":null,"children":[],"decl_id":null,"docs":" Returns the current state of this `Once`.\n","sig":null,"attributes":[{"value":"/ Returns the current state of this `Once`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":70032,"byte_end":70077,"line_start":92,"line_end":92,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":70082,"byte_end":70091,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72381,"byte_end":72390,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"call_once","qualname":"<Once>::call_once","value":"pub fn call_once<F>(&Self, F) where F: FnOnce() -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs an initialization routine once and only once. The given closure\n will be executed if this is the first time `call_once` has been called,\n and otherwise the routine will *not* be invoked.","sig":null,"attributes":[{"value":"/ Performs an initialization routine once and only once. The given closure","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":70465,"byte_end":70541,"line_start":107,"line_end":107,"column_start":5,"column_end":81}},{"value":"/ will be executed if this is the first time `call_once` has been called,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":70546,"byte_end":70621,"line_start":108,"line_end":108,"column_start":5,"column_end":80}},{"value":"/ and otherwise the routine will *not* be invoked.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":70626,"byte_end":70678,"line_start":109,"line_end":109,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":70683,"byte_end":70686,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ This method will block the calling thread if another initialization","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":70691,"byte_end":70762,"line_start":111,"line_end":111,"column_start":5,"column_end":76}},{"value":"/ routine is currently running.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":70767,"byte_end":70800,"line_start":112,"line_end":112,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":70805,"byte_end":70808,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ When this function returns, it is guaranteed that some initialization","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":70813,"byte_end":70886,"line_start":114,"line_end":114,"column_start":5,"column_end":78}},{"value":"/ has run and completed (it may not be the closure specified). It is also","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":70891,"byte_end":70966,"line_start":115,"line_end":115,"column_start":5,"column_end":80}},{"value":"/ guaranteed that any memory writes performed by the executed closure can","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":70971,"byte_end":71046,"line_start":116,"line_end":116,"column_start":5,"column_end":80}},{"value":"/ be reliably observed by other threads at this point (there is a","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71051,"byte_end":71118,"line_start":117,"line_end":117,"column_start":5,"column_end":72}},{"value":"/ happens-before relation between the closure and code executing after the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71123,"byte_end":71199,"line_start":118,"line_end":118,"column_start":5,"column_end":81}},{"value":"/ return).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71204,"byte_end":71216,"line_start":119,"line_end":119,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71221,"byte_end":71224,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71229,"byte_end":71243,"line_start":121,"line_end":121,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71248,"byte_end":71251,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71256,"byte_end":71263,"line_start":123,"line_end":123,"column_start":5,"column_end":12}},{"value":"/ use parking_lot::Once;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71268,"byte_end":71294,"line_start":124,"line_end":124,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71299,"byte_end":71302,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ static mut VAL: usize = 0;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71307,"byte_end":71337,"line_start":126,"line_end":126,"column_start":5,"column_end":35}},{"value":"/ static INIT: Once = Once::new();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71342,"byte_end":71378,"line_start":127,"line_end":127,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71383,"byte_end":71386,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ // Accessing a `static mut` is unsafe much of the time, but if we do so","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71391,"byte_end":71466,"line_start":129,"line_end":129,"column_start":5,"column_end":80}},{"value":"/ // in a synchronized fashion (e.g. write once or read all) then we're","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71471,"byte_end":71544,"line_start":130,"line_end":130,"column_start":5,"column_end":78}},{"value":"/ // good to go!","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71549,"byte_end":71567,"line_start":131,"line_end":131,"column_start":5,"column_end":23}},{"value":"/ //","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71572,"byte_end":71578,"line_start":132,"line_end":132,"column_start":5,"column_end":11}},{"value":"/ // This function will only call `expensive_computation` once, and will","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71583,"byte_end":71657,"line_start":133,"line_end":133,"column_start":5,"column_end":79}},{"value":"/ // otherwise always return the value returned from the first invocation.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71662,"byte_end":71738,"line_start":134,"line_end":134,"column_start":5,"column_end":81}},{"value":"/ fn get_cached_val() -> usize {","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71743,"byte_end":71777,"line_start":135,"line_end":135,"column_start":5,"column_end":39}},{"value":"/     unsafe {","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71782,"byte_end":71798,"line_start":136,"line_end":136,"column_start":5,"column_end":21}},{"value":"/         INIT.call_once(|| {","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71803,"byte_end":71834,"line_start":137,"line_end":137,"column_start":5,"column_end":36}},{"value":"/             VAL = expensive_computation();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71839,"byte_end":71885,"line_start":138,"line_end":138,"column_start":5,"column_end":51}},{"value":"/         });","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71890,"byte_end":71905,"line_start":139,"line_end":139,"column_start":5,"column_end":20}},{"value":"/         VAL","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71910,"byte_end":71925,"line_start":140,"line_end":140,"column_start":5,"column_end":20}},{"value":"/     }","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71930,"byte_end":71939,"line_start":141,"line_end":141,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71944,"byte_end":71949,"line_start":142,"line_end":142,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71954,"byte_end":71957,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ fn expensive_computation() -> usize {","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":71962,"byte_end":72003,"line_start":144,"line_end":144,"column_start":5,"column_end":46}},{"value":"/     // ...","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72008,"byte_end":72022,"line_start":145,"line_end":145,"column_start":5,"column_end":19}},{"value":"/ # 2","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72027,"byte_end":72034,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72039,"byte_end":72044,"line_start":147,"line_end":147,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72049,"byte_end":72056,"line_start":148,"line_end":148,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72061,"byte_end":72064,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72069,"byte_end":72081,"line_start":150,"line_end":150,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72086,"byte_end":72089,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ The closure `f` will only be executed once if this is called","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72094,"byte_end":72158,"line_start":152,"line_end":152,"column_start":5,"column_end":69}},{"value":"/ concurrently amongst many threads. If that closure panics, however, then","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72163,"byte_end":72239,"line_start":153,"line_end":153,"column_start":5,"column_end":81}},{"value":"/ it will *poison* this `Once` instance, causing all future invocations of","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72244,"byte_end":72320,"line_start":154,"line_end":154,"column_start":5,"column_end":81}},{"value":"/ `call_once` to also panic.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72325,"byte_end":72355,"line_start":155,"line_end":155,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72360,"byte_end":72369,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":73141,"byte_end":73156,"line_start":179,"line_end":179,"column_start":12,"column_end":27},"name":"call_once_force","qualname":"<Once>::call_once_force","value":"pub fn call_once_force<F>(&Self, F) where F: FnOnce(OnceState) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs the same function as `call_once` except ignores poisoning.","sig":null,"attributes":[{"value":"/ Performs the same function as `call_once` except ignores poisoning.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72658,"byte_end":72729,"line_start":169,"line_end":169,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72734,"byte_end":72737,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ If this `Once` has been poisoned (some initialization panicked) then","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72742,"byte_end":72814,"line_start":171,"line_end":171,"column_start":5,"column_end":77}},{"value":"/ this function will continue to attempt to call initialization functions","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72819,"byte_end":72894,"line_start":172,"line_end":172,"column_start":5,"column_end":80}},{"value":"/ until one of them doesn't panic.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72899,"byte_end":72935,"line_start":173,"line_end":173,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72940,"byte_end":72943,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ The closure `f` is yielded a structure which can be used to query the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":72948,"byte_end":73021,"line_start":175,"line_end":175,"column_start":5,"column_end":78}},{"value":"/ state of this `Once` (whether initialization has previously panicked or","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":73026,"byte_end":73101,"line_start":176,"line_end":176,"column_start":5,"column_end":80}},{"value":"/ not).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":73106,"byte_end":73115,"line_start":177,"line_end":177,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":73120,"byte_end":73129,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_fair_mutex.rs","byte_start":81931,"byte_end":81943,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"RawFairMutex","qualname":"::raw_fair_mutex::RawFairMutex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Raw fair mutex type backed by the parking lot.\n","sig":null,"attributes":[{"value":"/ Raw fair mutex type backed by the parking lot.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_fair_mutex.rs","byte_start":81869,"byte_end":81919,"line_start":11,"line_end":11,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_mutex.rs","byte_start":84487,"byte_end":84495,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"RawMutex","qualname":"::raw_mutex::RawMutex","value":"RawMutex {  }","parent":null,"children":[{"krate":0,"index":296}],"decl_id":null,"docs":" Raw mutex type backed by the parking lot.\n","sig":null,"attributes":[{"value":"/ Raw mutex type backed by the parking lot.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_mutex.rs","byte_start":84430,"byte_end":84475,"line_start":31,"line_end":31,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":97467,"byte_end":97476,"line_start":55,"line_end":55,"column_start":12,"column_end":21},"name":"RawRwLock","qualname":"::raw_rwlock::RawRwLock","value":"RawRwLock {  }","parent":null,"children":[{"krate":0,"index":400}],"decl_id":null,"docs":" Raw reader-writer lock type backed by the parking lot.\n","sig":null,"attributes":[{"value":"/ Raw reader-writer lock type backed by the parking lot.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":97397,"byte_end":97455,"line_start":54,"line_end":54,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":133601,"byte_end":133612,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"RawThreadId","qualname":"::remutex::RawThreadId","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.\n","sig":null,"attributes":[{"value":"/ Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":133512,"byte_end":133589,"line_start":12,"line_end":12,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":134683,"byte_end":134697,"line_start":41,"line_end":41,"column_start":10,"column_end":24},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"lock_api::ReentrantMutex<RawMutex, RawThreadId, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":134212,"byte_end":134275,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":134276,"byte_end":134279,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":134280,"byte_end":134350,"line_start":32,"line_end":32,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":134351,"byte_end":134354,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":134355,"byte_end":134435,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":134436,"byte_end":134454,"line_start":35,"line_end":35,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":134455,"byte_end":134535,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":134536,"byte_end":134575,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":134576,"byte_end":134579,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](type.Mutex.html) for more details about the underlying mutex","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":134580,"byte_end":134658,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/ primitive.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":134659,"byte_end":134673,"line_start":40,"line_end":40,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":134924,"byte_end":134945,"line_start":46,"line_end":46,"column_start":14,"column_end":35},"name":"const_reentrant_mutex","qualname":"::remutex::const_reentrant_mutex","value":"pub const fn const_reentrant_mutex<T>(T) -> ReentrantMutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex in an unlocked state ready for use.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":134756,"byte_end":134825,"line_start":43,"line_end":43,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":134826,"byte_end":134829,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This allows creating a reentrant mutex in a constant context on stable Rust.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":134830,"byte_end":134910,"line_start":45,"line_end":45,"column_start":1,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":135407,"byte_end":135426,"line_start":59,"line_end":59,"column_start":10,"column_end":29},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"lock_api::ReentrantMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":135135,"byte_end":135222,"line_start":54,"line_end":54,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":135223,"byte_end":135286,"line_start":55,"line_end":55,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":135287,"byte_end":135290,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":135291,"byte_end":135369,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":135370,"byte_end":135397,"line_start":58,"line_end":58,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":135899,"byte_end":135924,"line_start":68,"line_end":68,"column_start":10,"column_end":35},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"lock_api::MappedReentrantMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":135498,"byte_end":135582,"line_start":61,"line_end":61,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":135583,"byte_end":135618,"line_start":62,"line_end":62,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":135619,"byte_end":135622,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":135623,"byte_end":135720,"line_start":64,"line_end":64,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":135721,"byte_end":135796,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":135797,"byte_end":135877,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":135878,"byte_end":135889,"line_start":67,"line_end":67,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141939,"byte_end":141945,"line_start":89,"line_end":89,"column_start":10,"column_end":16},"name":"RwLock","qualname":"::rwlock::RwLock","value":"lock_api::RwLock<RawRwLock, T>","parent":null,"children":[],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":138422,"byte_end":138446,"line_start":11,"line_end":11,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":138447,"byte_end":138450,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":138451,"byte_end":138528,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":138529,"byte_end":138608,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":138609,"byte_end":138688,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":138689,"byte_end":138747,"line_start":16,"line_end":16,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":138748,"byte_end":138751,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This lock uses a task-fair locking policy which avoids both reader and","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":138752,"byte_end":138826,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ writer starvation. This means that readers trying to acquire the lock will","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":138827,"byte_end":138905,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ block even if the lock is unlocked when there are writers waiting to acquire","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":138906,"byte_end":138986,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ the lock. Because of this, attempts to recursively acquire a read lock","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":138987,"byte_end":139061,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ within a single thread may result in a deadlock.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139062,"byte_end":139114,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139115,"byte_end":139118,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139119,"byte_end":139196,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139197,"byte_end":139277,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139278,"byte_end":139356,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139357,"byte_end":139435,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139436,"byte_end":139485,"line_start":28,"line_end":28,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139486,"byte_end":139489,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Fairness","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139490,"byte_end":139504,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139505,"byte_end":139508,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ A typical unfair lock can often end up in a situation where a single thread","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139509,"byte_end":139588,"line_start":32,"line_end":32,"column_start":1,"column_end":80}},{"value":"/ quickly acquires and releases the same lock in succession, which can starve","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139589,"byte_end":139668,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/ other threads waiting to acquire the rwlock. While this improves throughput","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139669,"byte_end":139748,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ because it doesn't force a context switch when a thread tries to re-acquire","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139749,"byte_end":139828,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ a rwlock it has just released, this can starve other threads.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139829,"byte_end":139894,"line_start":36,"line_end":36,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139895,"byte_end":139898,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This rwlock uses [eventual fairness](https://trac.webkit.org/changeset/203350)","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139899,"byte_end":139981,"line_start":38,"line_end":38,"column_start":1,"column_end":83}},{"value":"/ to ensure that the lock will be fair on average without sacrificing","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":139982,"byte_end":140053,"line_start":39,"line_end":39,"column_start":1,"column_end":72}},{"value":"/ throughput. This is done by forcing a fair unlock on average every 0.5ms,","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140054,"byte_end":140131,"line_start":40,"line_end":40,"column_start":1,"column_end":78}},{"value":"/ which will force the lock to go to the next thread waiting for the rwlock.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140132,"byte_end":140210,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140211,"byte_end":140214,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Additionally, any critical section longer than 1ms will always use a fair","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140215,"byte_end":140292,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/ unlock, which has a negligible impact on throughput considering the length","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140293,"byte_end":140371,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ of the critical section.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140372,"byte_end":140400,"line_start":45,"line_end":45,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140401,"byte_end":140404,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ You can also force a fair unlock by calling `RwLockReadGuard::unlock_fair`","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140405,"byte_end":140483,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/ or `RwLockWriteGuard::unlock_fair` when unlocking a mutex instead of simply","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140484,"byte_end":140563,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ dropping the guard.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140564,"byte_end":140587,"line_start":49,"line_end":49,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140588,"byte_end":140591,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `RwLock`","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140592,"byte_end":140644,"line_start":51,"line_end":51,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140645,"byte_end":140648,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ - Supports atomically downgrading a write lock into a read lock.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140649,"byte_end":140717,"line_start":53,"line_end":53,"column_start":1,"column_end":69}},{"value":"/ - Task-fair locking policy instead of an unspecified platform default.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140718,"byte_end":140792,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/ - No poisoning, the lock is released normally on panic.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140793,"byte_end":140852,"line_start":55,"line_end":55,"column_start":1,"column_end":60}},{"value":"/ - Only requires 1 word of space, whereas the standard library boxes the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140853,"byte_end":140928,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/   `RwLock` due to platform limitations.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140929,"byte_end":140972,"line_start":57,"line_end":57,"column_start":1,"column_end":44}},{"value":"/ - Can be statically constructed.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":140973,"byte_end":141009,"line_start":58,"line_end":58,"column_start":1,"column_end":37}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141010,"byte_end":141060,"line_start":59,"line_end":59,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141061,"byte_end":141109,"line_start":60,"line_end":60,"column_start":1,"column_end":49}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141110,"byte_end":141179,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/ - Allows raw locking & unlocking without a guard.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141180,"byte_end":141233,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/ - Supports eventual fairness so that the rwlock is fair on average.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141234,"byte_end":141305,"line_start":63,"line_end":63,"column_start":1,"column_end":72}},{"value":"/ - Optionally allows making the rwlock fair by calling","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141306,"byte_end":141363,"line_start":64,"line_end":64,"column_start":1,"column_end":58}},{"value":"/   `RwLockReadGuard::unlock_fair` and `RwLockWriteGuard::unlock_fair`.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141364,"byte_end":141437,"line_start":65,"line_end":65,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141438,"byte_end":141441,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141442,"byte_end":141456,"line_start":67,"line_end":67,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141457,"byte_end":141460,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141461,"byte_end":141468,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::RwLock;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141469,"byte_end":141497,"line_start":70,"line_end":70,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141498,"byte_end":141501,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ let lock = RwLock::new(5);","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141502,"byte_end":141532,"line_start":72,"line_end":72,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141533,"byte_end":141536,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ // many reader locks can be held at once","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141537,"byte_end":141581,"line_start":74,"line_end":74,"column_start":1,"column_end":45}},{"value":"/ {","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141582,"byte_end":141587,"line_start":75,"line_end":75,"column_start":1,"column_end":6}},{"value":"/     let r1 = lock.read();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141588,"byte_end":141617,"line_start":76,"line_end":76,"column_start":1,"column_end":30}},{"value":"/     let r2 = lock.read();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141618,"byte_end":141647,"line_start":77,"line_end":77,"column_start":1,"column_end":30}},{"value":"/     assert_eq!(*r1, 5);","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141648,"byte_end":141675,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/     assert_eq!(*r2, 5);","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141676,"byte_end":141703,"line_start":79,"line_end":79,"column_start":1,"column_end":28}},{"value":"/ } // read locks are dropped at this point","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141704,"byte_end":141749,"line_start":80,"line_end":80,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141750,"byte_end":141753,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // only one write lock may be held, however","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141754,"byte_end":141801,"line_start":82,"line_end":82,"column_start":1,"column_end":48}},{"value":"/ {","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141802,"byte_end":141807,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/     let mut w = lock.write();","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141808,"byte_end":141841,"line_start":84,"line_end":84,"column_start":1,"column_end":34}},{"value":"/     *w += 1;","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141842,"byte_end":141858,"line_start":85,"line_end":85,"column_start":1,"column_end":17}},{"value":"/     assert_eq!(*w, 6);","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141859,"byte_end":141885,"line_start":86,"line_end":86,"column_start":1,"column_end":27}},{"value":"/ } // write lock is dropped here","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141886,"byte_end":141921,"line_start":87,"line_end":87,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141922,"byte_end":141929,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142142,"byte_end":142154,"line_start":94,"line_end":94,"column_start":14,"column_end":26},"name":"const_rwlock","qualname":"::rwlock::const_rwlock","value":"pub const fn const_rwlock<T>(T) -> RwLock<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":141984,"byte_end":142047,"line_start":91,"line_end":91,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142048,"byte_end":142051,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ This allows creating a `RwLock<T>` in a constant context on stable Rust.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142052,"byte_end":142128,"line_start":93,"line_end":93,"column_start":1,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142348,"byte_end":142363,"line_start":100,"line_end":100,"column_start":10,"column_end":25},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"lock_api::RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142253,"byte_end":142325,"line_start":98,"line_end":98,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142326,"byte_end":142338,"line_start":99,"line_end":99,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142518,"byte_end":142534,"line_start":104,"line_end":104,"column_start":10,"column_end":26},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"lock_api::RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142419,"byte_end":142495,"line_start":102,"line_end":102,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142496,"byte_end":142508,"line_start":103,"line_end":103,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142984,"byte_end":143005,"line_start":113,"line_end":113,"column_start":10,"column_end":31},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"lock_api::MappedRwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142591,"byte_end":142675,"line_start":106,"line_end":106,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142676,"byte_end":142711,"line_start":107,"line_end":107,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142712,"byte_end":142715,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142716,"byte_end":142805,"line_start":109,"line_end":109,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142806,"byte_end":142881,"line_start":110,"line_end":110,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142882,"byte_end":142962,"line_start":111,"line_end":111,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":142963,"byte_end":142974,"line_start":112,"line_end":112,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":143464,"byte_end":143486,"line_start":122,"line_end":122,"column_start":10,"column_end":32},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"lock_api::MappedRwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":143067,"byte_end":143153,"line_start":115,"line_end":115,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":143154,"byte_end":143189,"line_start":116,"line_end":116,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":143190,"byte_end":143193,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":143194,"byte_end":143285,"line_start":118,"line_end":118,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":143286,"byte_end":143361,"line_start":119,"line_end":119,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":143362,"byte_end":143442,"line_start":120,"line_end":120,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":143443,"byte_end":143454,"line_start":121,"line_end":121,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":143648,"byte_end":143673,"line_start":126,"line_end":126,"column_start":10,"column_end":35},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"lock_api::RwLockUpgradableReadGuard","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":143549,"byte_end":143625,"line_start":124,"line_end":124,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\rwlock.rs","byte_start":143626,"byte_end":143638,"line_start":125,"line_end":125,"column_start":1,"column_end":13}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":2881,"byte_end":2898,"line_start":25,"line_end":25,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5400,"byte_end":5407,"line_start":94,"line_end":94,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":22554,"byte_end":22561,"line_start":510,"line_end":510,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":22660,"byte_end":22667,"line_start":517,"line_end":517,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\elision.rs","byte_start":46662,"byte_end":46673,"line_start":39,"line_end":39,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68539,"byte_end":68548,"line_start":36,"line_end":36,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69900,"byte_end":69904,"line_start":85,"line_end":85,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":76979,"byte_end":76989,"line_start":282,"line_end":282,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":78223,"byte_end":78227,"line_start":318,"line_end":318,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":78320,"byte_end":78324,"line_start":325,"line_end":325,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_fair_mutex.rs","byte_start":81991,"byte_end":82003,"line_start":14,"line_end":14,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_fair_mutex.rs","byte_start":82500,"byte_end":82512,"line_start":40,"line_end":40,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_fair_mutex.rs","byte_start":82713,"byte_end":82725,"line_start":52,"line_end":52,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_mutex.rs","byte_start":86318,"byte_end":86326,"line_start":58,"line_end":58,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_mutex.rs","byte_start":87913,"byte_end":87921,"line_start":119,"line_end":119,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_mutex.rs","byte_start":88451,"byte_end":88459,"line_start":141,"line_end":141,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_mutex.rs","byte_start":89450,"byte_end":89458,"line_start":180,"line_end":180,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":319},{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":97542,"byte_end":97551,"line_start":59,"line_end":59,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":99961,"byte_end":99970,"line_start":154,"line_end":154,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":100903,"byte_end":100912,"line_start":191,"line_end":191,"column_start":46,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":101280,"byte_end":101289,"line_start":205,"line_end":205,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":102956,"byte_end":102965,"line_start":270,"line_end":270,"column_start":46,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":103563,"byte_end":103572,"line_start":294,"line_end":294,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":104314,"byte_end":104323,"line_start":322,"line_end":322,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":106226,"byte_end":106235,"line_start":397,"line_end":397,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":107084,"byte_end":107093,"line_start":427,"line_end":427,"column_start":53,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":107796,"byte_end":107805,"line_start":452,"line_end":452,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":109223,"byte_end":109232,"line_start":506,"line_end":506,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":479},{"krate":0,"index":484},{"krate":0,"index":489},{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":133643,"byte_end":133654,"line_start":15,"line_end":15,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":508},{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\util.rs","byte_start":158022,"byte_end":158028,"line_start":15,"line_end":15,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":2881,"byte_end":2898,"line_start":25,"line_end":25,"column_start":6,"column_end":23},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":662},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":5400,"byte_end":5407,"line_start":94,"line_end":94,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":69},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":22554,"byte_end":22561,"line_start":510,"line_end":510,"column_start":18,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":69},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\condvar.rs","byte_start":22660,"byte_end":22667,"line_start":517,"line_end":517,"column_start":21,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":69},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\elision.rs","byte_start":46662,"byte_end":46673,"line_start":39,"line_end":39,"column_start":27,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":2,"index":46882},"to":{"krate":0,"index":111}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":68539,"byte_end":68548,"line_start":36,"line_end":36,"column_start":6,"column_end":15},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":69900,"byte_end":69904,"line_start":85,"line_end":85,"column_start":6,"column_end":10},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":195},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":76979,"byte_end":76989,"line_start":282,"line_end":282,"column_start":27,"column_end":37},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":211},"to":{"krate":2,"index":3300}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":78223,"byte_end":78227,"line_start":318,"line_end":318,"column_start":18,"column_end":22},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":195},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\once.rs","byte_start":78320,"byte_end":78324,"line_start":325,"line_end":325,"column_start":21,"column_end":25},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":195},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_fair_mutex.rs","byte_start":81991,"byte_end":82003,"line_start":14,"line_end":14,"column_start":36,"column_end":48},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":229},"to":{"krate":16,"index":32}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_fair_mutex.rs","byte_start":82500,"byte_end":82512,"line_start":40,"line_end":40,"column_start":40,"column_end":52},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":229},"to":{"krate":16,"index":39}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_fair_mutex.rs","byte_start":82713,"byte_end":82725,"line_start":52,"line_end":52,"column_start":41,"column_end":53},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":229},"to":{"krate":16,"index":42}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_mutex.rs","byte_start":86318,"byte_end":86326,"line_start":58,"line_end":58,"column_start":36,"column_end":44},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":295},"to":{"krate":16,"index":32}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_mutex.rs","byte_start":87913,"byte_end":87921,"line_start":119,"line_end":119,"column_start":40,"column_end":48},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":295},"to":{"krate":16,"index":39}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_mutex.rs","byte_start":88451,"byte_end":88459,"line_start":141,"line_end":141,"column_start":41,"column_end":49},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":295},"to":{"krate":16,"index":42}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_mutex.rs","byte_start":89450,"byte_end":89458,"line_start":180,"line_end":180,"column_start":6,"column_end":14},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":295},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":97542,"byte_end":97551,"line_start":59,"line_end":59,"column_start":37,"column_end":46},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":399},"to":{"krate":16,"index":512}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":99961,"byte_end":99970,"line_start":154,"line_end":154,"column_start":41,"column_end":50},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":399},"to":{"krate":16,"index":523}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":100903,"byte_end":100912,"line_start":191,"line_end":191,"column_start":46,"column_end":55},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":399},"to":{"krate":16,"index":528}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":101280,"byte_end":101289,"line_start":205,"line_end":205,"column_start":42,"column_end":51},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":399},"to":{"krate":16,"index":530}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":102956,"byte_end":102965,"line_start":270,"line_end":270,"column_start":46,"column_end":55},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":399},"to":{"krate":16,"index":537}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":103563,"byte_end":103572,"line_start":294,"line_end":294,"column_start":51,"column_end":60},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":399},"to":{"krate":16,"index":540}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":104314,"byte_end":104323,"line_start":322,"line_end":322,"column_start":44,"column_end":53},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":399},"to":{"krate":16,"index":543}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":106226,"byte_end":106235,"line_start":397,"line_end":397,"column_start":48,"column_end":57},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":399},"to":{"krate":16,"index":549}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":107084,"byte_end":107093,"line_start":427,"line_end":427,"column_start":53,"column_end":62},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":399},"to":{"krate":16,"index":552}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":107796,"byte_end":107805,"line_start":452,"line_end":452,"column_start":49,"column_end":58},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":399},"to":{"krate":16,"index":555}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\raw_rwlock.rs","byte_start":109223,"byte_end":109232,"line_start":506,"line_end":506,"column_start":6,"column_end":15},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\remutex.rs","byte_start":133643,"byte_end":133654,"line_start":15,"line_end":15,"column_start":29,"column_end":40},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":505},"to":{"krate":16,"index":265}},{"span":{"file_name":"C:\\Users\\bucky\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.12.1\\src\\util.rs","byte_start":158022,"byte_end":158028,"line_start":15,"line_end":15,"column_start":35,"column_end":41},"kind":{"Impl":{"id":29}},"from":{"krate":2,"index":46283},"to":{"krate":0,"index":555}}]}