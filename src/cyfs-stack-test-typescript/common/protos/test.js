// source: core_objects.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.UseProtoBufBodyContent', null, global);
goog.exportSymbol('proto.UseProtoBufDescContent', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


 proto.UseProtoBufDescContent = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.UseProtoBufDescContent, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.UseProtoBufDescContent.displayName = 'proto.UseProtoBufDescContent';
  }
  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.UseProtoBufBodyContent = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.UseProtoBufBodyContent.repeatedFields_, null);
  };
  goog.inherits(proto.UseProtoBufBodyContent, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.UseProtoBufBodyContent.displayName = 'proto.UseProtoBufBodyContent';
  }


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UseProtoBufDescContent.prototype.toObject = function(opt_includeInstance) {
    return proto.UseProtoBufDescContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UseProtoBufDescContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UseProtoBufDescContent.toObject = function(includeInstance, msg) {
    var f, obj = {
    owner: msg.getOwner_asB64()
    };

    if (includeInstance) {
    obj.$jspbMessageInstance = msg;
    }
    return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UseProtoBufDescContent}
 */
proto.UseProtoBufDescContent.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.UseProtoBufDescContent;
    return proto.UseProtoBufDescContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UseProtoBufDescContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UseProtoBufDescContent}
 */
proto.UseProtoBufDescContent.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
    if (reader.isEndGroup()) {
        break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setOwner(value);
        break;
    default:
        reader.skipField();
        break;
    }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UseProtoBufDescContent.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.UseProtoBufDescContent.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UseProtoBufDescContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UseProtoBufDescContent.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getOwner_asU8();
    if (f.length > 0) {
    writer.writeBytes(
        1,
        f
    );
    }
};


/**
 * optional bytes owner = 1;
 * @return {!(string|Uint8Array)}
 */
proto.UseProtoBufDescContent.prototype.getOwner = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes owner = 1;
 * This is a type-conversion wrapper around `getOwner()`
 * @return {string}
 */
proto.UseProtoBufDescContent.prototype.getOwner_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getOwner()));
};


/**
 * optional bytes owner = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwner()`
 * @return {!Uint8Array}
 */
proto.UseProtoBufDescContent.prototype.getOwner_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getOwner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.UseProtoBufDescContent} returns this
 */
proto.UseProtoBufDescContent.prototype.setOwner = function(value) {
    return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UseProtoBufBodyContent.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UseProtoBufBodyContent.prototype.toObject = function(opt_includeInstance) {
    return proto.UseProtoBufBodyContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UseProtoBufBodyContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UseProtoBufBodyContent.toObject = function(includeInstance, msg) {
    var f, obj = {
    oodListList: msg.getOodListList_asB64(),
    knownDeviceListList: msg.getKnownDeviceListList_asB64(),
    oodWorkMode: jspb.Message.getFieldWithDefault(msg, 3, "")
    };

    if (includeInstance) {
    obj.$jspbMessageInstance = msg;
    }
    return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UseProtoBufBodyContent}
 */
proto.UseProtoBufBodyContent.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.UseProtoBufBodyContent;
    return proto.UseProtoBufBodyContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UseProtoBufBodyContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UseProtoBufBodyContent}
 */
proto.UseProtoBufBodyContent.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
    if (reader.isEndGroup()) {
        break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.addOodList(value);
        break;
    case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.addKnownDeviceList(value);
        break;
    case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setOodWorkMode(value);
        break;
    default:
        reader.skipField();
        break;
    }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UseProtoBufBodyContent.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.UseProtoBufBodyContent.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UseProtoBufBodyContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UseProtoBufBodyContent.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getOodListList_asU8();
    if (f.length > 0) {
    writer.writeRepeatedBytes(
        1,
        f
    );
    }
    f = message.getKnownDeviceListList_asU8();
    if (f.length > 0) {
    writer.writeRepeatedBytes(
        2,
        f
    );
    }
    f = /** @type {string} */ (jspb.Message.getField(message, 3));
    if (f != null) {
    writer.writeString(
        3,
        f
    );
    }
};


/**
 * repeated bytes ood_list = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.UseProtoBufBodyContent.prototype.getOodListList = function() {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes ood_list = 1;
 * This is a type-conversion wrapper around `getOodListList()`
 * @return {!Array<string>}
 */
proto.UseProtoBufBodyContent.prototype.getOodListList_asB64 = function() {
    return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
        this.getOodListList()));
};


/**
 * repeated bytes ood_list = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOodListList()`
 * @return {!Array<!Uint8Array>}
 */
proto.UseProtoBufBodyContent.prototype.getOodListList_asU8 = function() {
    return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
        this.getOodListList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.UseProtoBufBodyContent} returns this
 */
proto.UseProtoBufBodyContent.prototype.setOodListList = function(value) {
    return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.UseProtoBufBodyContent} returns this
 */
proto.UseProtoBufBodyContent.prototype.addOodList = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.UseProtoBufBodyContent} returns this
 */
proto.UseProtoBufBodyContent.prototype.clearOodListList = function() {
    return this.setOodListList([]);
};


/**
 * repeated bytes known_device_list = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.UseProtoBufBodyContent.prototype.getKnownDeviceListList = function() {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes known_device_list = 2;
 * This is a type-conversion wrapper around `getKnownDeviceListList()`
 * @return {!Array<string>}
 */
proto.UseProtoBufBodyContent.prototype.getKnownDeviceListList_asB64 = function() {
    return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
        this.getKnownDeviceListList()));
};


/**
 * repeated bytes known_device_list = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKnownDeviceListList()`
 * @return {!Array<!Uint8Array>}
 */
proto.UseProtoBufBodyContent.prototype.getKnownDeviceListList_asU8 = function() {
    return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
        this.getKnownDeviceListList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.UseProtoBufBodyContent} returns this
 */
proto.UseProtoBufBodyContent.prototype.setKnownDeviceListList = function(value) {
    return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.UseProtoBufBodyContent} returns this
 */
proto.UseProtoBufBodyContent.prototype.addKnownDeviceList = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.UseProtoBufBodyContent} returns this
 */
proto.UseProtoBufBodyContent.prototype.clearKnownDeviceListList = function() {
    return this.setKnownDeviceListList([]);
};


/**
 * optional string ood_work_mode = 3;
 * @return {string}
 */
proto.UseProtoBufBodyContent.prototype.getOodWorkMode = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.UseProtoBufBodyContent} returns this
 */
proto.UseProtoBufBodyContent.prototype.setOodWorkMode = function(value) {
    return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.UseProtoBufBodyContent} returns this
 */
proto.UseProtoBufBodyContent.prototype.clearOodWorkMode = function() {
    return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UseProtoBufBodyContent.prototype.hasOodWorkMode = function() {
    return jspb.Message.getField(this, 3) != null;
};

  goog.object.extend(exports, proto);

