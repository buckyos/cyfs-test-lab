"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskMain = void 0;
const base_1 = require("../../base");
const labAgent_1 = require("../../taskTools/rust-bdt/labAgent");
const bdtRunner_1 = require("../../taskTools/rust-bdt/bdtRunner");
const type_1 = require("../../taskTools/rust-bdt/type");
async function TaskMain(_interface) {
    let testcaseName = "NDN_AllEP_ChannelSelect";
    let agentList = [];
    let taskList = [];
    let testAgent = [
        labAgent_1.labAgent.PC_0005,
        labAgent_1.labAgent.PC_0006,
        labAgent_1.labAgent.PC_0007,
        labAgent_1.labAgent.PC_0008,
        labAgent_1.labAgent.PC_0009,
        labAgent_1.labAgent.PC_0010,
        labAgent_1.labAgent.PC_0011,
        labAgent_1.labAgent.PC_0012,
        labAgent_1.labAgent.PC_0013,
        labAgent_1.labAgent.PC_0014,
        labAgent_1.labAgent.PC_0015,
        labAgent_1.labAgent.PC_0016,
        labAgent_1.labAgent.PC_0017,
        labAgent_1.labAgent.PC_0018,
    ];
    let firstQA_answer = "";
    agentList = agentList.concat(await labAgent_1.InitAgentData(testAgent, { ipv4: { udp: true, tcp: true }, ipv6: { udp: true, tcp: true } }, "info", 1, labAgent_1.LabSnList, {}, firstQA_answer, "SN_Resp" /* all */));
    for (let i in agentList) {
        for (let j in agentList) {
            if (i != j) {
                // NAT穿透
                if (agentList[i].NAT + agentList[j].NAT < 5 || labAgent_1.SameRouter(agentList[i].router, agentList[j].router)) {
                    taskList.push({
                        LN: { name: `${testAgent[i].tags[0]}_0`, type: testAgent[i].type },
                        RN: { name: `${testAgent[j].tags[0]}_0`, type: testAgent[j].type },
                        timeout: 5 * 60 * 1000,
                        expect_status: type_1.BDTERROR.success,
                        action: [
                            // 建立连接
                            {
                                LN: { name: `${testAgent[i].tags[0]}_0`, type: testAgent[i].type },
                                RN: { name: `${testAgent[j].tags[0]}_0`, type: testAgent[j].type },
                                type: "connect" /* connect */,
                                config: {
                                    conn_tag: "connect_frist",
                                    timeout: 30 * 1000,
                                },
                                fileSize: 0,
                                expect: { err: type_1.BDTERROR.success }
                            },
                            // LN 从 RN 下载
                            {
                                LN: { name: `${testAgent[i].tags[0]}_0`, type: testAgent[i].type },
                                RN: { name: `${testAgent[j].tags[0]}_0`, type: testAgent[j].type },
                                type: "send-file" /* send_file */,
                                config: {
                                    timeout: 30 * 1000,
                                },
                                fileSize: 10 * 1024 * 1024,
                                chunkSize: 4,
                                expect: { err: type_1.BDTERROR.success }
                            },
                            // RN 从 LN 下载
                            {
                                RN: { name: `${testAgent[i].tags[0]}_0`, type: testAgent[i].type },
                                LN: { name: `${testAgent[j].tags[0]}_0`, type: testAgent[j].type },
                                type: "send-file" /* send_file */,
                                config: {
                                    timeout: 30 * 1000,
                                },
                                fileSize: 10 * 1024 * 1024,
                                chunkSize: 4,
                                expect: { err: type_1.BDTERROR.success }
                            },
                        ]
                    });
                }
            }
        }
    }
    await base_1.sleep(2000);
    let testRunner = new bdtRunner_1.TestRunner(_interface);
    let testcase = {
        TestcaseName: testcaseName,
        testcaseId: `${testcaseName}_${Date.now()}`,
        remark: `# 操作流程：\n
        + (1) LN、RN 初始化协议栈
        + (2) LN track上传一个10Mb文件，RN 进行Interest
        + (3) RN track上传一个10Mb文件，LN 进行Interest\n`,
        environment: "lab",
        agentList,
        taskList,
        taskMult: 10
    };
    await testRunner.testCaseRunner(testcase);
}
exports.TaskMain = TaskMain;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
