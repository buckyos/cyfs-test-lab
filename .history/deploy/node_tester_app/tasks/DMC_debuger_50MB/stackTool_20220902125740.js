"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackProxyClient = exports.stringToUint8Array = exports.Uint8ArrayToString = exports.StackError = void 0;
const base_1 = require("../../base");
const events_1 = require("events");
const net_1 = __importDefault(require("net"));
const utilClient_1 = require("./utilClient");
exports.StackError = {
    success: 0,
    LNAgentError: 1,
    RNAgentError: 2,
    reportDataFailed: 3,
    testDataError: 4,
    timeout: 5,
    connect_cyfs_client_faild: 1001,
};
function Uint8ArrayToString(fileData) {
    var dataString = "";
    for (var i = 0; i < fileData.length; i++) {
        dataString += String.fromCharCode(fileData[i]);
    }
    return dataString;
}
exports.Uint8ArrayToString = Uint8ArrayToString;
function stringToUint8Array(str) {
    var arr = [];
    for (var i = 0, j = str.length; i < j; ++i) {
        arr.push(str.charCodeAt(i));
    }
    var tmpUint8Array = new Uint8Array(arr);
    return tmpUint8Array;
}
exports.stringToUint8Array = stringToUint8Array;
class StackProxyClient extends events_1.EventEmitter {
    constructor(options) {
        super();
        this.peerName = options.peerName;
        this.m_interface = options._interface;
        this.stack_type = options.stack_type;
        this.timeout = options.timeout;
        this.log = this.m_interface.getLogger();
        this.state = 0;
        this.ws_port = options.ws_port;
        this.http_port = options.http_port;
    }
    async init() {
        // 连接测试节点
        this.state = 1;
        let agent = await this.m_interface.getAgent({}, [this.peerName], [], [], this.timeout);
        if (agent.err || agent.agentid == undefined) {
            this.log.error(`连接测试节点 ${this.peerName}失败`);
            return { err: exports.StackError.LNAgentError, log: "连接测试节点失败" };
        }
        this.m_agentid = agent.agentid;
        // 测试节点启动测试服务     
        let err = await this.m_interface.startService([], this.m_agentid, this.timeout);
        if (err) {
            this.log.error(`${this.peerName} 测试节点启动服务失败`);
            return { err: exports.StackError.LNAgentError, log: "测试节点启动服务失败" };
        }
        let info = await this.m_interface.callApi('start_client', Buffer.from(''), { stack_type: this.stack_type }, this.m_agentid, 0);
        this.util_client = new utilClient_1.UtilClient(this.m_interface, this.m_agentid, this.peerName, info.value.cacheName);
        this.start_proxy("ws", this.ws_port);
        this.start_proxy("http", this.http_port);
        this.state = 2;
        return { err: base_1.ErrorCode.succ, log: "启动成功" };
    }
    async start_proxy(type, port) {
        let tcpServer = net_1.default.createServer(async (c) => {
            // 这个c 是上层业请求端
            this.log.info(` ${this.peerName} TCP Client ${port} connect ${c.remoteAddress}:${c.remotePort}`);
            // 创建tunnel
            let param = {
                type,
                remoteAddress: c.remoteAddress,
                remotePort: c.remotePort
            };
            let info = await this.m_interface.callApi('build_tunnel', Buffer.from(""), param, this.m_agentid, 0);
            if (info.err) {
                this.log.error(`build_tunnel`);
            }
            // 添加保活探针
            c.setKeepAlive(true, 2000);
            // 监听测试框架事件，返回SDK 报文数据
            let recv_r_req = 0;
            let rnAccept = await this.m_interface.attachEvent(`${c.remoteAddress}_${c.remotePort}`, async (err, namespace, r_req, msg) => {
                this.log.info(` ${this.peerName} TCP Client ${port} write msg ${c.remoteAddress}:${c.remotePort}`);
                // 实现序列化发送, 返回给SDK
                let recheck = 5;
                let msg_u8 = stringToUint8Array(msg);
                c.write(msg_u8);
            }, this.m_agentid);
            let seq = 0;
            c.on('data', async (buf) => {
                this.log.info(` ${this.peerName} TCP Client ${port} read data ${c.remoteAddress}:${c.remotePort}`);
                seq = seq + 1;
                let param = {
                    seq,
                    type,
                    remoteAddress: c.remoteAddress,
                    remotePort: c.remotePort
                };
                let msg_u8 = buf;
                let info = await this.m_interface.callApi('proxy_data', Buffer.from(Uint8ArrayToString(msg_u8)), param, this.m_agentid, 0);
            });
            c.on("end", async () => {
                let info = await this.m_interface.callApi('end_tunnel', Buffer.from(""), param, this.m_agentid, 0);
            });
            c.on('error', async (err) => {
                this.log.info(`${this.peerName} client ${port} proxy error ${err}`);
                await this.m_interface.detachEvent(`${c.remoteAddress}_${c.remotePort}`, rnAccept.cookie);
                this.state = -1;
            });
        });
        tcpServer.listen({ host: "127.0.0.1", port, }, () => {
            this.log.info(`${this.peerName} TCP Server start`);
        });
        return tcpServer;
    }
}
exports.StackProxyClient = StackProxyClient;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
