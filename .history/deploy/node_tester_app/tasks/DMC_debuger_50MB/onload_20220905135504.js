"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskMain = exports.download = void 0;
const base_1 = require("../../base");
const path = __importStar(require("path"));
const stackTool_1 = require("../../taskTools/cyfs_stack_tunnel/stackTool");
const cyfs = __importStar(require("../../taskTools/cyfs_stack_tunnel/cyfs_node"));
const fs = __importStar(require("fs-extra"));
async function test_file(_interface, DMC_Download, DMC_Upload, stack_download, stack_upload, fileSize, timeout) {
    let dec_id = cyfs.ObjectId.from_base_58("9tGpLNnab9uVtjeaK4bM59QKSkLEGWow1pJq6hjjK9MM").unwrap();
    let createFile = await DMC_Upload.util_client.createFile(fileSize);
    let add_file = await stack_upload.trans().publish_file({
        common: {
            req_path: "qaTest",
            // 来源DEC
            // api级别
            dec_id,
            level: cyfs.NDNAPILevel.NDN,
            target: stack_upload.local_device_id().object_id,
            // targrt设备参数
            // 需要处理数据的关联对象，主要用以chunk/file等
            referer_object: [],
            flags: 1,
        },
        owner: stack_upload.local_device_id().object_id,
        local_path: createFile.filePath,
        chunk_size: 4 * 1024 * 1024
    });
    let test_file = add_file.unwrap().file_id;
    let task_id;
    await cyfs.sleep(1000);
    const req1 = {
        object_id: test_file,
        common: {
            req_path: "qaTest",
            level: cyfs.NONAPILevel.NON,
            target: stack_upload.local_device_id().object_id,
            dec_id,
            flags: 0,
        }
    };
    const get_ret = await stack_upload.non_service().get_object(req1);
    let file_obj = get_ret.unwrap().object;
    let stream = await stack_upload.non_service().put_object({
        common: {
            dec_id,
            flags: 0,
            target: stack_download.local_device_id().object_id,
            level: cyfs.NONAPILevel.Router //设置路由类型
        },
        object: new cyfs.NONObjectInfo(test_file, file_obj.object_raw)
    });
    _interface.getLogger().info(`##### ${JSON.stringify(stream.unwrap().result)}`);
    await cyfs.sleep(1000);
    _interface.getLogger().info("获取task object");
    const req2 = {
        object_id: test_file,
        common: {
            req_path: "qaTest",
            level: cyfs.NONAPILevel.Router,
            target: stack_upload.local_device_id().object_id,
            dec_id,
            flags: 0,
        }
    };
    const get_ret2 = await stack_download.non_service().get_object(req2);
    get_ret2.unwrap().object;
    let savePath = path.join(__dirname, "../../DMC.txt");
    if (!fs.pathExistsSync(savePath)) {
        fs.createFileSync(savePath);
    }
    _interface.getLogger().info(`${JSON.stringify(get_ret2)}`);
    for (let i = 0; i < 1; i++) {
        let result = await download(_interface, DMC_Download, stack_download, stack_upload, fileSize, timeout, test_file, createFile.fileName);
        let file = fs.appendFileSync(savePath, `${JSON.stringify(result)}\n`);
        if (result.err == base_1.ErrorCode.succ) {
            return;
        }
    }
}
async function download(_interface, DMC_Download, stack_download, stack_upload, fileSize, timeout, test_file, fileName, error_time = 0) {
    let dec_id = cyfs.ObjectId.from_base_58("9tGpLNnab9uVtjeaK4bM59QKSkLEGWow1pJq6hjjK9MM").unwrap();
    let download_path = await DMC_Download.util_client.getCachePath();
    let save_filePath = path.join(download_path.cache_path.file_download, fileName);
    let begin = Date.now();
    let download = await stack_download.trans().create_task({
        common: {
            req_path: "qaTest",
            dec_id,
            level: cyfs.NDNAPILevel.Router,
            target: stack_download.local_device_id().object_id,
            referer_object: [new cyfs.NDNDataRefererObject(test_file)],
            flags: 1,
        },
        object_id: test_file,
        local_path: save_filePath,
        device_list: [stack_upload.local_device_id()],
        auto_start: true,
    });
    _interface.getLogger().info(`##${download}`);
    let savePath = path.join(__dirname, "../../DMC_download.txt");
    if (!fs.pathExistsSync(savePath)) {
        fs.createFileSync(savePath);
    }
    let errorPath = path.join(__dirname, "../../DMC_error.txt");
    fs.removeSync(errorPath);
    let download_id = download.unwrap().task_id;
    for (let i = 0; i < timeout; i++) {
        let task = await stack_download.trans().get_task_state({
            common: {
                req_path: "qaTest",
                dec_id,
                level: cyfs.NDNAPILevel.Router,
                referer_object: [],
                flags: 1,
            },
            task_id: download_id
        });
        _interface.getLogger().info(`####### 传输状态： ${JSON.stringify(task.unwrap())}`);
        let file = fs.appendFileSync(savePath, ` ${JSON.stringify(task.unwrap())}\n`);
        let state = task.unwrap().state;
        if (state == 4) {
            _interface.getLogger().info(`####### 传输完成： ${JSON.stringify(task.unwrap())} ,time = ${Date.now() - begin} ,文件大小 : ${fileSize}`);
            return { err: base_1.ErrorCode.succ, fileId: test_file.to_base_58(), time: Date.now() - begin, fileSize };
        }
        if (state == 5) {
            _interface.getLogger().info(`####### 传输完成： ${JSON.stringify(task.unwrap())} ,time = ${Date.now() - begin} ,文件大小 : ${fileSize}`);
            error_time = error_time + 1;
            if (error_time > 20) {
                return { err: base_1.ErrorCode.exception, fileId: test_file.to_base_58(), time: Date.now() - begin, fileSize };
            }
            fs.createFileSync(errorPath);
            fs.appendFileSync(errorPath, `fileId=${test_file.to_base_58()}#fileName=${fileName}#error_time=${error_time}`);
            return { err: base_1.ErrorCode.exception, fileId: test_file.to_base_58(), time: Date.now() - begin, fileSize };
        }
        await cyfs.sleep(1000);
    }
    return { err: base_1.ErrorCode.timeout, fileId: test_file.to_base_58(), time: Date.now() - begin, fileSize };
}
exports.download = download;
async function TaskMain(_interface) {
    let dec_id = cyfs.ObjectId.from_base_58("9tGpLNnab9uVtjeaK4bM59QKSkLEGWow1pJq6hjjK9MM").unwrap();
    let DMC_Download = new stackTool_1.StackProxyClient({
        _interface,
        peerName: "PC_0005",
        stack_type: "ood",
        timeout: 60 * 1000,
        ws_port: 20001,
        http_port: 20002
    });
    await DMC_Download.init();
    let DMC_Upload = new stackTool_1.StackProxyClient({
        _interface,
        peerName: "PC_0018",
        stack_type: "ood",
        timeout: 60 * 1000,
        ws_port: 20003,
        http_port: 20004
    });
    await DMC_Upload.init();
    while(true){
        
    }
    _interface.getLogger().info(`Waiting for proxy to connection...`);
    let stack_download = cyfs.SharedCyfsStack.open(cyfs.SharedCyfsStackParam.new_with_ws_event_ports(20002, 20001, dec_id).unwrap());
    let resp = await stack_download.wait_online(cyfs.None);
    _interface.getLogger().info(`wait_online finished ${JSON.stringify(resp.unwrap())}`);
    let res = await stack_download.util().get_zone({ common: { flags: 0 } });
    let stack_upload = cyfs.SharedCyfsStack.open(cyfs.SharedCyfsStackParam.new_with_ws_event_ports(20004, 20003, dec_id).unwrap());
    let resp2 = await stack_upload.wait_online(cyfs.None);
    _interface.getLogger().info(`wait_online finished ${JSON.stringify(resp.unwrap())}`);
    let res2 = await stack_upload.util().get_zone({ common: { flags: 0 } });
    let errorPath = path.join(__dirname, "../../DMC_error.txt");
    let fileSize = 50 * 1024 * 1024;
    if (fs.pathExistsSync(errorPath)) {
        let data = fs.readFileSync(errorPath).toString();
        let fileId_str = data.split("#")[0].split("=")[1];
        let fileName = data.split("#")[1].split("=")[1];
        let error_time = Number(data.split("#")[2].split("=")[1]);
        _interface.getLogger().info(`fileId_str = ${fileId_str}  fileName = ${fileName} error_time =${error_time}`);
        let fileId = cyfs.ObjectId.from_base_58(fileId_str).unwrap();
        let result = await download(_interface, DMC_Download, stack_download, stack_upload, fileSize, 400, fileId, fileName, error_time);
        await _interface.exit(base_1.ClientExitCode.failed, `${result}`);
    }
    let result = await test_file(_interface, DMC_Download, DMC_Upload, stack_download, stack_upload, fileSize, 400);
    await _interface.exit(base_1.ClientExitCode.failed, `${result}`);
}
exports.TaskMain = TaskMain;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
