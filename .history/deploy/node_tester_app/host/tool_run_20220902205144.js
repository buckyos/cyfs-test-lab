"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const account_profile_1 = require("../script/account_profile");
const ChildProcess = __importStar(require("child_process"));
const base_1 = require("../base");
const os = __importStar(require("os"));
const fs = __importStar(require("fs-extra"));
class Runner {
    constructor(options) {
        this.m_latestRecvTime = 0;
        this.m_account = options.account;
        this.m_reporter = options.reporter;
        this.m_version = options.version;
        this.m_updateHost = options.updateHost;
        this.m_updatePort = options.updatePort;
        this.m_deviceIdSave = options.deviceIdSave;
        this.m_platform = options.platform;
    }
    get process() {
        return this.m_process;
    }
    async getDeviceID() {
        let id = '';
        let info = await this.m_deviceIdSave.get('deviceId');
        if (info.err || !info.value || !info.value.length) {
            if (this.m_account.deviceID) {
                id = this.m_account.deviceID;
            }
            else if (this.m_account.peerid) {
                id = this.m_account.peerid;
            }
            if (id.length) {
                await this.m_deviceIdSave.set('deviceId', id);
            }
        }
        else {
            id = info.value;
        }
        return id;
    }
    async start() {
        await this.m_deviceIdSave.load();
        await this._startLocalMaster();
        this.TaskRunMonitor();
    }
    async TaskRunMonitor() {
        let runConfig = path.join(base_1.DirHelper.getLogDir(), "running.pid");
        let check = 0;
        while (check < 10) {
            if (fs.existsSync(runConfig)) {
                check = 0;
            }
            else {
                check + check + 1;
            }
            await base_1.sleep(3000);
        }
        process.exit(0);
    }
    async check_state() {
        let runConfig = path.join(base_1.DirHelper.getLogDir(), "running.pid");
        while (fs.existsSync(runConfig)) {
            await base_1.sleep(5 * 1000);
        }
    }
    async _startLocalMaster() {
        if (this.m_process) {
            return;
        }
        let entryfile = path.join(path.dirname(process.argv[1]), '../script/master_main.js');
        let deviceID = await this.getDeviceID();
        this.m_process = ChildProcess.fork(entryfile, [base_1.DirHelper.getRootDir(), deviceID, this.m_platform, '1'], { silent: true });
        this.state = "run";
        this.m_process.on('exit', (code, signal) => {
            this.state = "exit";
            if (this.m_sendMsgTimer) {
                clearInterval(this.m_sendMsgTimer);
                this.m_sendMsgTimer = undefined;
            }
            console.log(`[startup] service exit, code=${code}, signal=${signal}`);
            this.m_process = undefined;
            process.exit(0);
        });
        this.m_latestRecvTime = Date.now();
        this.m_sendMsgTimer = setInterval(() => {
            this.m_process.send('keeplive');
            if (Date.now() - this.m_latestRecvTime > 20 * 1000) {
                process.exit(0);
            }
        }, 2000);
        this.m_process.stdout.on('data', (data) => {
            console.info(`recv data from client ${String(data)}`);
            if (String(data) == "exit") {
                process.exit(0);
            }
            this.m_latestRecvTime = Date.now();
        });
    }
    async _stopLocalMaster() {
        if (!this.m_process) {
            return;
        }
        await new Promise((v) => {
            this.m_process.once('exit', () => {
                v("");
            });
            // this.m_process!.stdout.removeAllListeners();
            this.m_process.kill();
        });
    }
}
async function main() {
    process.chdir(path.dirname(process.argv[1]));
    let dir = path.dirname(path.dirname(process.argv[1]));
    console.log(`${dir}`);
    base_1.DirHelper.setRootDir(dir);
    let logFolder = base_1.DirHelper.getLogDir();
    base_1.DirHelper.emptyDir(logFolder);
    base_1.DirHelper.emptyDir(base_1.DirHelper.getTempDir());
    base_1.FileUploader.getInstance().init(base_1.GlobalConfig.fileUploadServer.host, base_1.GlobalConfig.fileUploadServer.port);
    let account = new account_profile_1.AccountStatusProfile();
    await account.load();
    if (!account.accountID || account.accountID.length === 0) {
        account.accountID = process.argv[2];
    }
    if (!account.peerid || account.peerid.length === 0) {
        account.peerid = `${account.accountID}-${base_1.RandomGenerator.string(8)}`;
    }
    account.errorMsg = '正在连接服务器';
    account.save();
    let reporter = new base_1.Reporter(base_1.GlobalConfig.reportServer.host, base_1.GlobalConfig.reportServer.port, account.peerid, base_1.GlobalConfig.version);
    let loggerFun = (info) => {
        console.log(info);
    };
    let logger = new base_1.Logger(loggerFun, loggerFun, loggerFun, logFolder);
    let deviceIdSave = new base_1.LocalStorageJson({
        file: path.join(base_1.DirHelper.getConfigDir(), 'deviceId.json'),
        logger
    });
    let runner = new Runner({
        account,
        reporter,
        version: base_1.GlobalConfig.version,
        updateHost: base_1.GlobalConfig.updateServer.host,
        updatePort: base_1.GlobalConfig.updateServer.port,
        deviceIdSave,
        platform: os.platform(),
    });
    await runner.start();
    // const serviceid = "4402";
    // const taskList = [
    //     "Connect_FristQA_TCP_direct",
    //     "Connect_FristQA_TCP_SN",
    //     "Connect_FristQA_TCP_PackageSize_answer",
    //     "Connect_FristQA_TCP_PackageSize_quesyion",
    //     "Connect_FristQA_UDP_direct",
    //     "Connect_FristQA_UDP_SN",
    //     "Connect_FristQA_UDP_PackageSize_answer",
    //     "Connect_FristQA_UDP_PackageSize_question",
    // ]
    const serviceid = "564150";
    const taskList = [
        "DMC_debuger_50MB",
    ];
    for (let i = 0; i < 10000; i++) {
        taskList.push("DMC_debuger_500MB");
    }
    for (let i in taskList) {
        let runConfig = path.join(base_1.DirHelper.getLogDir(), "running.pid");
        if (!fs.existsSync(runConfig)) {
            fs.createFileSync(runConfig);
        }
        let taskid = taskList[i];
        let str = JSON.stringify({ serviceid, taskid });
        runner.process.send(str);
        await runner.check_state();
    }
    process.exit(0);
}
main();

//# sourceMappingURL=data:application/json;charset=utf8;base64,
