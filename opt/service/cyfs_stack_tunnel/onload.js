"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceMain = void 0;
const base_1 = require("../../base");
const proxyManager_1 = require("./proxyManager");
async function ServiceMain(_interface) {
    _interface.getLogger().info(`=========start service namespace=${JSON.stringify(_interface.getNamespace())}`);
    let manager = new proxyManager_1.ProxyManager(_interface);
    _interface.registerApi('start_client', async (from, bytes, param) => {
        _interface.getLogger().debug(`remote call start_client,cyfs stack proxy will be inited`);
        let startInfo = await manager.init(param.stack_type);
        return { err: startInfo.err, bytes: Buffer.from(''), value: startInfo };
    });
    _interface.registerApi('proxy_data', async (from, bytes, param) => {
        _interface.getLogger().debug(`remote call proxy_data,${JSON.stringify(param)}`);
        let result = await manager.proxy_data(param.type, param.remoteAddress, param.remotePort, param.seq, bytes);
        return { err: base_1.ErrorCode.succ, bytes: Buffer.from(''), value: result };
    });
    _interface.registerApi('build_tunnel', async (from, bytes, param) => {
        _interface.getLogger().debug(`remote call proxy_data,${JSON.stringify(param)}`);
        let result = await manager.build_tunnel(param.type, param.remoteAddress, param.remotePort);
        return { err: base_1.ErrorCode.succ, bytes: Buffer.from(''), value: result };
    });
    _interface.registerApi('end_tunnel', async (from, bytes, param) => {
        _interface.getLogger().debug(`remote call proxy_data,${JSON.stringify(param)}`);
        let result = await manager.end_tunnel(param.type, param.remoteAddress, param.remotePort);
        return { err: base_1.ErrorCode.succ, bytes: Buffer.from(''), value: result };
    });
    _interface.registerApi('utilRequest', async (from, bytes, param) => {
        var _a, _b, _c, _d;
        _interface.getLogger().debug(`remote ${from.agentid} call utilRequest ${param.name}`);
        _interface.getLogger().debug(`remote call createBdtLpcListener ${param.name} `);
        let result = await manager.utilRequest({ json: param, bytes });
        // set resp package
        let respBytes = Buffer.from('');
        let respJson = {};
        if ((_a = result.resp) === null || _a === void 0 ? void 0 : _a.bytes) {
            respBytes = (_b = result.resp) === null || _b === void 0 ? void 0 : _b.bytes;
        }
        if ((_c = result.resp) === null || _c === void 0 ? void 0 : _c.json) {
            respJson = (_d = result.resp) === null || _d === void 0 ? void 0 : _d.json;
        }
        return { err: result.err, bytes: respBytes, value: respJson };
    });
}
exports.ServiceMain = ServiceMain;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlLXRlc3Rlci1hcHAvc2VydmljZS9jeWZzX3N0YWNrX3R1bm5lbC9vbmxvYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQW1HO0FBQ25HLGlEQUE4QztBQUl2QyxLQUFLLFVBQVUsV0FBVyxDQUFDLFVBQWtDO0lBRWhFLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsb0NBQW9DLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdHLElBQUksT0FBTyxHQUFpQixJQUFJLDJCQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekQsVUFBVSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsS0FBSyxFQUFFLElBQWUsRUFBRSxLQUFhLEVBQUUsS0FBNkIsRUFBZ0IsRUFBRTtRQUN6SCxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLDBEQUEwRCxDQUFDLENBQUM7UUFDekYsSUFBSSxTQUFTLEdBQUcsTUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxDQUFDO0lBQzVFLENBQUMsQ0FBQyxDQUFDO0lBQ0gsVUFBVSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsS0FBSyxFQUFFLElBQWUsRUFBRSxLQUFhLEVBQUUsS0FBK0UsRUFBZ0IsRUFBRTtRQUN6SyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLDBCQUEwQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoRixJQUFJLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxVQUFVLENB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USxFQUFFLENBQUM7SUFDbEUsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBdkNELGtDQXVDQyIsImZpbGUiOiJzZXJ2aWNlL2N5ZnNfc3RhY2tfdHVubmVsL29ubG9hZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVycm9yQ29kZSwgTmFtZXNwYWNlLCBMb2dnZXIsIFNlcnZpY2VDbGllbnRJbnRlcmZhY2UsIFJhbmRvbUdlbmVyYXRvciB9IGZyb20gJy4uLy4uL2Jhc2UnO1xyXG5pbXBvcnQgeyBQcm94eU1hbmFnZXIgfSBmcm9tICcuL3Byb3h5TWFuYWdlcic7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBTZXJ2aWNlTWFpbihfaW50ZXJmYWNlOiBTZXJ2aWNlQ2xpZW50SW50ZXJmYWNlKSB7XHJcblxyXG4gICAgX2ludGVyZmFjZS5nZXRMb2dnZXIoKS5pbmZvKGA9PT09PT09PT1zdGFydCBzZXJ2aWNlIG5hbWVzcGFjZT0ke0pTT04uc3RyaW5naWZ5KF9pbnRlcmZhY2UuZ2V0TmFtZXNwYWNlKCkpfWApO1xyXG4gICAgbGV0IG1hbmFnZXI6IFByb3h5TWFuYWdlciA9IG5ldyBQcm94eU1hbmFnZXIoX2ludGVyZmFjZSk7XHJcbiAgICBfaW50ZXJmYWNlLnJlZ2lzdGVyQXBpKCdzdGFydF9jbGllbnQnLCBhc3luYyAoZnJvbTogTmFtZXNwYWNlLCBieXRlczogQnVmZmVyLCBwYXJhbTogeyBzdGFja190eXBlOiBzdHJpbmcgfSk6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgICAgICAgX2ludGVyZmFjZS5nZXRMb2dnZXIoKS5kZWJ1ZyhgcmVtb3RlIGNhbGwgc3RhcnRfY2xpZW50LGN5ZnMgc3RhY2sgcHJveHkgd2lsbCBiZSBpbml0ZWRgKTtcclxuICAgICAgICBsZXQgc3RhcnRJbmZvID0gYXdhaXQgbWFuYWdlci5pbml0KHBhcmFtLnN0YWNrX3R5cGUpO1xyXG4gICAgICAgIHJldHVybiB7IGVycjogc3RhcnRJbmZvLmVyciwgYnl0ZXM6IEJ1ZmZlci5mcm9tKCcnKSwgdmFsdWU6IHN0YXJ0SW5mbyB9O1xyXG4gICAgfSk7XHJcbiAgICBfaW50ZXJmYWNlLnJlZ2lzdGVyQXBpKCdwcm94eV9kYXRhJywgYXN5bmMgKGZyb206IE5hbWVzcGFjZSwgYnl0ZXM6IEJ1ZmZlciwgcGFyYW06IHsgc2VxOiBudW1iZXIsIHR5cGU6IHN0cmluZywgcmVtb3RlQWRkcmVzczogc3RyaW5nLCByZW1vdGVQb3J0OiBudW1iZXIgfSk6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgICAgICAgX2ludGVyZmFjZS5nZXRMb2dnZXIoKS5kZWJ1ZyhgcmVtb3RlIGNhbGwgcHJveHlfZGF0YSwke0pTT04uc3RyaW5naWZ5KHBhcmFtKX1gKTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgbWFuYWdlci5wcm94eV9kYXRhKHBhcmFtLnR5cGUsIHBhcmFtLnJlbW90ZUFkZHJlc3MsIHBhcmFtLnJlbW90ZVBvcnQsIHBhcmFtLnNlcSwgYnl0ZXMpXHJcbiAgICAgICAgcmV0dXJuIHsgZXJyOiBFcnJvckNvZGUuc3VjYywgYnl0ZXM6IEJ1ZmZlci5mcm9tKCcnKSwgdmFsdWU6IHJlc3VsdCB9O1xyXG4gICAgfSk7XHJcbiAgICBfaW50ZXJmYWNlLnJlZ2lzdGVyQXBpKCdidWlsZF90dW5uZWwnLCBhc3luYyAoZnJvbTogTmFtZXNwYWNlLCBieXRlczogQnVmZmVyLCBwYXJhbTogeyB0eXBlOiBzdHJpbmcsIHJlbW90ZUFkZHJlc3M6IHN0cmluZywgcmVtb3RlUG9ydDogbnVtYmVyIH0pOiBQcm9taXNlPGFueT4gPT4ge1xyXG4gICAgICAgIF9pbnRlcmZhY2UuZ2V0TG9nZ2VyKCkuZGVidWcoYHJlbW90ZSBjYWxsIHByb3h5X2RhdGEsJHtKU09OLnN0cmluZ2lmeShwYXJhbSl9YCk7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IG1hbmFnZXIuYnVpbGRfdHVubmVsKHBhcmFtLnR5cGUsIHBhcmFtLnJlbW90ZUFkZHJlc3MsIHBhcmFtLnJlbW90ZVBvcnQpXHJcbiAgICAgICAgcmV0dXJuIHsgZXJyOiBFcnJvckNvZGUuc3VjYywgYnl0ZXM6IEJ1ZmZlci5mcm9tKCcnKSwgdmFsdWU6IHJlc3VsdCB9O1xyXG4gICAgfSk7XHJcbiAgICBfaW50ZXJmYWNlLnJlZ2lzdGVyQXBpKCdlbmRfdHVubmVsJywgYXN5bmMgKGZyb206IE5hbWVzcGFjZSwgYnl0ZXM6IEJ1ZmZlciwgcGFyYW06IHsgc2VxOiBudW1iZXIsIHR5cGU6IHN0cmluZywgcmVtb3RlQWRkcmVzczogc3RyaW5nLCByZW1vdGVQb3J0OiBudW1iZXIgfSk6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgICAgICAgX2ludGVyZmFjZS5nZXRMb2dnZXIoKS5kZWJ1ZyhgcmVtb3RlIGNhbGwgcHJveHlfZGF0YSwke0pTT04uc3RyaW5naWZ5KHBhcmFtKX1gKTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgbWFuYWdlci5lbmRfdHVubmVsKHBhcmFtLnR5cGUsIHBhcmFtLnJlbW90ZUFkZHJlc3MsIHBhcmFtLnJlbW90ZVBvcnQpXHJcbiAgICAgICAgcmV0dXJuIHsgZXJyOiBFcnJvckNvZGUuc3VjYywgYnl0ZXM6IEJ1ZmZlci5mcm9tKCcnKSwgdmFsdWU6IHJlc3VsdCB9O1xyXG4gICAgfSk7XHJcbiAgICBfaW50ZXJmYWNlLnJlZ2lzdGVyQXBpKCd1dGlsUmVxdWVzdCcsIGFzeW5jIChmcm9tOiBOYW1lc3BhY2UsIGJ5dGVzOiBCdWZmZXIsIHBhcmFtOiBhbnkpOiBQcm9taXNlPGFueT4gPT4ge1xyXG4gICAgICAgIF9pbnRlcmZhY2UuZ2V0TG9nZ2VyKCkuZGVidWcoYHJlbW90ZSAke2Zyb20uYWdlbnRpZH0gY2FsbCB1dGlsUmVxdWVzdCAke3BhcmFtLm5hbWV9YCk7XHJcbiAgICAgICAgX2ludGVyZmFjZS5nZXRMb2dnZXIoKS5kZWJ1ZyhgcmVtb3RlIGNhbGwgY3JlYXRlQmR0THBjTGlzdGVuZXIgJHtwYXJhbS5uYW1lfSBgKTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgbWFuYWdlci51dGlsUmVxdWVzdCh7IGpzb246IHBhcmFtLCBieXRlcyB9KVxyXG4gICAgICAgIC8vIHNldCByZXNwIHBhY2thZ2VcclxuICAgICAgICBsZXQgcmVzcEJ5dGVzID0gQnVmZmVyLmZyb20oJycpO1xyXG4gICAgICAgIGxldCByZXNwSnNvbiA9IHt9O1xyXG4gICAgICAgIGlmIChyZXN1bHQucmVzcD8uYnl0ZXMpIHtcclxuICAgICAgICAgICAgcmVzcEJ5dGVzID0gcmVzdWx0LnJlc3A/LmJ5dGVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVzdWx0LnJlc3A/Lmpzb24pIHtcclxuICAgICAgICAgICAgcmVzcEpzb24gPSByZXN1bHQucmVzcD8uanNvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgZXJyOiByZXN1bHQuZXJyLCBieXRlczogcmVzcEJ5dGVzLCB2YWx1ZTogcmVzcEpzb24gfTtcclxuICAgIH0pO1xyXG59Il19
