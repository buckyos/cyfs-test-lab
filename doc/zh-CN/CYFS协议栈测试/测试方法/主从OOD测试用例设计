##主从OOD测试用例设计

环境类型
dec_app真机环境
模拟器环境

Object Map 类型
MAP| 插入,更新,删除
Set| 插入,更新，删除

Name Object类型
标准对象|
核心对象|
扩展对象|
自定义对象|

Name Object关联类型
单级关联
多级关联

GlobalStateStub类型
Local_cache
root_state

OpEnvStub类型
PathOpEnvStub
SingleOpEnvStub

同步Object数据量
总同步10万
总同步100万
单新增次同步10万
单新增次同步100万

OOD工作模式
Standalone 独立工作模式
ActiveStandby 主从工作模式

主从OOD切换
主OOD读写|对象同步
主OOD只读|对象同步
从OOD读写|对象同步
从OOD只读|对象同步
两个主OOD
两个从OOD

* 主从OOD#数据同步业务流程冒烟测试
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建多个自定义对象
    （2）将多个自定义对象写入主OOD noc,将多个对象id插入op_env并更新及提交
    （3）查询主从OOD，revision并进行对比
     （4）从从OODnoc中使用对象id查询自定义对象
预期结果：
    (1) 主从OODrevision并进行对比查询结果一致，成功从从OOD中使用对象id查询出自定义对象

* 主从OOD#数据同步revision 同步，业务流程测试
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建多个自定义对象
    （2）将多个自定义对象写入主OOD noc,将多个对象id插入op_env并更新及提交
    （3）查询主从OOD，revision并进行对比
 	（4）从OODnoc中使用对象id查询自定义关联对象
预期结果：
    (1) 主从OODrevision并进行对比查询结果一致，成功从从OOD中使用关联对象id查询出自定义关联对象

* 主从OOD数据同步#数据类型,MAP类型数据 插入值 同步校验
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建多个自定义关联对象
    （2）将多个自定义关联对象写入noc,将多个关联对象id插入Map类型op_env并更新及提交
    （3）将多个关联对象写入数组类型数据结构
    （4）查询主从OOD，revision并进行对比
    （5）从OODnoc中使用关联对象id查询关联对象
预期结果：
    (1) 主从OODrevision并进行对比查询结果一致，成功从从OOD中使用关联对象id查询出关联对象

* 主从OOD数据同步#数据类型,MAP类型数据 更新值 同步校验
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建多个自定义对象
    （2）将多个自定义对象写入noc,将多个自定义及关联对象id插入Map类型op_env并更新及提交
    （3）将多个自定义对象id及关联对象id更新到数组数据结构
    （4）查询主从OOD，revision并进行对比
    （5）从OODnoc中使用对象id查询自定义对象
预期结果：
    (1) 主从OODrevision并进行对比查询结果一致，成功从从OOD中使用对象id查询出自定义对象

* 主从OOD数据同步#数据类型,MAP类型数据 删除值 同步校验
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）遍历数组数据结构并移除所有Map类型op_env键值对
    （2）查询主从OOD，revision并进行对比
    （3）遍历数组数据结构并使用自定义对象id获取自定义对象
    （4）遍历数组数据结构并使用自定义关联对象id获取自定义关联对象
预期结果：
    (1) 获取自定义对象及自定义关联对象失败

* 主从OOD数据同步#数据类型,SET类型数据 插入值 同步校验
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建多个自定义关联对象
    （2）将多个自定义关联对象写入noc,将多个关联对象id插入Set类型op_env并更新及提交
    （3）将多个关联对象写入数组类型数据结构
    （4）查询主从OOD，revision并进行对比
    （5）从OODnoc中使用关联对象id查询关联对象
预期结果：
    (1) 主从OODrevision并进行对比查询结果一致，成功从从OOD中使用关联对象id查询出关联对象
    
* 主从OOD数据同步#数据类型,SET类型数据 更新值 同步校验
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建多个自定义对象
    （2）将多个自定义对象写入noc,将多个自定义及关联对象id插入Set类型op_env并更新及提交
    （3）将多个自定义对象id及关联对象id更新到数组数据结构
    （4）查询主从OOD，revision并进行对比
    （5）从OODnoc中使用对象id查询自定义对象
预期结果：
    (1) 主从OODrevision并进行对比查询结果一致，成功从从OOD中使用对象id查询出自定义对象
    
* 主从OOD数据同步#数据类型,SET类型数据 删除值 同步校验
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）遍历数组数据结构并移除所有Set类型op_env键值对
    （2）查询主从OOD，revision并进行对比
    （3）遍历数组数据结构并使用自定义对象id获取自定义对象
    （4）遍历数组数据结构并使用自定义关联对象id获取自定义关联对象
预期结果：
    (1) 获取自定义对象及自定义关联对象失败

* 关联Object NON操作 修改主OOD object ，从OOD同步机制（目前不同步数据）
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建多个自定义对象,使用主OOD插入将多个对象写入NOC中，并将对象写入数组类型数据结构
    （2）遍历数组类型数据结构，主OOD使用对象id从NOC中获取自定义关联对象
    （3）使用查询出自定义对象数据重新构成新的自定义关联对象
    （4）将新构成的自定义对象插入主OOD的NOC中
    （5）查询主从OOD，revision并进行对比
    （6）使用自定义对象id查询从OOD的NOC获取修改后的自定义对象
预期结果：
    (1)主从OODrevision并进行对比查询结果一致，成功从从OOD中使用对象id查询出自定义对象


* 关联Object NON操作 删除NOC中Object ，从OOD同步机制（目前不同步数据）
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建多个自定义对象,使用主OOD插入将多个对象写入NOC中，并将对象写入数组类型数据结构
    （2）遍历数组类型数据结构，主OOD使用对象id从NOC中获取自定义关联对象
    （3）使用查询出自定义对象数据重新构成新的自定义关联对象
    （4）将新构成的自定义对象从主OOD的NOC中删除并提交op_env
    （5）查询主从OOD，revision并进行对比
    （6）使用自定义对象id查询从OOD的NOC获取重构后的自定义对象
预期结果：
    (1) 获取重构后的自定义对象失败
    
* NameObject 数据类型校验，标准对象
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建Device标准对象
    （2）将Device标准对象插入主OODNOC中并更新提交op_env
    （3）查询主从OOD，revision并进行对比
    （4）使用已插入Device对象id在从OODNOC中查询对象
预期结果：
    (1) 成功查询出已同步完毕的标准对象

* NameObject 数据类型校验，核心对象
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建TextObject核心对象
    （2）将Device核心对象插入主OODNOC中并更新提交op_env
    （3）查询主从OOD，revision并进行对比
    （4）使用已插入Device对象id在从OODNOC中查询对象
预期结果：
    (1) 成功查询出已同步完毕的核心对象
    
* NameObject 数据类型校验，扩展对象
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建自定义对象
    （2）将Device自定义对象插入主OODNOC中并更新提交op_env
    （3）查询主从OOD，revision并进行对比
    （4）使用已插入自定义对象id在从OODNOC中查询对象
预期结果：
    (1) 成功查询出已同步完毕的自定义对象
    
    

* 关联数据类型同步校验，结构化数据，关联对象 owner 同步 NameObject数据
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建标准对象
    （2）插入标准对象到主OODNOC
    （3）使用标准对象作为owner创建自定义对象
    （4）插入自定义对象到主OODNOC
    （5）查询主从OOD，revision并进行对比
    （6）在从OOD的NOC中查询自定义对象
预期结果：    
    (1) 成功查询出已同步完毕的自定义对象
    
* 关联数据类型同步校验，结构化数据，关联对象 author 同步 NameObject数据
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建标准对象
    （2）插入标准对象到主OODNOC
    （3）使用标准对象作为author创建自定义对象
    （4）插入自定义对象到主OODNOC
    （5）查询主从OOD，revision并进行对比
    （6）在从OOD的NOC中查询自定义对象
预期结果：    
    (1) 成功查询出已同步完毕的自定义对象
        
* 关联数据类型同步校验，结构化数据，关联对象 prev 同步NameObject数据
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建标准对象
    （2）插入标准对象到主OODNOC
    （3）使用标准对象作为prev创建自定义对象
    （4）插入自定义对象到主OODNOC
    （5）查询主从OOD，revision并进行对比
    （6）在从OOD的NOC中查询自定义对象
预期结果：    
    (1) 成功查询出已同步完毕的自定义对象
    
    
* 关联数据类型同步校验，结构化数据，关联对象 ref_objs 同步NameObject数据
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建标准对象
    （2）插入标准对象到主OODNOC
    （3）使用标准对象作为ref_objs创建自定义对象
    （4）插入自定义对象到主OODNOC
    （5）查询主从OOD，revision并进行对比
    （6）在从OOD的NOC中查询自定义对象
预期结果：    
    (1) 成功查询出已同步完毕的自定义对象

* 关联数据类型同步校验，结构化数据，关联对象 sign_soutce_objs 同步NameObject数据
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建标准对象
    （2）插入标准对象到主OODNOC
    （3）使用标准对象作为ref_objs创建自定义对象
    （4）使用sign_soutce_objs对自定义对象进行签名
    （4）插入签名后的自定义对象到主OODNOC
    （5）查询主从OOD，revision并进行对比
    （6）在从OOD的NOC中查询签名后的自定义对象
预期结果：    
    (1) 成功查询出已同步完毕的签名后自定义对象
    

* 关联数据类型同步校验，非结构化数据，关联对象 owner 同步Chunk 数据
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建Chunkid
    （2）将chunk插入主OODNDC中并更新提交op_env
    （3）使用chunkId创建自定义对象
    （4）将自定义对象插入主OODNOC中并更新提交op_env
    （5）查询主从OOD，revision并进行对比
    （6）在从OOD的NDC中查询已同步Chunk
预期结果：
    (1) 成功查询出已同步完毕的Chunk
    

* 关联数据类型同步校验，结构化数据，关联对象 author 同步Chunk 数据
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建自定义对象
    （2）将Device自定义对象插入主OODNOC中并更新提交op_env
    （3）查询主从OOD，revision并进行对比
    （4）使用已插入自定义对象id在从OODNOC中查询对象
预期结果：
    (1) 成功查询出已同步完毕的自定义对象
    

* 关联数据类型同步校验，结构化数据，关联对象 prev 同步Chunk数据
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建自定义对象
    （2）将Device自定义对象插入主OODNOC中并更新提交op_env
    （3）查询主从OOD，revision并进行对比
    （4）使用已插入自定义对象id在从OODNOC中查询对象
预期结果：
    (1) 成功查询出已同步完毕的自定义对象

* 关联数据类型同步校验，结构化数据，关联对象 ref_objs 同步 Chunk数据
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建自定义对象
    （2）将Device自定义对象插入主OODNOC中并更新提交op_env
    （3）查询主从OOD，revision并进行对比
    （4）使用已插入自定义对象id在从OODNOC中查询对象
预期结果：
    (1) 成功查询出已同步完毕的自定义对象
    
* 关联数据类型同步校验，结构化数据，sign_soutce_objs 同步 Chunk数据
前置条件：
    （1）模拟器启动成功，协议栈能够成功调用，冒烟测试用例执行通过
操作步骤：
    （1）初始化op_env,创建自定义对象
    （2）将Device自定义对象插入主OODNOC中并更新提交op_env
    （3）查询主从OOD，revision并进行对比
    （4）使用已插入自定义对象id在从OODNOC中查询对象
预期结果：
    (1) 成功查询出已同步完毕的自定义对象
